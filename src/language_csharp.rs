// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum CSharp {
    END = 0,
    BOM = 1,
    Bool = 2,
    Byte = 3,
    Char = 4,
    Decimal = 5,
    Double = 6,
    Float = 7,
    Int = 8,
    Long = 9,
    Object = 10,
    Sbyte = 11,
    Short = 12,
    String = 13,
    Uint = 14,
    Ulong = 15,
    Ushort = 16,
    LT = 17,
    COMMA = 18,
    GT = 19,
    Abstract = 20,
    Async = 21,
    Extern = 22,
    Internal = 23,
    New = 24,
    Override = 25,
    Private = 26,
    Protected = 27,
    Public = 28,
    Readonly = 29,
    Sealed = 30,
    Static = 31,
    Unsafe = 32,
    Virtual = 33,
    Volatile = 34,
    Alias = 35,
    SEMI = 36,
    Using = 37,
    EQ = 38,
    Namespace = 39,
    LBRACE = 40,
    RBRACE = 41,
    EQGT = 42,
    Get = 43,
    Set = 44,
    Partial = 45,
    Class = 46,
    COLON = 47,
    COMMA2 = 48,
    Dynamic = 49,
    Where = 50,
    Struct = 51,
    LPAREN = 52,
    RPAREN = 53,
    This = 54,
    LBRACK = 55,
    RBRACK = 56,
    DOT = 57,
    Event = 58,
    Add = 59,
    Remove = 60,
    Operator = 61,
    PLUS = 62,
    DASH = 63,
    BANG = 64,
    TILDE = 65,
    PLUSPLUS = 66,
    DASHDASH = 67,
    True = 68,
    False = 69,
    STAR = 70,
    SLASH = 71,
    PERCENT = 72,
    CARET = 73,
    PIPE = 74,
    AMP = 75,
    LTLT = 76,
    GTGT = 77,
    EQEQ = 78,
    BANGEQ = 79,
    GTEQ = 80,
    LTEQ = 81,
    Implicit = 82,
    Explicit = 83,
    Interface = 84,
    Enum = 85,
    Delegate = 86,
    VoidKeyword = 87,
    Ref = 88,
    Out = 89,
    Params = 90,
    Assembly = 91,
    Module = 92,
    Const = 93,
    QMARK = 94,
    AMPAMP = 95,
    PIPEPIPE = 96,
    Typeof = 97,
    Sizeof = 98,
    SQUOTE = 99,
    SLASHLBRACKCARETSQUOTERBRACKSLASH = 100,
    HexadecimalEscapeSequence = 101,
    SLASHBSLASHBSLASHuLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH =
        102,
    SLASHBSLASHBSLASHULBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH =
        103,
    BSLASHSQUOTE = 104,
    BSLASHDQUOTE = 105,
    BSLASHBSLASH = 106,
    BSLASH0 = 107,
    BSLASHa = 108,
    BSLASHb = 109,
    BSLASHf = 110,
    BSLASHn = 111,
    BSLASHr = 112,
    BSLASHt = 113,
    BSLASHv = 114,
    SLASHLBRACK0DASH9RBRACKPLUSSLASH = 115,
    SLASH0xLBRACK0DASH9aDASHfADASHFRBRACKPLUSSLASH = 116,
    IntegerTypeSuffix = 117,
    NullLiteral = 118,
    RealTypeSuffix = 119,
    ExponentPart = 120,
    DQUOTE = 121,
    SLASHLBRACKCARETDQUOTEBSLASHBSLASHBSLASHnRBRACKSLASH = 122,
    ATDQUOTE = 123,
    SLASHLBRACKCARETDQUOTERBRACKSTARSLASH = 124,
    Global = 125,
    COLONCOLON = 126,
    IdentifierName = 127,
    Comment = 128,
    Try = 129,
    Catch = 130,
    When = 131,
    Finally = 132,
    Checked = 133,
    Unchecked = 134,
    Lock = 135,
    Yield = 136,
    Return = 137,
    Break = 138,
    If = 139,
    Else = 140,
    Switch = 141,
    Case = 142,
    Default = 143,
    While = 144,
    Do = 145,
    Continue = 146,
    Throw = 147,
    Goto = 148,
    Var = 149,
    CompilationUnit = 150,
    TypeDeclaration = 151,
    Type = 152,
    PredefinedType = 153,
    TypeParameterList = 154,
    TypeParameter = 155,
    Modifiers = 156,
    ExternAliasDirective = 157,
    UsingDirective = 158,
    NameEquals = 159,
    NamespaceDeclaration = 160,
    PropertyDeclaration = 161,
    PropertyBody = 162,
    PropertyInitializer = 163,
    AccessorDeclarations = 164,
    GetAccessorDeclaration = 165,
    SetAccessorDeclaration = 166,
    AccessorModifier = 167,
    ClassDeclaration = 168,
    ClassBase = 169,
    TypeParameterConstraintsClause = 170,
    TypeParameterConstraints = 171,
    ConstructorConstraint = 172,
    IndexerDeclaration = 173,
    IndexerDeclarator = 174,
    IndexerBody = 175,
    EventDeclaration = 176,
    AddAccessorDeclaration = 177,
    RemoveAccessorDeclaration = 178,
    OperatorDeclaration = 179,
    OperatorDeclarator = 180,
    UnaryOperatorDeclarator = 181,
    OverloadableUnaryOperator = 182,
    BinaryOperatorDeclarator = 183,
    OverloadableBinaryOperator = 184,
    ConversionOperatorDeclarator = 185,
    OverloadableConversionOperator = 186,
    InterfaceDeclaration = 187,
    InterfaceBase = 188,
    InterfaceMethodDeclaration = 189,
    InterfaceEventDeclaration = 190,
    InterfacePropertyDeclaration = 191,
    InterfaceAccessor = 192,
    InterfaceIndexerDeclaration = 193,
    StructDeclaration = 194,
    StructInterfaces = 195,
    EnumDeclaration = 196,
    EnumMemberDeclaration = 197,
    IntegralType = 198,
    DelegateDeclaration = 199,
    ParameterList = 200,
    FormalParameterList = 201,
    Parameter = 202,
    DefaultArgument = 203,
    ParameterModifier = 204,
    ParameterArray = 205,
    ArrayType = 206,
    RankSpecifier = 207,
    Attributes = 208,
    AttributeSection = 209,
    AttributeList = 210,
    Attribute = 211,
    AttributeArgumentList = 212,
    GlobalAttributes = 213,
    FieldDeclaration = 214,
    VariableDeclaration = 215,
    GenericName = 216,
    VariableDeclarator = 217,
    VariableInitializer = 218,
    ArrayInitalizer = 219,
    EqualsValueClause = 220,
    ConstantDeclaration = 221,
    ConstantDeclarators = 222,
    ConstantDeclarator = 223,
    Expression = 224,
    BooleanExpression = 225,
    ConstantExpression = 226,
    ParenthesizedExpression = 227,
    TernaryExpression = 228,
    BinaryExpression = 229,
    UnaryExpression = 230,
    Literal = 231,
    BooleanLiteral = 232,
    CharacterLiteral = 233,
    UnicodeEscapeSequence = 234,
    SimpleEscapeSequence = 235,
    IntegerLiteral = 236,
    RealLiteral = 237,
    StringLiteral = 238,
    RegularStringLiteral = 239,
    RegularStringLiteralCharacter = 240,
    VerbatimStringLiteral = 241,
    QualifiedName = 242,
    AliasQualifiedName = 243,
    ConstructorDeclaration = 244,
    DestructorDeclaration = 245,
    MethodDeclaration = 246,
    Statement = 247,
    VariableAssignmentStatement = 248,
    StatementBlock = 249,
    StatementList = 250,
    LabeledStatement = 251,
    EmbeddedStatement = 252,
    EmptyStatement = 253,
    ExpressionStatement = 254,
    SelectionStatement = 255,
    IterationStatement = 256,
    JumpStatement = 257,
    TryStatement = 258,
    CatchClause = 259,
    ExceptionSpecifier = 260,
    ExceptionFilter = 261,
    FinallyClause = 262,
    CheckedStatement = 263,
    UncheckedStatement = 264,
    LockStatement = 265,
    UsingStatement = 266,
    ResourceAcquisition = 267,
    YieldStatement = 268,
    IfStatement = 269,
    SwitchStatement = 270,
    SwitchSection = 271,
    SwitchLabel = 272,
    WhileStatement = 273,
    DoStatement = 274,
    BreakStatement = 275,
    ContinueStatement = 276,
    ReturnStatement = 277,
    ThrowStatement = 278,
    GotoStatement = 279,
    DeclarationStatement = 280,
    LocalVariableDeclaration = 281,
    LocalVariableType = 282,
    LocalVariableDeclarators = 283,
    LocalVariableDeclarator = 284,
    LocalVariableInitializer = 285,
    LocalConstantDeclaration = 286,
    CompilationUnitRepeat1 = 287,
    CompilationUnitRepeat2 = 288,
    CompilationUnitRepeat3 = 289,
    CompilationUnitRepeat4 = 290,
    TypeParameterListRepeat1 = 291,
    ModifiersRepeat1 = 292,
    NamespaceDeclarationRepeat1 = 293,
    ClassDeclarationRepeat1 = 294,
    ClassDeclarationRepeat2 = 295,
    ClassBaseRepeat1 = 296,
    InterfaceDeclarationRepeat1 = 297,
    InterfacePropertyDeclarationRepeat1 = 298,
    StructDeclarationRepeat1 = 299,
    EnumDeclarationRepeat1 = 300,
    FormalParameterListRepeat1 = 301,
    RankSpecifierRepeat1 = 302,
    AttributesRepeat1 = 303,
    AttributeListRepeat1 = 304,
    VariableDeclarationRepeat1 = 305,
    ArrayInitalizerRepeat1 = 306,
    ConstantDeclaratorsRepeat1 = 307,
    RegularStringLiteralRepeat1 = 308,
    StatementListRepeat1 = 309,
    TryStatementRepeat1 = 310,
    SwitchStatementRepeat1 = 311,
    SwitchSectionRepeat1 = 312,
    LocalVariableDeclaratorsRepeat1 = 313,
    LabelName = 314,
    Error = 315,
}

impl Into<&'static str> for CSharp {
    fn into(self) -> &'static str {
        match self {
            CSharp::END => "END",
            CSharp::BOM => "ï»¿",
            CSharp::Bool => "bool",
            CSharp::Byte => "byte",
            CSharp::Char => "char",
            CSharp::Decimal => "decimal",
            CSharp::Double => "double",
            CSharp::Float => "float",
            CSharp::Int => "int",
            CSharp::Long => "long",
            CSharp::Object => "object",
            CSharp::Sbyte => "sbyte",
            CSharp::Short => "short",
            CSharp::String => "string",
            CSharp::Uint => "uint",
            CSharp::Ulong => "ulong",
            CSharp::Ushort => "ushort",
            CSharp::LT => "<",
            CSharp::COMMA => ",",
            CSharp::GT => ">",
            CSharp::Abstract => "abstract",
            CSharp::Async => "async",
            CSharp::Extern => "extern",
            CSharp::Internal => "internal",
            CSharp::New => "new",
            CSharp::Override => "override",
            CSharp::Private => "private",
            CSharp::Protected => "protected",
            CSharp::Public => "public",
            CSharp::Readonly => "readonly",
            CSharp::Sealed => "sealed",
            CSharp::Static => "static",
            CSharp::Unsafe => "unsafe",
            CSharp::Virtual => "virtual",
            CSharp::Volatile => "volatile",
            CSharp::Alias => "alias",
            CSharp::SEMI => ";",
            CSharp::Using => "using",
            CSharp::EQ => "=",
            CSharp::Namespace => "namespace",
            CSharp::LBRACE => "{",
            CSharp::RBRACE => "}",
            CSharp::EQGT => "=>",
            CSharp::Get => "get",
            CSharp::Set => "set",
            CSharp::Partial => "partial",
            CSharp::Class => "class",
            CSharp::COLON => ":",
            CSharp::COMMA2 => ", ",
            CSharp::Dynamic => "dynamic",
            CSharp::Where => "where",
            CSharp::Struct => "struct",
            CSharp::LPAREN => "(",
            CSharp::RPAREN => ")",
            CSharp::This => "this",
            CSharp::LBRACK => "[",
            CSharp::RBRACK => "]",
            CSharp::DOT => ".",
            CSharp::Event => "event",
            CSharp::Add => "add",
            CSharp::Remove => "remove",
            CSharp::Operator => "operator",
            CSharp::PLUS => "+",
            CSharp::DASH => "-",
            CSharp::BANG => "!",
            CSharp::TILDE => "~",
            CSharp::PLUSPLUS => "++",
            CSharp::DASHDASH => "--",
            CSharp::True => "true",
            CSharp::False => "false",
            CSharp::STAR => "*",
            CSharp::SLASH => "/",
            CSharp::PERCENT => "%",
            CSharp::CARET => "^",
            CSharp::PIPE => "|",
            CSharp::AMP => "&",
            CSharp::LTLT => "<<",
            CSharp::GTGT => ">>",
            CSharp::EQEQ => "==",
            CSharp::BANGEQ => "!=",
            CSharp::GTEQ => ">=",
            CSharp::LTEQ => "<=",
            CSharp::Implicit => "implicit",
            CSharp::Explicit => "explicit",
            CSharp::Interface => "interface",
            CSharp::Enum => "enum",
            CSharp::Delegate => "delegate",
            CSharp::VoidKeyword => "void_keyword",
            CSharp::Ref => "ref",
            CSharp::Out => "out",
            CSharp::Params => "params",
            CSharp::Assembly => "assembly",
            CSharp::Module => "module",
            CSharp::Const => "const",
            CSharp::QMARK => "?",
            CSharp::AMPAMP => "&&",
            CSharp::PIPEPIPE => "||",
            CSharp::Typeof => "typeof",
            CSharp::Sizeof => "sizeof",
            CSharp::SQUOTE => "'",
            CSharp::SLASHLBRACKCARETSQUOTERBRACKSLASH => "/[^']/",
            CSharp::HexadecimalEscapeSequence => "_hexadecimal_escape_sequence",
            CSharp::SLASHBSLASHBSLASHuLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH => "/\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/",
            CSharp::SLASHBSLASHBSLASHULBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH => "/\\\\U[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/",
            CSharp::BSLASHSQUOTE => "\\'",
            CSharp::BSLASHDQUOTE => "\\\"",
            CSharp::BSLASHBSLASH => "\\\\",
            CSharp::BSLASH0 => "\\0",
            CSharp::BSLASHa => "\\a",
            CSharp::BSLASHb => "\\b",
            CSharp::BSLASHf => "\\f",
            CSharp::BSLASHn => "\\n",
            CSharp::BSLASHr => "\\r",
            CSharp::BSLASHt => "\\t",
            CSharp::BSLASHv => "\\v",
            CSharp::SLASHLBRACK0DASH9RBRACKPLUSSLASH => "/[0-9]+/",
            CSharp::SLASH0xLBRACK0DASH9aDASHfADASHFRBRACKPLUSSLASH => "/0x[0-9a-fA-F]+/",
            CSharp::IntegerTypeSuffix => "_integer_type_suffix",
            CSharp::NullLiteral => "null_literal",
            CSharp::RealTypeSuffix => "_real_type_suffix",
            CSharp::ExponentPart => "_exponent_part",
            CSharp::DQUOTE => "\"",
            CSharp::SLASHLBRACKCARETDQUOTEBSLASHBSLASHBSLASHnRBRACKSLASH => "/[^\"\\\\\\n]/",
            CSharp::ATDQUOTE => "@\"",
            CSharp::SLASHLBRACKCARETDQUOTERBRACKSTARSLASH => "/[^\"]*/",
            CSharp::Global => "global",
            CSharp::COLONCOLON => "::",
            CSharp::IdentifierName => "identifier_name",
            CSharp::Comment => "comment",
            CSharp::Try => "try",
            CSharp::Catch => "catch",
            CSharp::When => "when",
            CSharp::Finally => "finally",
            CSharp::Checked => "checked",
            CSharp::Unchecked => "unchecked",
            CSharp::Lock => "lock",
            CSharp::Yield => "yield",
            CSharp::Return => "return",
            CSharp::Break => "break",
            CSharp::If => "if",
            CSharp::Else => "else",
            CSharp::Switch => "switch",
            CSharp::Case => "case",
            CSharp::Default => "default",
            CSharp::While => "while",
            CSharp::Do => "do",
            CSharp::Continue => "continue",
            CSharp::Throw => "throw",
            CSharp::Goto => "goto",
            CSharp::Var => "var",
            CSharp::CompilationUnit => "compilation_unit",
            CSharp::TypeDeclaration => "_type_declaration",
            CSharp::Type => "_type",
            CSharp::PredefinedType => "predefined_type",
            CSharp::TypeParameterList => "type_parameter_list",
            CSharp::TypeParameter => "type_parameter",
            CSharp::Modifiers => "modifiers",
            CSharp::ExternAliasDirective => "extern_alias_directive",
            CSharp::UsingDirective => "using_directive",
            CSharp::NameEquals => "name_equals",
            CSharp::NamespaceDeclaration => "namespace_declaration",
            CSharp::PropertyDeclaration => "property_declaration",
            CSharp::PropertyBody => "_property_body",
            CSharp::PropertyInitializer => "_property_initializer",
            CSharp::AccessorDeclarations => "_accessor_declarations",
            CSharp::GetAccessorDeclaration => "get_accessor_declaration",
            CSharp::SetAccessorDeclaration => "set_accessor_declaration",
            CSharp::AccessorModifier => "accessor_modifier",
            CSharp::ClassDeclaration => "class_declaration",
            CSharp::ClassBase => "class_base",
            CSharp::TypeParameterConstraintsClause => "type_parameter_constraints_clause",
            CSharp::TypeParameterConstraints => "type_parameter_constraints",
            CSharp::ConstructorConstraint => "constructor_constraint",
            CSharp::IndexerDeclaration => "indexer_declaration",
            CSharp::IndexerDeclarator => "_indexer_declarator",
            CSharp::IndexerBody => "_indexer_body",
            CSharp::EventDeclaration => "event_declaration",
            CSharp::AddAccessorDeclaration => "add_accessor_declaration",
            CSharp::RemoveAccessorDeclaration => "remove_accessor_declaration",
            CSharp::OperatorDeclaration => "operator_declaration",
            CSharp::OperatorDeclarator => "_operator_declarator",
            CSharp::UnaryOperatorDeclarator => "_unary_operator_declarator",
            CSharp::OverloadableUnaryOperator => "overloadable_unary_operator",
            CSharp::BinaryOperatorDeclarator => "_binary_operator_declarator",
            CSharp::OverloadableBinaryOperator => "overloadable_binary_operator",
            CSharp::ConversionOperatorDeclarator => "_conversion_operator_declarator",
            CSharp::OverloadableConversionOperator => "overloadable_conversion_operator",
            CSharp::InterfaceDeclaration => "interface_declaration",
            CSharp::InterfaceBase => "interface_base",
            CSharp::InterfaceMethodDeclaration => "interface_method_declaration",
            CSharp::InterfaceEventDeclaration => "interface_event_declaration",
            CSharp::InterfacePropertyDeclaration => "interface_property_declaration",
            CSharp::InterfaceAccessor => "interface_accessor",
            CSharp::InterfaceIndexerDeclaration => "interface_indexer_declaration",
            CSharp::StructDeclaration => "struct_declaration",
            CSharp::StructInterfaces => "struct_interfaces",
            CSharp::EnumDeclaration => "enum_declaration",
            CSharp::EnumMemberDeclaration => "enum_member_declaration",
            CSharp::IntegralType => "_integral_type",
            CSharp::DelegateDeclaration => "delegate_declaration",
            CSharp::ParameterList => "parameter_list",
            CSharp::FormalParameterList => "_formal_parameter_list",
            CSharp::Parameter => "parameter",
            CSharp::DefaultArgument => "default_argument",
            CSharp::ParameterModifier => "parameter_modifier",
            CSharp::ParameterArray => "parameter_array",
            CSharp::ArrayType => "array_type",
            CSharp::RankSpecifier => "rank_specifier",
            CSharp::Attributes => "_attributes",
            CSharp::AttributeSection => "_attribute_section",
            CSharp::AttributeList => "attribute_list",
            CSharp::Attribute => "attribute",
            CSharp::AttributeArgumentList => "attribute_argument_list",
            CSharp::GlobalAttributes => "_global_attributes",
            CSharp::FieldDeclaration => "field_declaration",
            CSharp::VariableDeclaration => "variable_declaration",
            CSharp::GenericName => "generic_name",
            CSharp::VariableDeclarator => "variable_declarator",
            CSharp::VariableInitializer => "variable_initializer",
            CSharp::ArrayInitalizer => "array_initalizer",
            CSharp::EqualsValueClause => "equals_value_clause",
            CSharp::ConstantDeclaration => "constant_declaration",
            CSharp::ConstantDeclarators => "_constant_declarators",
            CSharp::ConstantDeclarator => "constant_declarator",
            CSharp::Expression => "_expression",
            CSharp::BooleanExpression => "boolean_expression",
            CSharp::ConstantExpression => "constant_expression",
            CSharp::ParenthesizedExpression => "parenthesized_expression",
            CSharp::TernaryExpression => "ternary_expression",
            CSharp::BinaryExpression => "binary_expression",
            CSharp::UnaryExpression => "unary_expression",
            CSharp::Literal => "_literal",
            CSharp::BooleanLiteral => "boolean_literal",
            CSharp::CharacterLiteral => "character_literal",
            CSharp::UnicodeEscapeSequence => "_unicode_escape_sequence",
            CSharp::SimpleEscapeSequence => "_simple_escape_sequence",
            CSharp::IntegerLiteral => "integer_literal",
            CSharp::RealLiteral => "real_literal",
            CSharp::StringLiteral => "string_literal",
            CSharp::RegularStringLiteral => "_regular_string_literal",
            CSharp::RegularStringLiteralCharacter => "_regular_string_literal_character",
            CSharp::VerbatimStringLiteral => "_verbatim_string_literal",
            CSharp::QualifiedName => "qualified_name",
            CSharp::AliasQualifiedName => "alias_qualified_name",
            CSharp::ConstructorDeclaration => "constructor_declaration",
            CSharp::DestructorDeclaration => "destructor_declaration",
            CSharp::MethodDeclaration => "method_declaration",
            CSharp::Statement => "_statement",
            CSharp::VariableAssignmentStatement => "variable_assignment_statement",
            CSharp::StatementBlock => "statement_block",
            CSharp::StatementList => "_statement_list",
            CSharp::LabeledStatement => "_labeled_statement",
            CSharp::EmbeddedStatement => "_embedded_statement",
            CSharp::EmptyStatement => "empty_statement",
            CSharp::ExpressionStatement => "expression_statement",
            CSharp::SelectionStatement => "_selection_statement",
            CSharp::IterationStatement => "_iteration_statement",
            CSharp::JumpStatement => "_jump_statement",
            CSharp::TryStatement => "try_statement",
            CSharp::CatchClause => "catch_clause",
            CSharp::ExceptionSpecifier => "_exception_specifier",
            CSharp::ExceptionFilter => "_exception_filter",
            CSharp::FinallyClause => "finally_clause",
            CSharp::CheckedStatement => "checked_statement",
            CSharp::UncheckedStatement => "unchecked_statement",
            CSharp::LockStatement => "lock_statement",
            CSharp::UsingStatement => "using_statement",
            CSharp::ResourceAcquisition => "_resource_acquisition",
            CSharp::YieldStatement => "yield_statement",
            CSharp::IfStatement => "if_statement",
            CSharp::SwitchStatement => "switch_statement",
            CSharp::SwitchSection => "switch_section",
            CSharp::SwitchLabel => "switch_label",
            CSharp::WhileStatement => "while_statement",
            CSharp::DoStatement => "do_statement",
            CSharp::BreakStatement => "break_statement",
            CSharp::ContinueStatement => "continue_statement",
            CSharp::ReturnStatement => "return_statement",
            CSharp::ThrowStatement => "throw_statement",
            CSharp::GotoStatement => "goto_statement",
            CSharp::DeclarationStatement => "_declaration_statement",
            CSharp::LocalVariableDeclaration => "local_variable_declaration",
            CSharp::LocalVariableType => "_local_variable_type",
            CSharp::LocalVariableDeclarators => "_local_variable_declarators",
            CSharp::LocalVariableDeclarator => "local_variable_declarator",
            CSharp::LocalVariableInitializer => "local_variable_initializer",
            CSharp::LocalConstantDeclaration => "local_constant_declaration",
            CSharp::CompilationUnitRepeat1 => "compilation_unit_repeat1",
            CSharp::CompilationUnitRepeat2 => "compilation_unit_repeat2",
            CSharp::CompilationUnitRepeat3 => "compilation_unit_repeat3",
            CSharp::CompilationUnitRepeat4 => "compilation_unit_repeat4",
            CSharp::TypeParameterListRepeat1 => "type_parameter_list_repeat1",
            CSharp::ModifiersRepeat1 => "modifiers_repeat1",
            CSharp::NamespaceDeclarationRepeat1 => "namespace_declaration_repeat1",
            CSharp::ClassDeclarationRepeat1 => "class_declaration_repeat1",
            CSharp::ClassDeclarationRepeat2 => "class_declaration_repeat2",
            CSharp::ClassBaseRepeat1 => "class_base_repeat1",
            CSharp::InterfaceDeclarationRepeat1 => "interface_declaration_repeat1",
            CSharp::InterfacePropertyDeclarationRepeat1 => "interface_property_declaration_repeat1",
            CSharp::StructDeclarationRepeat1 => "struct_declaration_repeat1",
            CSharp::EnumDeclarationRepeat1 => "enum_declaration_repeat1",
            CSharp::FormalParameterListRepeat1 => "_formal_parameter_list_repeat1",
            CSharp::RankSpecifierRepeat1 => "rank_specifier_repeat1",
            CSharp::AttributesRepeat1 => "_attributes_repeat1",
            CSharp::AttributeListRepeat1 => "attribute_list_repeat1",
            CSharp::VariableDeclarationRepeat1 => "variable_declaration_repeat1",
            CSharp::ArrayInitalizerRepeat1 => "array_initalizer_repeat1",
            CSharp::ConstantDeclaratorsRepeat1 => "_constant_declarators_repeat1",
            CSharp::RegularStringLiteralRepeat1 => "_regular_string_literal_repeat1",
            CSharp::StatementListRepeat1 => "_statement_list_repeat1",
            CSharp::TryStatementRepeat1 => "try_statement_repeat1",
            CSharp::SwitchStatementRepeat1 => "switch_statement_repeat1",
            CSharp::SwitchSectionRepeat1 => "switch_section_repeat1",
            CSharp::LocalVariableDeclaratorsRepeat1 => "_local_variable_declarators_repeat1",
            CSharp::LabelName => "label_name",
            CSharp::Error => "ERROR",
            }
    }
}

static KEYS: phf::Map<&'static str, CSharp> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 4),
        (0, 14),
        (0, 5),
        (0, 2),
        (3, 141),
        (1, 17),
        (2, 0),
        (0, 105),
        (0, 2),
        (0, 4),
        (0, 49),
        (0, 63),
        (8, 99),
        (0, 31),
        (0, 12),
        (0, 207),
        (0, 175),
        (0, 7),
        (1, 166),
        (0, 0),
        (12, 36),
        (0, 5),
        (0, 26),
        (8, 233),
        (8, 310),
        (0, 136),
        (0, 44),
        (0, 113),
        (0, 170),
        (1, 6),
        (0, 15),
        (6, 266),
        (0, 53),
        (0, 35),
        (18, 250),
        (0, 20),
        (2, 130),
        (0, 17),
        (0, 0),
        (0, 213),
        (0, 47),
        (1, 201),
        (0, 2),
        (0, 180),
        (16, 50),
        (0, 45),
        (2, 177),
        (1, 37),
        (0, 169),
        (0, 110),
        (18, 247),
        (0, 151),
        (50, 59),
        (1, 306),
        (0, 0),
        (0, 93),
        (0, 8),
        (1, 171),
        (0, 17),
        (25, 197),
        (0, 215),
        (0, 0),
        (86, 160),
    ]),
    entries: ::phf::Slice::Static(&[
        ("[", CSharp::LBRACK),
        ("_statement_list", CSharp::StatementList),
        ("?", CSharp::QMARK),
        ("binary_expression", CSharp::BinaryExpression),
        ("sbyte", CSharp::Sbyte),
        ("internal", CSharp::Internal),
        ("class_declaration_repeat1", CSharp::ClassDeclarationRepeat1),
        ("_simple_escape_sequence", CSharp::SimpleEscapeSequence),
        ("local_variable_declarator", CSharp::LocalVariableDeclarator),
        ("get", CSharp::Get),
        ("unary_expression", CSharp::UnaryExpression),
        ("class_base", CSharp::ClassBase),
        ("string", CSharp::String),
        ("_property_body", CSharp::PropertyBody),
        ("case", CSharp::Case),
        ("_local_variable_declarators", CSharp::LocalVariableDeclarators),
        ("attribute_argument_list", CSharp::AttributeArgumentList),
        ("compilation_unit", CSharp::CompilationUnit),
        ("delegate", CSharp::Delegate),
        (")", CSharp::RPAREN),
        ("qualified_name", CSharp::QualifiedName),
        ("yield_statement", CSharp::YieldStatement),
        ("float", CSharp::Float),
        ("async", CSharp::Async),
        ("_real_type_suffix", CSharp::RealTypeSuffix),
        ("_global_attributes", CSharp::GlobalAttributes),
        ("modifiers_repeat1", CSharp::ModifiersRepeat1),
        ("type_parameter_list_repeat1", CSharp::TypeParameterListRepeat1),
        ("+", CSharp::PLUS),
        ("attribute", CSharp::Attribute),
        ("extern_alias_directive", CSharp::ExternAliasDirective),
        ("int", CSharp::Int),
        ("string_literal", CSharp::StringLiteral),
        ("!=", CSharp::BANGEQ),
        ("::", CSharp::COLONCOLON),
        ("_verbatim_string_literal", CSharp::VerbatimStringLiteral),
        (";", CSharp::SEMI),
        ("_jump_statement", CSharp::JumpStatement),
        ("return_statement", CSharp::ReturnStatement),
        ("constant_declaration", CSharp::ConstantDeclaration),
        (":", CSharp::COLON),
        ("_selection_statement", CSharp::SelectionStatement),
        ("type_parameter", CSharp::TypeParameter),
        ("/0x[0-9a-fA-F]+/", CSharp::SLASH0xLBRACK0DASH9aDASHfADASHFRBRACKPLUSSLASH),
        ("namespace", CSharp::Namespace),
        ("switch_section", CSharp::SwitchSection),
        ("remove", CSharp::Remove),
        ("const", CSharp::Const),
        ("enum_declaration_repeat1", CSharp::EnumDeclarationRepeat1),
        ("@\\\"", CSharp::ATDQUOTE),
        ("_attributes_repeat1", CSharp::AttributesRepeat1),
        ("while_statement", CSharp::WhileStatement),
        ("\\\\a", CSharp::BSLASHa),
        ("event", CSharp::Event),
        ("uint", CSharp::Uint),
        ("=>", CSharp::EQGT),
        ("/[0-9]+/", CSharp::SLASHLBRACK0DASH9RBRACKPLUSSLASH),
        ("switch_section_repeat1", CSharp::SwitchSectionRepeat1),
        ("attribute_list_repeat1", CSharp::AttributeListRepeat1),
        ("void_keyword", CSharp::VoidKeyword),
        ("goto", CSharp::Goto),
        ("module", CSharp::Module),
        ("equals_value_clause", CSharp::EqualsValueClause),
        ("readonly", CSharp::Readonly),
        ("remove_accessor_declaration", CSharp::RemoveAccessorDeclaration),
        (">>", CSharp::GTGT),
        ("constructor_constraint", CSharp::ConstructorConstraint),
        ("assembly", CSharp::Assembly),
        ("double", CSharp::Double),
        ("break", CSharp::Break),
        ("volatile", CSharp::Volatile),
        ("out", CSharp::Out),
        ("throw_statement", CSharp::ThrowStatement),
        ("_formal_parameter_list_repeat1", CSharp::FormalParameterListRepeat1),
        ("||", CSharp::PIPEPIPE),
        ("_indexer_declarator", CSharp::IndexerDeclarator),
        ("try_statement", CSharp::TryStatement),
        ("class_declaration_repeat2", CSharp::ClassDeclarationRepeat2),
        ("_labeled_statement", CSharp::LabeledStatement),
        ("enum", CSharp::Enum),
        ("\\\\0", CSharp::BSLASH0),
        ("ï»¿", CSharp::BOM),
        ("switch_statement_repeat1", CSharp::SwitchStatementRepeat1),
        ("_constant_declarators_repeat1", CSharp::ConstantDeclaratorsRepeat1),
        ("/\\\\\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/", CSharp::SLASHBSLASHBSLASHuLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH),
        ("struct_declaration_repeat1", CSharp::StructDeclarationRepeat1),
        ("variable_declarator", CSharp::VariableDeclarator),
        ("extern", CSharp::Extern),
        ("_exception_specifier", CSharp::ExceptionSpecifier),
        ("namespace_declaration", CSharp::NamespaceDeclaration),
        ("overloadable_unary_operator", CSharp::OverloadableUnaryOperator),
        ("statement_block", CSharp::StatementBlock),
        ("operator", CSharp::Operator),
        ("event_declaration", CSharp::EventDeclaration),
        ("do_statement", CSharp::DoStatement),
        ("_attribute_section", CSharp::AttributeSection),
        ("_integer_type_suffix", CSharp::IntegerTypeSuffix),
        ("lock", CSharp::Lock),
        ("ERROR", CSharp::Error),
        ("abstract", CSharp::Abstract),
        ("continue", CSharp::Continue),
        ("local_variable_declaration", CSharp::LocalVariableDeclaration),
        ("decimal", CSharp::Decimal),
        (".", CSharp::DOT),
        ("short", CSharp::Short),
        ("break_statement", CSharp::BreakStatement),
        ("dynamic", CSharp::Dynamic),
        ("throw", CSharp::Throw),
        ("array_initalizer_repeat1", CSharp::ArrayInitalizerRepeat1),
        (">", CSharp::GT),
        ("interface_property_declaration", CSharp::InterfacePropertyDeclaration),
        ("override", CSharp::Override),
        ("get_accessor_declaration", CSharp::GetAccessorDeclaration),
        ("static", CSharp::Static),
        ("parameter_modifier", CSharp::ParameterModifier),
        ("modifiers", CSharp::Modifiers),
        ("attribute_list", CSharp::AttributeList),
        ("checked", CSharp::Checked),
        ("^", CSharp::CARET),
        ("<<", CSharp::LTLT),
        ("_constant_declarators", CSharp::ConstantDeclarators),
        ("\\\\v", CSharp::BSLASHv),
        ("local_variable_initializer", CSharp::LocalVariableInitializer),
        ("finally", CSharp::Finally),
        ("checked_statement", CSharp::CheckedStatement),
        ("<=", CSharp::LTEQ),
        ("property_declaration", CSharp::PropertyDeclaration),
        ("else", CSharp::Else),
        ("partial", CSharp::Partial),
        ("if_statement", CSharp::IfStatement),
        ("sealed", CSharp::Sealed),
        ("/", CSharp::SLASH),
        ("type_parameter_list", CSharp::TypeParameterList),
        ("interface_event_declaration", CSharp::InterfaceEventDeclaration),
        ("finally_clause", CSharp::FinallyClause),
        ("switch_statement", CSharp::SwitchStatement),
        ("/[^\\\"]*/", CSharp::SLASHLBRACKCARETDQUOTERBRACKSTARSLASH),
        ("using_directive", CSharp::UsingDirective),
        ("_literal", CSharp::Literal),
        ("_attributes", CSharp::Attributes),
        ("interface_base", CSharp::InterfaceBase),
        ("compilation_unit_repeat3", CSharp::CompilationUnitRepeat3),
        ("interface_accessor", CSharp::InterfaceAccessor),
        ("compilation_unit_repeat1", CSharp::CompilationUnitRepeat1),
        ("character_literal", CSharp::CharacterLiteral),
        ("_formal_parameter_list", CSharp::FormalParameterList),
        ("while", CSharp::While),
        ("_exponent_part", CSharp::ExponentPart),
        ("_local_variable_type", CSharp::LocalVariableType),
        ("field_declaration", CSharp::FieldDeclaration),
        ("struct_interfaces", CSharp::StructInterfaces),
        ("try_statement_repeat1", CSharp::TryStatementRepeat1),
        ("_local_variable_declarators_repeat1", CSharp::LocalVariableDeclaratorsRepeat1),
        ("where", CSharp::Where),
        ("using", CSharp::Using),
        ("local_constant_declaration", CSharp::LocalConstantDeclaration),
        ("++", CSharp::PLUSPLUS),
        ("_unary_operator_declarator", CSharp::UnaryOperatorDeclarator),
        ("array_type", CSharp::ArrayType),
        ("sizeof", CSharp::Sizeof),
        ("parameter", CSharp::Parameter),
        ("type_parameter_constraints", CSharp::TypeParameterConstraints),
        ("return", CSharp::Return),
        ("\\\\n", CSharp::BSLASHn),
        ("_embedded_statement", CSharp::EmbeddedStatement),
        ("continue_statement", CSharp::ContinueStatement),
        (",", CSharp::COMMA),
        ("goto_statement", CSharp::GotoStatement),
        ("default", CSharp::Default),
        ("integer_literal", CSharp::IntegerLiteral),
        ("compilation_unit_repeat4", CSharp::CompilationUnitRepeat4),
        ("label_name", CSharp::LabelName),
        ("overloadable_conversion_operator", CSharp::OverloadableConversionOperator),
        ("namespace_declaration_repeat1", CSharp::NamespaceDeclarationRepeat1),
        ("constant_declarator", CSharp::ConstantDeclarator),
        ("_binary_operator_declarator", CSharp::BinaryOperatorDeclarator),
        ("private", CSharp::Private),
        ("new", CSharp::New),
        ("=", CSharp::EQ),
        ("class_base_repeat1", CSharp::ClassBaseRepeat1),
        ("explicit", CSharp::Explicit),
        ("compilation_unit_repeat2", CSharp::CompilationUnitRepeat2),
        ("array_initalizer", CSharp::ArrayInitalizer),
        ("==", CSharp::EQEQ),
        ("(", CSharp::LPAREN),
        ("constant_expression", CSharp::ConstantExpression),
        ("_conversion_operator_declarator", CSharp::ConversionOperatorDeclarator),
        ("add_accessor_declaration", CSharp::AddAccessorDeclaration),
        ("&", CSharp::AMP),
        ("<", CSharp::LT),
        ("char", CSharp::Char),
        ("try", CSharp::Try),
        ("this", CSharp::This),
        ("_regular_string_literal_character", CSharp::RegularStringLiteralCharacter),
        ("boolean_literal", CSharp::BooleanLiteral),
        ("_regular_string_literal_repeat1", CSharp::RegularStringLiteralRepeat1),
        ("destructor_declaration", CSharp::DestructorDeclaration),
        ("null_literal", CSharp::NullLiteral),
        ("_resource_acquisition", CSharp::ResourceAcquisition),
        ("~", CSharp::TILDE),
        ("var", CSharp::Var),
        ("_operator_declarator", CSharp::OperatorDeclarator),
        ("--", CSharp::DASHDASH),
        ("do", CSharp::Do),
        ("add", CSharp::Add),
        ("operator_declaration", CSharp::OperatorDeclaration),
        ("unchecked", CSharp::Unchecked),
        ("parenthesized_expression", CSharp::ParenthesizedExpression),
        ("false", CSharp::False),
        ("boolean_expression", CSharp::BooleanExpression),
        ("lock_statement", CSharp::LockStatement),
        ("%", CSharp::PERCENT),
        ("byte", CSharp::Byte),
        ("virtual", CSharp::Virtual),
        ("_regular_string_literal", CSharp::RegularStringLiteral),
        ("predefined_type", CSharp::PredefinedType),
        ("_statement_list_repeat1", CSharp::StatementListRepeat1),
        ("type_parameter_constraints_clause", CSharp::TypeParameterConstraintsClause),
        ("\\\"", CSharp::DQUOTE),
        ("typeof", CSharp::Typeof),
        ("interface_declaration_repeat1", CSharp::InterfaceDeclarationRepeat1),
        ("\\\\f", CSharp::BSLASHf),
        ("protected", CSharp::Protected),
        ("interface", CSharp::Interface),
        ("}", CSharp::RBRACE),
        ("delegate_declaration", CSharp::DelegateDeclaration),
        ("interface_indexer_declaration", CSharp::InterfaceIndexerDeclaration),
        ("identifier_name", CSharp::IdentifierName),
        ("!", CSharp::BANG),
        ("expression_statement", CSharp::ExpressionStatement),
        ("accessor_modifier", CSharp::AccessorModifier),
        ("_exception_filter", CSharp::ExceptionFilter),
        ("set", CSharp::Set),
        ("ternary_expression", CSharp::TernaryExpression),
        ("generic_name", CSharp::GenericName),
        ("_indexer_body", CSharp::IndexerBody),
        ("_property_initializer", CSharp::PropertyInitializer),
        ("enum_declaration", CSharp::EnumDeclaration),
        ("public", CSharp::Public),
        ("/\\\\\\\\U[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/", CSharp::SLASHBSLASHBSLASHULBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKLBRACK0DASH9aDASHfADASHFRBRACKSLASH),
        ("rank_specifier", CSharp::RankSpecifier),
        ("comment", CSharp::Comment),
        ("struct", CSharp::Struct),
        ("\'", CSharp::SQUOTE),
        ("real_literal", CSharp::RealLiteral),
        ("{", CSharp::LBRACE),
        ("alias", CSharp::Alias),
        ("\\\\\'", CSharp::BSLASHSQUOTE),
        ("long", CSharp::Long),
        ("interface_property_declaration_repeat1", CSharp::InterfacePropertyDeclarationRepeat1),
        ("/[^\\\"\\\\\\\\\\\\n]/", CSharp::SLASHLBRACKCARETDQUOTEBSLASHBSLASHBSLASHnRBRACKSLASH),
        ("using_statement", CSharp::UsingStatement),
        ("true", CSharp::True),
        ("END", CSharp::END),
        (">=", CSharp::GTEQ),
        ("ulong", CSharp::Ulong),
        ("variable_assignment_statement", CSharp::VariableAssignmentStatement),
        ("/[^\']/", CSharp::SLASHLBRACKCARETSQUOTERBRACKSLASH),
        ("*", CSharp::STAR),
        ("_hexadecimal_escape_sequence", CSharp::HexadecimalEscapeSequence),
        ("_declaration_statement", CSharp::DeclarationStatement),
        ("variable_declaration", CSharp::VariableDeclaration),
        ("_accessor_declarations", CSharp::AccessorDeclarations),
        ("\\\\\\\"", CSharp::BSLASHDQUOTE),
        ("_statement", CSharp::Statement),
        ("global", CSharp::Global),
        ("yield", CSharp::Yield),
        ("|", CSharp::PIPE),
        ("]", CSharp::RBRACK),
        ("interface_method_declaration", CSharp::InterfaceMethodDeclaration),
        ("switch", CSharp::Switch),
        ("variable_declaration_repeat1", CSharp::VariableDeclarationRepeat1),
        ("if", CSharp::If),
        ("rank_specifier_repeat1", CSharp::RankSpecifierRepeat1),
        ("empty_statement", CSharp::EmptyStatement),
        ("_integral_type", CSharp::IntegralType),
        ("catch_clause", CSharp::CatchClause),
        ("indexer_declaration", CSharp::IndexerDeclaration),
        ("ref", CSharp::Ref),
        ("constructor_declaration", CSharp::ConstructorDeclaration),
        ("class", CSharp::Class),
        ("name_equals", CSharp::NameEquals),
        ("default_argument", CSharp::DefaultArgument),
        ("-", CSharp::DASH),
        ("bool", CSharp::Bool),
        ("_type", CSharp::Type),
        ("alias_qualified_name", CSharp::AliasQualifiedName),
        ("implicit", CSharp::Implicit),
        ("class_declaration", CSharp::ClassDeclaration),
        ("_unicode_escape_sequence", CSharp::UnicodeEscapeSequence),
        ("_expression", CSharp::Expression),
        ("object", CSharp::Object),
        ("when", CSharp::When),
        ("variable_initializer", CSharp::VariableInitializer),
        ("_iteration_statement", CSharp::IterationStatement),
        ("catch", CSharp::Catch),
        ("\\\\t", CSharp::BSLASHt),
        ("ushort", CSharp::Ushort),
        ("interface_declaration", CSharp::InterfaceDeclaration),
        ("overloadable_binary_operator", CSharp::OverloadableBinaryOperator),
        ("method_declaration", CSharp::MethodDeclaration),
        ("parameter_list", CSharp::ParameterList),
        ("set_accessor_declaration", CSharp::SetAccessorDeclaration),
        ("params", CSharp::Params),
        ("_type_declaration", CSharp::TypeDeclaration),
        ("&&", CSharp::AMPAMP),
        ("switch_label", CSharp::SwitchLabel),
        ("enum_member_declaration", CSharp::EnumMemberDeclaration),
        ("\\\\r", CSharp::BSLASHr),
        ("struct_declaration", CSharp::StructDeclaration),
        ("unchecked_statement", CSharp::UncheckedStatement),
        ("\\\\\\\\", CSharp::BSLASHBSLASH),
        ("unsafe", CSharp::Unsafe),
        ("\\\\b", CSharp::BSLASHb),
        ("parameter_array", CSharp::ParameterArray),
    ]),
};

impl From<&str> for CSharp {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for CSharp {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x) }
    }
}

// CSharp == u16
impl PartialEq<u16> for CSharp {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == CSharp::from(*x)
    }
}

// u16 == CSharp
impl PartialEq<CSharp> for u16 {
    #[inline(always)]
    fn eq(&self, x: &CSharp) -> bool {
        *x == *self
    }
}
