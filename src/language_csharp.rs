// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum CSharp {
    End = 0,
    IdentifierName = 1,
    BOM = 2,
    Extern = 3,
    Alias = 4,
    SEMI = 5,
    Using = 6,
    Static = 7,
    EQ = 8,
    Global = 9,
    COLONCOLON = 10,
    LT = 11,
    COMMA = 12,
    GT = 13,
    DOT = 14,
    LBRACK = 15,
    RBRACK = 16,
    LPAREN = 17,
    RPAREN = 18,
    Assembly = 19,
    Module = 20,
    COLON = 21,
    Event = 22,
    Abstract = 23,
    Async = 24,
    Const = 25,
    Fixed = 26,
    Internal = 27,
    New = 28,
    Override = 29,
    Partial = 30,
    Private = 31,
    Protected = 32,
    Public = 33,
    Readonly = 34,
    Ref = 35,
    Sealed = 36,
    Unsafe = 37,
    Virtual = 38,
    Volatile = 39,
    Out = 40,
    In = 41,
    This = 42,
    Params = 43,
    Base = 44,
    LBRACE = 45,
    RBRACE = 46,
    EQGT = 47,
    Implicit = 48,
    Explicit = 49,
    Operator = 50,
    TILDE = 51,
    Where = 52,
    Class = 53,
    Struct = 54,
    BANG = 55,
    PLUSPLUS = 56,
    DASHDASH = 57,
    True = 58,
    False = 59,
    PLUS = 60,
    DASH = 61,
    STAR = 62,
    SLASH = 63,
    PERCENT = 64,
    CARET = 65,
    PIPE = 66,
    AMP = 67,
    LTLT = 68,
    GTGT = 69,
    EQEQ = 70,
    BANGEQ = 71,
    GTEQ = 72,
    LTEQ = 73,
    Get = 74,
    Set = 75,
    Add = 76,
    Remove = 77,
    Enum = 78,
    Interface = 79,
    Delegate = 80,
    Namespace = 81,
    QMARK = 82,
    Bool = 83,
    Byte = 84,
    Char = 85,
    Decimal = 86,
    Double = 87,
    Float = 88,
    Int = 89,
    Long = 90,
    Object = 91,
    Sbyte = 92,
    Short = 93,
    String = 94,
    Uint = 95,
    Ulong = 96,
    Ushort = 97,
    Break = 98,
    Checked = 99,
    Unchecked = 100,
    Continue = 101,
    Do = 102,
    While = 103,
    For = 104,
    Await = 105,
    Foreach = 106,
    Goto = 107,
    Case = 108,
    Default = 109,
    If = 110,
    Else = 111,
    Lock = 112,
    Return = 113,
    Switch = 114,
    UNDERSCORE = 115,
    Var = 116,
    When = 117,
    Throw = 118,
    Try = 119,
    Catch = 120,
    Finally = 121,
    Yield = 122,
    PLUSEQ = 123,
    DASHEQ = 124,
    STAREQ = 125,
    SLASHEQ = 126,
    PERCENTEQ = 127,
    AMPEQ = 128,
    CARETEQ = 129,
    PIPEEQ = 130,
    LTLTEQ = 131,
    GTGTEQ = 132,
    HASH = 133,
    AMPAMP = 134,
    PIPEPIPE = 135,
    Typeof = 136,
    Sizeof = 137,
    SQUOTE = 138,
    CharacterLiteralToken1 = 139,
    EscapeSequence = 140,
    IntegerLiteralToken1 = 141,
    IntegerLiteralToken2 = 142,
    IntegerTypeSuffix = 143,
    NullLiteral = 144,
    RealLiteral = 145,
    DQUOTE = 146,
    StringLiteralToken1 = 147,
    ATDQUOTE = 148,
    VerbatimStringLiteralToken1 = 149,
    Comment = 150,
    VoidKeyword = 151,
    PreprocessorDirective = 152,
    CompilationUnit = 153,
    ExternAliasDirective = 154,
    Declaration = 155,
    UsingDirective = 156,
    NameEquals = 157,
    IdentifierOrGlobal = 158,
    Name = 159,
    AliasQualifiedName = 160,
    SimpleName = 161,
    GenericName = 162,
    TypeArgumentList = 163,
    QualifiedName = 164,
    AttributeList = 165,
    Attribute = 166,
    AttributeArgumentList = 167,
    AttributeArgument = 168,
    GlobalAttributeList = 169,
    NameColon = 170,
    MemberDeclaration = 171,
    BaseFieldDeclaration = 172,
    EventFieldDeclaration = 173,
    Modifier = 174,
    VariableDeclaration = 175,
    VariableDeclarator = 176,
    BracketedArgumentList = 177,
    Argument = 178,
    EqualsValueClause = 179,
    FieldDeclaration = 180,
    BaseMethodDeclaration = 181,
    ConstructorDeclaration = 182,
    ParameterList = 183,
    FormalParameterList = 184,
    Parameter = 185,
    ParameterModifier = 186,
    ParameterArray = 187,
    ConstructorInitializer = 188,
    ArgumentList = 189,
    Block = 190,
    ArrowExpressionClause = 191,
    ConversionOperatorDeclaration = 192,
    FunctionBody = 193,
    DestructorDeclaration = 194,
    MethodDeclaration = 195,
    ExplicitInterfaceSpecifier = 196,
    TypeParameterList = 197,
    TypeParameterConstraintsClause = 198,
    TypeParameterConstraint = 199,
    ClassOrStructConstraint = 200,
    ConstructorConstraint = 201,
    TypeConstraint = 202,
    OperatorDeclaration = 203,
    OverloadableOperator = 204,
    BasePropertyDeclaration = 205,
    EventDeclaration = 206,
    AccessorList = 207,
    AccessorDeclaration = 208,
    IndexerDeclaration = 209,
    BracketedParameterList = 210,
    PropertyDeclaration = 211,
    BaseTypeDeclaration = 212,
    EnumDeclaration = 213,
    BaseList = 214,
    BaseType = 215,
    EnumMemberDeclaration = 216,
    TypeDeclaration = 217,
    ClassDeclaration = 218,
    ClassBody = 219,
    InterfaceDeclaration = 220,
    StructDeclaration = 221,
    DelegateDeclaration = 222,
    NamespaceDeclaration = 223,
    Type = 224,
    ArrayType = 225,
    ArrayRankSpecifier = 226,
    NullableType = 227,
    PointerType = 228,
    PredefinedType = 229,
    Statement = 230,
    BreakStatement = 231,
    CheckedStatement = 232,
    ContinueStatement = 233,
    DoStatement = 234,
    EmptyStatement = 235,
    ExpressionStatement = 236,
    FixedStatement = 237,
    ForStatement = 238,
    ForEachStatement = 239,
    GotoStatement = 240,
    IfStatement = 241,
    ElseClause = 242,
    LabeledStatement = 243,
    LocalDeclarationStatement = 244,
    LocalFunctionStatement = 245,
    LockStatement = 246,
    ReturnStatement = 247,
    SwitchStatement = 248,
    SwitchSection = 249,
    SwitchLabel = 250,
    CasePatternSwitchLabel = 251,
    Pattern = 252,
    DeclarationPattern = 253,
    VariableDesignation = 254,
    DiscardDesignation = 255,
    ParenthesizedVariableDesignation = 256,
    SingleVariableDesignation = 257,
    DiscardPattern = 258,
    VarPattern = 259,
    WhenClause = 260,
    CaseSwitchLabel = 261,
    DefaultSwitchLabel = 262,
    ThrowStatement = 263,
    TryStatement = 264,
    CatchClause = 265,
    CatchDeclaration = 266,
    CatchFilterClause = 267,
    FinallyClause = 268,
    UnsafeStatement = 269,
    UsingStatement = 270,
    WhileStatement = 271,
    YieldStatement = 272,
    Expression = 273,
    Initializer = 274,
    ArrayInitalizer = 275,
    ElementAccessExpression = 276,
    AssignmentExpression = 277,
    AssignmentOperator = 278,
    ParenthesizedExpression = 279,
    TernaryExpression = 280,
    BinaryExpression = 281,
    UnaryExpression = 282,
    PostfixExpression = 283,
    CallExpression = 284,
    ObjectCreationExpression = 285,
    Literal = 286,
    BooleanLiteral = 287,
    CharacterLiteral = 288,
    IntegerLiteral = 289,
    StringLiteral = 290,
    VerbatimStringLiteral = 291,
    CompilationUnitRepeat1 = 292,
    TypeArgumentListRepeat1 = 293,
    AttributeListRepeat1 = 294,
    AttributeArgumentListRepeat1 = 295,
    EventFieldDeclarationRepeat1 = 296,
    EventFieldDeclarationRepeat2 = 297,
    VariableDeclarationRepeat1 = 298,
    BracketedArgumentListRepeat1 = 299,
    FormalParameterListRepeat1 = 300,
    ArgumentListRepeat1 = 301,
    BlockRepeat1 = 302,
    MethodDeclarationRepeat1 = 303,
    TypeParameterListRepeat1 = 304,
    TypeParameterConstraintsClauseRepeat1 = 305,
    AccessorListRepeat1 = 306,
    BracketedParameterListRepeat1 = 307,
    EnumDeclarationRepeat1 = 308,
    BaseListRepeat1 = 309,
    ClassBodyRepeat1 = 310,
    NamespaceDeclarationRepeat1 = 311,
    NamespaceDeclarationRepeat2 = 312,
    SwitchStatementRepeat1 = 313,
    SwitchSectionRepeat1 = 314,
    ParenthesizedVariableDesignationRepeat1 = 315,
    TryStatementRepeat1 = 316,
    ArrayInitalizerRepeat1 = 317,
    StringLiteralRepeat1 = 318,
    LabelName = 319,
    Error = 320,
}

impl Into<&'static str> for CSharp {
    fn into(self) -> &'static str {
        match self {
            CSharp::End => "end",
            CSharp::IdentifierName => "identifier_name",
            CSharp::BOM => "ï»¿",
            CSharp::Extern => "extern",
            CSharp::Alias => "alias",
            CSharp::SEMI => ";",
            CSharp::Using => "using",
            CSharp::Static => "static",
            CSharp::EQ => "=",
            CSharp::Global => "global",
            CSharp::COLONCOLON => "::",
            CSharp::LT => "<",
            CSharp::COMMA => ",",
            CSharp::GT => ">",
            CSharp::DOT => ".",
            CSharp::LBRACK => "[",
            CSharp::RBRACK => "]",
            CSharp::LPAREN => "(",
            CSharp::RPAREN => ")",
            CSharp::Assembly => "assembly",
            CSharp::Module => "module",
            CSharp::COLON => ":",
            CSharp::Event => "event",
            CSharp::Abstract => "abstract",
            CSharp::Async => "async",
            CSharp::Const => "const",
            CSharp::Fixed => "fixed",
            CSharp::Internal => "internal",
            CSharp::New => "new",
            CSharp::Override => "override",
            CSharp::Partial => "partial",
            CSharp::Private => "private",
            CSharp::Protected => "protected",
            CSharp::Public => "public",
            CSharp::Readonly => "readonly",
            CSharp::Ref => "ref",
            CSharp::Sealed => "sealed",
            CSharp::Unsafe => "unsafe",
            CSharp::Virtual => "virtual",
            CSharp::Volatile => "volatile",
            CSharp::Out => "out",
            CSharp::In => "in",
            CSharp::This => "this",
            CSharp::Params => "params",
            CSharp::Base => "base",
            CSharp::LBRACE => "{",
            CSharp::RBRACE => "}",
            CSharp::EQGT => "=>",
            CSharp::Implicit => "implicit",
            CSharp::Explicit => "explicit",
            CSharp::Operator => "operator",
            CSharp::TILDE => "~",
            CSharp::Where => "where",
            CSharp::Class => "class",
            CSharp::Struct => "struct",
            CSharp::BANG => "!",
            CSharp::PLUSPLUS => "++",
            CSharp::DASHDASH => "--",
            CSharp::True => "true",
            CSharp::False => "false",
            CSharp::PLUS => "+",
            CSharp::DASH => "-",
            CSharp::STAR => "*",
            CSharp::SLASH => "/",
            CSharp::PERCENT => "%",
            CSharp::CARET => "^",
            CSharp::PIPE => "|",
            CSharp::AMP => "&",
            CSharp::LTLT => "<<",
            CSharp::GTGT => ">>",
            CSharp::EQEQ => "==",
            CSharp::BANGEQ => "!=",
            CSharp::GTEQ => ">=",
            CSharp::LTEQ => "<=",
            CSharp::Get => "get",
            CSharp::Set => "set",
            CSharp::Add => "add",
            CSharp::Remove => "remove",
            CSharp::Enum => "enum",
            CSharp::Interface => "interface",
            CSharp::Delegate => "delegate",
            CSharp::Namespace => "namespace",
            CSharp::QMARK => "?",
            CSharp::Bool => "bool",
            CSharp::Byte => "byte",
            CSharp::Char => "char",
            CSharp::Decimal => "decimal",
            CSharp::Double => "double",
            CSharp::Float => "float",
            CSharp::Int => "int",
            CSharp::Long => "long",
            CSharp::Object => "object",
            CSharp::Sbyte => "sbyte",
            CSharp::Short => "short",
            CSharp::String => "string",
            CSharp::Uint => "uint",
            CSharp::Ulong => "ulong",
            CSharp::Ushort => "ushort",
            CSharp::Break => "break",
            CSharp::Checked => "checked",
            CSharp::Unchecked => "unchecked",
            CSharp::Continue => "continue",
            CSharp::Do => "do",
            CSharp::While => "while",
            CSharp::For => "for",
            CSharp::Await => "await",
            CSharp::Foreach => "foreach",
            CSharp::Goto => "goto",
            CSharp::Case => "case",
            CSharp::Default => "default",
            CSharp::If => "if",
            CSharp::Else => "else",
            CSharp::Lock => "lock",
            CSharp::Return => "return",
            CSharp::Switch => "switch",
            CSharp::UNDERSCORE => "_",
            CSharp::Var => "var",
            CSharp::When => "when",
            CSharp::Throw => "throw",
            CSharp::Try => "try",
            CSharp::Catch => "catch",
            CSharp::Finally => "finally",
            CSharp::Yield => "yield",
            CSharp::PLUSEQ => "+=",
            CSharp::DASHEQ => "-=",
            CSharp::STAREQ => "*=",
            CSharp::SLASHEQ => "/=",
            CSharp::PERCENTEQ => "%=",
            CSharp::AMPEQ => "&=",
            CSharp::CARETEQ => "^=",
            CSharp::PIPEEQ => "|=",
            CSharp::LTLTEQ => "<<=",
            CSharp::GTGTEQ => ">>=",
            CSharp::HASH => "#",
            CSharp::AMPAMP => "&&",
            CSharp::PIPEPIPE => "||",
            CSharp::Typeof => "typeof",
            CSharp::Sizeof => "sizeof",
            CSharp::SQUOTE => "'",
            CSharp::CharacterLiteralToken1 => "character_literal_token1",
            CSharp::EscapeSequence => "escape_sequence",
            CSharp::IntegerLiteralToken1 => "integer_literal_token1",
            CSharp::IntegerLiteralToken2 => "integer_literal_token2",
            CSharp::IntegerTypeSuffix => "_integer_type_suffix",
            CSharp::NullLiteral => "null_literal",
            CSharp::RealLiteral => "real_literal",
            CSharp::DQUOTE => "\"",
            CSharp::StringLiteralToken1 => "string_literal_token1",
            CSharp::ATDQUOTE => "@\"",
            CSharp::VerbatimStringLiteralToken1 => "verbatim_string_literal_token1",
            CSharp::Comment => "comment",
            CSharp::VoidKeyword => "void_keyword",
            CSharp::PreprocessorDirective => "preprocessor_directive",
            CSharp::CompilationUnit => "compilation_unit",
            CSharp::ExternAliasDirective => "extern_alias_directive",
            CSharp::Declaration => "_declaration",
            CSharp::UsingDirective => "using_directive",
            CSharp::NameEquals => "name_equals",
            CSharp::IdentifierOrGlobal => "_identifier_or_global",
            CSharp::Name => "_name",
            CSharp::AliasQualifiedName => "alias_qualified_name",
            CSharp::SimpleName => "_simple_name",
            CSharp::GenericName => "generic_name",
            CSharp::TypeArgumentList => "type_argument_list",
            CSharp::QualifiedName => "qualified_name",
            CSharp::AttributeList => "attribute_list",
            CSharp::Attribute => "attribute",
            CSharp::AttributeArgumentList => "attribute_argument_list",
            CSharp::AttributeArgument => "attribute_argument",
            CSharp::GlobalAttributeList => "global_attribute_list",
            CSharp::NameColon => "name_colon",
            CSharp::MemberDeclaration => "_member_declaration",
            CSharp::BaseFieldDeclaration => "_base_field_declaration",
            CSharp::EventFieldDeclaration => "event_field_declaration",
            CSharp::Modifier => "modifier",
            CSharp::VariableDeclaration => "variable_declaration",
            CSharp::VariableDeclarator => "variable_declarator",
            CSharp::BracketedArgumentList => "bracketed_argument_list",
            CSharp::Argument => "argument",
            CSharp::EqualsValueClause => "equals_value_clause",
            CSharp::FieldDeclaration => "field_declaration",
            CSharp::BaseMethodDeclaration => "_base_method_declaration",
            CSharp::ConstructorDeclaration => "constructor_declaration",
            CSharp::ParameterList => "parameter_list",
            CSharp::FormalParameterList => "_formal_parameter_list",
            CSharp::Parameter => "parameter",
            CSharp::ParameterModifier => "parameter_modifier",
            CSharp::ParameterArray => "parameter_array",
            CSharp::ConstructorInitializer => "constructor_initializer",
            CSharp::ArgumentList => "argument_list",
            CSharp::Block => "block",
            CSharp::ArrowExpressionClause => "arrow_expression_clause",
            CSharp::ConversionOperatorDeclaration => "conversion_operator_declaration",
            CSharp::FunctionBody => "_function_body",
            CSharp::DestructorDeclaration => "destructor_declaration",
            CSharp::MethodDeclaration => "method_declaration",
            CSharp::ExplicitInterfaceSpecifier => "explicit_interface_specifier",
            CSharp::TypeParameterList => "type_parameter_list",
            CSharp::TypeParameterConstraintsClause => "type_parameter_constraints_clause",
            CSharp::TypeParameterConstraint => "type_parameter_constraint",
            CSharp::ClassOrStructConstraint => "_class_or_struct_constraint",
            CSharp::ConstructorConstraint => "constructor_constraint",
            CSharp::TypeConstraint => "type_constraint",
            CSharp::OperatorDeclaration => "operator_declaration",
            CSharp::OverloadableOperator => "_overloadable_operator",
            CSharp::BasePropertyDeclaration => "_base_property_declaration",
            CSharp::EventDeclaration => "event_declaration",
            CSharp::AccessorList => "_accessor_list",
            CSharp::AccessorDeclaration => "accessor_declaration",
            CSharp::IndexerDeclaration => "indexer_declaration",
            CSharp::BracketedParameterList => "bracketed_parameter_list",
            CSharp::PropertyDeclaration => "property_declaration",
            CSharp::BaseTypeDeclaration => "_base_type_declaration",
            CSharp::EnumDeclaration => "enum_declaration",
            CSharp::BaseList => "base_list",
            CSharp::BaseType => "_base_type",
            CSharp::EnumMemberDeclaration => "enum_member_declaration",
            CSharp::TypeDeclaration => "_type_declaration",
            CSharp::ClassDeclaration => "class_declaration",
            CSharp::ClassBody => "class_body",
            CSharp::InterfaceDeclaration => "interface_declaration",
            CSharp::StructDeclaration => "struct_declaration",
            CSharp::DelegateDeclaration => "delegate_declaration",
            CSharp::NamespaceDeclaration => "namespace_declaration",
            CSharp::Type => "_type",
            CSharp::ArrayType => "array_type",
            CSharp::ArrayRankSpecifier => "array_rank_specifier",
            CSharp::NullableType => "nullable_type",
            CSharp::PointerType => "pointer_type",
            CSharp::PredefinedType => "predefined_type",
            CSharp::Statement => "_statement",
            CSharp::BreakStatement => "break_statement",
            CSharp::CheckedStatement => "checked_statement",
            CSharp::ContinueStatement => "continue_statement",
            CSharp::DoStatement => "do_statement",
            CSharp::EmptyStatement => "empty_statement",
            CSharp::ExpressionStatement => "expression_statement",
            CSharp::FixedStatement => "fixed_statement",
            CSharp::ForStatement => "for_statement",
            CSharp::ForEachStatement => "for_each_statement",
            CSharp::GotoStatement => "goto_statement",
            CSharp::IfStatement => "if_statement",
            CSharp::ElseClause => "else_clause",
            CSharp::LabeledStatement => "labeled_statement",
            CSharp::LocalDeclarationStatement => "local_declaration_statement",
            CSharp::LocalFunctionStatement => "local_function_statement",
            CSharp::LockStatement => "lock_statement",
            CSharp::ReturnStatement => "return_statement",
            CSharp::SwitchStatement => "switch_statement",
            CSharp::SwitchSection => "switch_section",
            CSharp::SwitchLabel => "_switch_label",
            CSharp::CasePatternSwitchLabel => "case_pattern_switch_label",
            CSharp::Pattern => "_pattern",
            CSharp::DeclarationPattern => "declaration_pattern",
            CSharp::VariableDesignation => "_variable_designation",
            CSharp::DiscardDesignation => "discard_designation",
            CSharp::ParenthesizedVariableDesignation => "parenthesized_variable_designation",
            CSharp::SingleVariableDesignation => "single_variable_designation",
            CSharp::DiscardPattern => "discard_pattern",
            CSharp::VarPattern => "var_pattern",
            CSharp::WhenClause => "when_clause",
            CSharp::CaseSwitchLabel => "case_switch_label",
            CSharp::DefaultSwitchLabel => "default_switch_label",
            CSharp::ThrowStatement => "throw_statement",
            CSharp::TryStatement => "try_statement",
            CSharp::CatchClause => "catch_clause",
            CSharp::CatchDeclaration => "catch_declaration",
            CSharp::CatchFilterClause => "catch_filter_clause",
            CSharp::FinallyClause => "finally_clause",
            CSharp::UnsafeStatement => "unsafe_statement",
            CSharp::UsingStatement => "using_statement",
            CSharp::WhileStatement => "while_statement",
            CSharp::YieldStatement => "yield_statement",
            CSharp::Expression => "_expression",
            CSharp::Initializer => "_initializer",
            CSharp::ArrayInitalizer => "array_initalizer",
            CSharp::ElementAccessExpression => "element_access_expression",
            CSharp::AssignmentExpression => "assignment_expression",
            CSharp::AssignmentOperator => "assignment_operator",
            CSharp::ParenthesizedExpression => "parenthesized_expression",
            CSharp::TernaryExpression => "ternary_expression",
            CSharp::BinaryExpression => "binary_expression",
            CSharp::UnaryExpression => "unary_expression",
            CSharp::PostfixExpression => "postfix_expression",
            CSharp::CallExpression => "call_expression",
            CSharp::ObjectCreationExpression => "object_creation_expression",
            CSharp::Literal => "_literal",
            CSharp::BooleanLiteral => "boolean_literal",
            CSharp::CharacterLiteral => "character_literal",
            CSharp::IntegerLiteral => "integer_literal",
            CSharp::StringLiteral => "string_literal",
            CSharp::VerbatimStringLiteral => "verbatim_string_literal",
            CSharp::CompilationUnitRepeat1 => "compilation_unit_repeat1",
            CSharp::TypeArgumentListRepeat1 => "type_argument_list_repeat1",
            CSharp::AttributeListRepeat1 => "attribute_list_repeat1",
            CSharp::AttributeArgumentListRepeat1 => "attribute_argument_list_repeat1",
            CSharp::EventFieldDeclarationRepeat1 => "event_field_declaration_repeat1",
            CSharp::EventFieldDeclarationRepeat2 => "event_field_declaration_repeat2",
            CSharp::VariableDeclarationRepeat1 => "variable_declaration_repeat1",
            CSharp::BracketedArgumentListRepeat1 => "bracketed_argument_list_repeat1",
            CSharp::FormalParameterListRepeat1 => "_formal_parameter_list_repeat1",
            CSharp::ArgumentListRepeat1 => "argument_list_repeat1",
            CSharp::BlockRepeat1 => "block_repeat1",
            CSharp::MethodDeclarationRepeat1 => "method_declaration_repeat1",
            CSharp::TypeParameterListRepeat1 => "type_parameter_list_repeat1",
            CSharp::TypeParameterConstraintsClauseRepeat1 => {
                "type_parameter_constraints_clause_repeat1"
            }
            CSharp::AccessorListRepeat1 => "_accessor_list_repeat1",
            CSharp::BracketedParameterListRepeat1 => "bracketed_parameter_list_repeat1",
            CSharp::EnumDeclarationRepeat1 => "enum_declaration_repeat1",
            CSharp::BaseListRepeat1 => "base_list_repeat1",
            CSharp::ClassBodyRepeat1 => "class_body_repeat1",
            CSharp::NamespaceDeclarationRepeat1 => "namespace_declaration_repeat1",
            CSharp::NamespaceDeclarationRepeat2 => "namespace_declaration_repeat2",
            CSharp::SwitchStatementRepeat1 => "switch_statement_repeat1",
            CSharp::SwitchSectionRepeat1 => "switch_section_repeat1",
            CSharp::ParenthesizedVariableDesignationRepeat1 => {
                "parenthesized_variable_designation_repeat1"
            }
            CSharp::TryStatementRepeat1 => "try_statement_repeat1",
            CSharp::ArrayInitalizerRepeat1 => "array_initalizer_repeat1",
            CSharp::StringLiteralRepeat1 => "string_literal_repeat1",
            CSharp::LabelName => "label_name",
            CSharp::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, CSharp> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 215),
        (0, 1),
        (0, 1),
        (0, 6),
        (0, 27),
        (0, 3),
        (2, 55),
        (0, 151),
        (0, 42),
        (0, 82),
        (0, 3),
        (0, 42),
        (0, 28),
        (0, 1),
        (0, 68),
        (1, 137),
        (0, 9),
        (3, 152),
        (3, 4),
        (5, 198),
        (0, 130),
        (0, 135),
        (5, 86),
        (0, 39),
        (0, 100),
        (1, 10),
        (1, 198),
        (0, 12),
        (5, 319),
        (0, 0),
        (0, 133),
        (0, 38),
        (0, 66),
        (0, 121),
        (7, 300),
        (0, 129),
        (0, 110),
        (0, 134),
        (0, 105),
        (0, 5),
        (0, 243),
        (0, 7),
        (0, 0),
        (0, 0),
        (2, 13),
        (3, 184),
        (0, 0),
        (12, 253),
        (1, 10),
        (2, 9),
        (0, 28),
        (0, 0),
        (1, 0),
        (0, 180),
        (0, 262),
        (0, 211),
        (7, 213),
        (0, 181),
        (0, 122),
        (2, 104),
        (0, 3),
        (0, 73),
        (23, 310),
        (1, 6),
        (0, 15),
    ]),
    entries: ::phf::Slice::Static(&[
        ("array_initalizer", CSharp::ArrayInitalizer),
        (
            "type_argument_list_repeat1",
            CSharp::TypeArgumentListRepeat1,
        ),
        ("ï»¿", CSharp::BOM),
        ("_initializer", CSharp::Initializer),
        (
            "type_parameter_constraints_clause_repeat1",
            CSharp::TypeParameterConstraintsClauseRepeat1,
        ),
        ("\'", CSharp::SQUOTE),
        ("_simple_name", CSharp::SimpleName),
        ("ternary_expression", CSharp::TernaryExpression),
        ("attribute_list_repeat1", CSharp::AttributeListRepeat1),
        ("element_access_expression", CSharp::ElementAccessExpression),
        ("compilation_unit_repeat1", CSharp::CompilationUnitRepeat1),
        ("argument", CSharp::Argument),
        ("compilation_unit", CSharp::CompilationUnit),
        ("*=", CSharp::STAREQ),
        ("constructor_initializer", CSharp::ConstructorInitializer),
        (".", CSharp::DOT),
        ("break_statement", CSharp::BreakStatement),
        ("readonly", CSharp::Readonly),
        ("accessor_declaration", CSharp::AccessorDeclaration),
        ("call_expression", CSharp::CallExpression),
        ("continue", CSharp::Continue),
        ("character_literal", CSharp::CharacterLiteral),
        ("sealed", CSharp::Sealed),
        ("long", CSharp::Long),
        ("&", CSharp::AMP),
        ("params", CSharp::Params),
        (
            "verbatim_string_literal_token1",
            CSharp::VerbatimStringLiteralToken1,
        ),
        ("catch", CSharp::Catch),
        ("integer_literal", CSharp::IntegerLiteral),
        ("while", CSharp::While),
        ("event_declaration", CSharp::EventDeclaration),
        ("property_declaration", CSharp::PropertyDeclaration),
        ("array_initalizer_repeat1", CSharp::ArrayInitalizerRepeat1),
        ("var_pattern", CSharp::VarPattern),
        ("public", CSharp::Public),
        ("for_each_statement", CSharp::ForEachStatement),
        ("break", CSharp::Break),
        ("::", CSharp::COLONCOLON),
        ("?", CSharp::QMARK),
        ("implicit", CSharp::Implicit),
        ("qualified_name", CSharp::QualifiedName),
        ("attribute_list", CSharp::AttributeList),
        ("virtual", CSharp::Virtual),
        ("_declaration", CSharp::Declaration),
        ("try", CSharp::Try),
        ("partial", CSharp::Partial),
        ("volatile", CSharp::Volatile),
        ("remove", CSharp::Remove),
        ("char", CSharp::Char),
        ("<=", CSharp::LTEQ),
        ("equals_value_clause", CSharp::EqualsValueClause),
        ("default", CSharp::Default),
        ("int", CSharp::Int),
        ("variable_declarator", CSharp::VariableDeclarator),
        (
            "variable_declaration_repeat1",
            CSharp::VariableDeclarationRepeat1,
        ),
        ("namespace", CSharp::Namespace),
        ("return", CSharp::Return),
        ("true", CSharp::True),
        ("--", CSharp::DASHDASH),
        (">>", CSharp::GTGT),
        ("switch_section", CSharp::SwitchSection),
        ("float", CSharp::Float),
        ("arrow_expression_clause", CSharp::ArrowExpressionClause),
        ("|=", CSharp::PIPEEQ),
        ("constructor_constraint", CSharp::ConstructorConstraint),
        ("enum_member_declaration", CSharp::EnumMemberDeclaration),
        ("<", CSharp::LT),
        (",", CSharp::COMMA),
        ("+=", CSharp::PLUSEQ),
        ("type_constraint", CSharp::TypeConstraint),
        ("using", CSharp::Using),
        ("using_statement", CSharp::UsingStatement),
        ("^", CSharp::CARET),
        ("constructor_declaration", CSharp::ConstructorDeclaration),
        ("catch_declaration", CSharp::CatchDeclaration),
        ("in", CSharp::In),
        ("namespace_declaration", CSharp::NamespaceDeclaration),
        ("modifier", CSharp::Modifier),
        ("array_type", CSharp::ArrayType),
        (")", CSharp::RPAREN),
        ("verbatim_string_literal", CSharp::VerbatimStringLiteral),
        ("fixed", CSharp::Fixed),
        (
            "_base_property_declaration",
            CSharp::BasePropertyDeclaration,
        ),
        ("set", CSharp::Set),
        ("goto", CSharp::Goto),
        ("_name", CSharp::Name),
        ("class_body", CSharp::ClassBody),
        (
            "method_declaration_repeat1",
            CSharp::MethodDeclarationRepeat1,
        ),
        ("variable_declaration", CSharp::VariableDeclaration),
        ("where", CSharp::Where),
        ("@\\\"", CSharp::ATDQUOTE),
        ("class_declaration", CSharp::ClassDeclaration),
        ("method_declaration", CSharp::MethodDeclaration),
        ("module", CSharp::Module),
        ("lock", CSharp::Lock),
        ("_type_declaration", CSharp::TypeDeclaration),
        ("*", CSharp::STAR),
        ("delegate", CSharp::Delegate),
        ("throw", CSharp::Throw),
        ("end", CSharp::End),
        ("switch_section_repeat1", CSharp::SwitchSectionRepeat1),
        (
            "explicit_interface_specifier",
            CSharp::ExplicitInterfaceSpecifier,
        ),
        ("_integer_type_suffix", CSharp::IntegerTypeSuffix),
        ("==", CSharp::EQEQ),
        ("integer_literal_token2", CSharp::IntegerLiteralToken2),
        ("static", CSharp::Static),
        ("unsafe_statement", CSharp::UnsafeStatement),
        ("override", CSharp::Override),
        ("interface", CSharp::Interface),
        ("get", CSharp::Get),
        ("attribute", CSharp::Attribute),
        (
            "bracketed_argument_list_repeat1",
            CSharp::BracketedArgumentListRepeat1,
        ),
        ("null_literal", CSharp::NullLiteral),
        ("]", CSharp::RBRACK),
        ("boolean_literal", CSharp::BooleanLiteral),
        ("yield_statement", CSharp::YieldStatement),
        ("abstract", CSharp::Abstract),
        ("comment", CSharp::Comment),
        ("<<", CSharp::LTLT),
        ("_accessor_list_repeat1", CSharp::AccessorListRepeat1),
        ("yield", CSharp::Yield),
        ("return_statement", CSharp::ReturnStatement),
        ("_accessor_list", CSharp::AccessorList),
        ("bool", CSharp::Bool),
        ("while_statement", CSharp::WhileStatement),
        ("_", CSharp::UNDERSCORE),
        ("\\\"", CSharp::DQUOTE),
        (":", CSharp::COLON),
        ("!", CSharp::BANG),
        ("parameter_modifier", CSharp::ParameterModifier),
        ("string", CSharp::String),
        ("interface_declaration", CSharp::InterfaceDeclaration),
        ("checked_statement", CSharp::CheckedStatement),
        ("case_pattern_switch_label", CSharp::CasePatternSwitchLabel),
        ("name_colon", CSharp::NameColon),
        ("bracketed_parameter_list", CSharp::BracketedParameterList),
        ("extern", CSharp::Extern),
        ("<<=", CSharp::LTLTEQ),
        ("event_field_declaration", CSharp::EventFieldDeclaration),
        ("binary_expression", CSharp::BinaryExpression),
        ("=>", CSharp::EQGT),
        ("alias_qualified_name", CSharp::AliasQualifiedName),
        ("byte", CSharp::Byte),
        ("label_name", CSharp::LabelName),
        ("string_literal_repeat1", CSharp::StringLiteralRepeat1),
        ("extern_alias_directive", CSharp::ExternAliasDirective),
        ("%", CSharp::PERCENT),
        ("_function_body", CSharp::FunctionBody),
        ("ushort", CSharp::Ushort),
        (
            "bracketed_parameter_list_repeat1",
            CSharp::BracketedParameterListRepeat1,
        ),
        ("_base_method_declaration", CSharp::BaseMethodDeclaration),
        ("escape_sequence", CSharp::EscapeSequence),
        ("bracketed_argument_list", CSharp::BracketedArgumentList),
        ("add", CSharp::Add),
        ("do", CSharp::Do),
        (
            "parenthesized_variable_designation",
            CSharp::ParenthesizedVariableDesignation,
        ),
        ("private", CSharp::Private),
        ("operator_declaration", CSharp::OperatorDeclaration),
        ("_switch_label", CSharp::SwitchLabel),
        ("sizeof", CSharp::Sizeof),
        ("=", CSharp::EQ),
        ("this", CSharp::This),
        ("await", CSharp::Await),
        ("class", CSharp::Class),
        ("local_function_statement", CSharp::LocalFunctionStatement),
        ("parameter_array", CSharp::ParameterArray),
        (
            "_class_or_struct_constraint",
            CSharp::ClassOrStructConstraint,
        ),
        ("~", CSharp::TILDE),
        ("operator", CSharp::Operator),
        ("expression_statement", CSharp::ExpressionStatement),
        ("internal", CSharp::Internal),
        ("!=", CSharp::BANGEQ),
        ("[", CSharp::LBRACK),
        ("do_statement", CSharp::DoStatement),
        ("|", CSharp::PIPE),
        ("switch_statement", CSharp::SwitchStatement),
        ("real_literal", CSharp::RealLiteral),
        (">=", CSharp::GTEQ),
        ("parenthesized_expression", CSharp::ParenthesizedExpression),
        ("predefined_type", CSharp::PredefinedType),
        ("using_directive", CSharp::UsingDirective),
        ("array_rank_specifier", CSharp::ArrayRankSpecifier),
        ("#", CSharp::HASH),
        ("_identifier_or_global", CSharp::IdentifierOrGlobal),
        ("explicit", CSharp::Explicit),
        ("throw_statement", CSharp::ThrowStatement),
        ("_statement", CSharp::Statement),
        ("async", CSharp::Async),
        ("character_literal_token1", CSharp::CharacterLiteralToken1),
        ("finally", CSharp::Finally),
        ("typeof", CSharp::Typeof),
        ("postfix_expression", CSharp::PostfixExpression),
        ("attribute_argument_list", CSharp::AttributeArgumentList),
        ("&=", CSharp::AMPEQ),
        ("continue_statement", CSharp::ContinueStatement),
        ("enum_declaration_repeat1", CSharp::EnumDeclarationRepeat1),
        ("type_parameter_constraint", CSharp::TypeParameterConstraint),
        (
            "parenthesized_variable_designation_repeat1",
            CSharp::ParenthesizedVariableDesignationRepeat1,
        ),
        ("discard_designation", CSharp::DiscardDesignation),
        ("identifier_name", CSharp::IdentifierName),
        ("var", CSharp::Var),
        ("short", CSharp::Short),
        (
            "type_parameter_list_repeat1",
            CSharp::TypeParameterListRepeat1,
        ),
        ("new", CSharp::New),
        ("unary_expression", CSharp::UnaryExpression),
        ("type_parameter_list", CSharp::TypeParameterList),
        ("case", CSharp::Case),
        ("base_list_repeat1", CSharp::BaseListRepeat1),
        ("checked", CSharp::Checked),
        ("const", CSharp::Const),
        ("catch_filter_clause", CSharp::CatchFilterClause),
        ("else", CSharp::Else),
        ("ERROR", CSharp::Error),
        ("for", CSharp::For),
        ("string_literal_token1", CSharp::StringLiteralToken1),
        ("_literal", CSharp::Literal),
        ("fixed_statement", CSharp::FixedStatement),
        ("parameter", CSharp::Parameter),
        ("void_keyword", CSharp::VoidKeyword),
        (
            "attribute_argument_list_repeat1",
            CSharp::AttributeArgumentListRepeat1,
        ),
        ("_expression", CSharp::Expression),
        ("++", CSharp::PLUSPLUS),
        (";", CSharp::SEMI),
        ("-", CSharp::DASH),
        (
            "object_creation_expression",
            CSharp::ObjectCreationExpression,
        ),
        ("decimal", CSharp::Decimal),
        ("double", CSharp::Double),
        ("ref", CSharp::Ref),
        ("_pattern", CSharp::Pattern),
        ("preprocessor_directive", CSharp::PreprocessorDirective),
        ("&&", CSharp::AMPAMP),
        ("labeled_statement", CSharp::LabeledStatement),
        ("attribute_argument", CSharp::AttributeArgument),
        ("switch", CSharp::Switch),
        ("nullable_type", CSharp::NullableType),
        ("argument_list", CSharp::ArgumentList),
        ("delegate_declaration", CSharp::DelegateDeclaration),
        ("_variable_designation", CSharp::VariableDesignation),
        ("_formal_parameter_list", CSharp::FormalParameterList),
        (">", CSharp::GT),
        ("try_statement", CSharp::TryStatement),
        (
            "single_variable_designation",
            CSharp::SingleVariableDesignation,
        ),
        ("assignment_expression", CSharp::AssignmentExpression),
        ("global_attribute_list", CSharp::GlobalAttributeList),
        ("field_declaration", CSharp::FieldDeclaration),
        (
            "_formal_parameter_list_repeat1",
            CSharp::FormalParameterListRepeat1,
        ),
        ("enum", CSharp::Enum),
        ("||", CSharp::PIPEPIPE),
        ("catch_clause", CSharp::CatchClause),
        ("for_statement", CSharp::ForStatement),
        ("base_list", CSharp::BaseList),
        ("when", CSharp::When),
        ("base", CSharp::Base),
        ("false", CSharp::False),
        ("goto_statement", CSharp::GotoStatement),
        ("empty_statement", CSharp::EmptyStatement),
        ("block_repeat1", CSharp::BlockRepeat1),
        ("object", CSharp::Object),
        ("try_statement_repeat1", CSharp::TryStatementRepeat1),
        ("/", CSharp::SLASH),
        (
            "type_parameter_constraints_clause",
            CSharp::TypeParameterConstraintsClause,
        ),
        ("unsafe", CSharp::Unsafe),
        ("^=", CSharp::CARETEQ),
        ("protected", CSharp::Protected),
        ("global", CSharp::Global),
        ("struct", CSharp::Struct),
        ("_member_declaration", CSharp::MemberDeclaration),
        ("{", CSharp::LBRACE),
        ("_base_type_declaration", CSharp::BaseTypeDeclaration),
        (
            "event_field_declaration_repeat2",
            CSharp::EventFieldDeclarationRepeat2,
        ),
        ("out", CSharp::Out),
        ("(", CSharp::LPAREN),
        ("declaration_pattern", CSharp::DeclarationPattern),
        ("assembly", CSharp::Assembly),
        ("/=", CSharp::SLASHEQ),
        ("default_switch_label", CSharp::DefaultSwitchLabel),
        ("generic_name", CSharp::GenericName),
        ("enum_declaration", CSharp::EnumDeclaration),
        ("lock_statement", CSharp::LockStatement),
        ("pointer_type", CSharp::PointerType),
        ("argument_list_repeat1", CSharp::ArgumentListRepeat1),
        ("case_switch_label", CSharp::CaseSwitchLabel),
        ("else_clause", CSharp::ElseClause),
        ("_type", CSharp::Type),
        ("-=", CSharp::DASHEQ),
        ("foreach", CSharp::Foreach),
        ("event", CSharp::Event),
        ("uint", CSharp::Uint),
        ("switch_statement_repeat1", CSharp::SwitchStatementRepeat1),
        ("integer_literal_token1", CSharp::IntegerLiteralToken1),
        ("_base_type", CSharp::BaseType),
        ("type_argument_list", CSharp::TypeArgumentList),
        (
            "conversion_operator_declaration",
            CSharp::ConversionOperatorDeclaration,
        ),
        (
            "namespace_declaration_repeat2",
            CSharp::NamespaceDeclarationRepeat2,
        ),
        (
            "local_declaration_statement",
            CSharp::LocalDeclarationStatement,
        ),
        ("_overloadable_operator", CSharp::OverloadableOperator),
        ("block", CSharp::Block),
        ("string_literal", CSharp::StringLiteral),
        ("ulong", CSharp::Ulong),
        ("class_body_repeat1", CSharp::ClassBodyRepeat1),
        ("struct_declaration", CSharp::StructDeclaration),
        ("if_statement", CSharp::IfStatement),
        ("}", CSharp::RBRACE),
        ("if", CSharp::If),
        ("unchecked", CSharp::Unchecked),
        (
            "event_field_declaration_repeat1",
            CSharp::EventFieldDeclarationRepeat1,
        ),
        ("+", CSharp::PLUS),
        (">>=", CSharp::GTGTEQ),
        ("discard_pattern", CSharp::DiscardPattern),
        ("assignment_operator", CSharp::AssignmentOperator),
        ("name_equals", CSharp::NameEquals),
        ("finally_clause", CSharp::FinallyClause),
        ("sbyte", CSharp::Sbyte),
        ("parameter_list", CSharp::ParameterList),
        ("alias", CSharp::Alias),
        ("_base_field_declaration", CSharp::BaseFieldDeclaration),
        ("destructor_declaration", CSharp::DestructorDeclaration),
        ("indexer_declaration", CSharp::IndexerDeclaration),
        ("when_clause", CSharp::WhenClause),
        (
            "namespace_declaration_repeat1",
            CSharp::NamespaceDeclarationRepeat1,
        ),
        ("%=", CSharp::PERCENTEQ),
    ]),
};

impl From<&str> for CSharp {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for CSharp {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x) }
    }
}

// CSharp == u16
impl PartialEq<u16> for CSharp {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == CSharp::from(*x)
    }
}

// u16 == CSharp
impl PartialEq<CSharp> for u16 {
    #[inline(always)]
    fn eq(&self, x: &CSharp) -> bool {
        *x == *self
    }
}
