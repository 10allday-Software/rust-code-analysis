// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum CSharp {
    End = 0,
    IdentifierName = 1,
    BOM = 2,
    Bool = 3,
    Byte = 4,
    Char = 5,
    Decimal = 6,
    Double = 7,
    Float = 8,
    Int = 9,
    Long = 10,
    Object = 11,
    Sbyte = 12,
    Short = 13,
    String = 14,
    Uint = 15,
    Ulong = 16,
    Ushort = 17,
    LT = 18,
    COMMA = 19,
    GT = 20,
    Abstract = 21,
    Async = 22,
    Extern = 23,
    Internal = 24,
    New = 25,
    Override = 26,
    Private = 27,
    Protected = 28,
    Public = 29,
    Readonly = 30,
    Sealed = 31,
    Static = 32,
    Unsafe = 33,
    Virtual = 34,
    Volatile = 35,
    Alias = 36,
    SEMI = 37,
    Using = 38,
    EQ = 39,
    Namespace = 40,
    LBRACE = 41,
    RBRACE = 42,
    EQGT = 43,
    Get = 44,
    Set = 45,
    Partial = 46,
    Class = 47,
    COLON = 48,
    COMMA2 = 49,
    Dynamic = 50,
    Where = 51,
    Struct = 52,
    LPAREN = 53,
    RPAREN = 54,
    This = 55,
    LBRACK = 56,
    RBRACK = 57,
    DOT = 58,
    Event = 59,
    Add = 60,
    Remove = 61,
    Operator = 62,
    Implicit = 63,
    Explicit = 64,
    BANG = 65,
    TILDE = 66,
    PLUSPLUS = 67,
    DASHDASH = 68,
    True = 69,
    False = 70,
    PLUS = 71,
    DASH = 72,
    STAR = 73,
    SLASH = 74,
    PERCENT = 75,
    CARET = 76,
    PIPE = 77,
    AMP = 78,
    LTLT = 79,
    GTGT = 80,
    EQEQ = 81,
    BANGEQ = 82,
    GTEQ = 83,
    LTEQ = 84,
    Interface = 85,
    Enum = 86,
    Delegate = 87,
    VoidKeyword = 88,
    Ref = 89,
    Out = 90,
    Params = 91,
    Assembly = 92,
    Module = 93,
    Const = 94,
    QMARK = 95,
    AMPAMP = 96,
    PIPEPIPE = 97,
    Typeof = 98,
    Sizeof = 99,
    SQUOTE = 100,
    CharacterLiteralToken1 = 101,
    EscapeSequence = 102,
    IntegerLiteralToken1 = 103,
    IntegerLiteralToken2 = 104,
    IntegerTypeSuffix = 105,
    NullLiteral = 106,
    RealLiteral = 107,
    DQUOTE = 108,
    StringLiteralToken1 = 109,
    ATDQUOTE = 110,
    VerbatimStringLiteralToken1 = 111,
    Global = 112,
    COLONCOLON = 113,
    Comment = 114,
    Try = 115,
    Catch = 116,
    When = 117,
    Finally = 118,
    Checked = 119,
    Unchecked = 120,
    Lock = 121,
    Yield = 122,
    Return = 123,
    Break = 124,
    If = 125,
    Else = 126,
    Switch = 127,
    Case = 128,
    Default = 129,
    While = 130,
    Do = 131,
    Continue = 132,
    Throw = 133,
    Goto = 134,
    Var = 135,
    HASHif = 136,
    HASHendif = 137,
    HASHelse = 138,
    HASHregion = 139,
    RegionName = 140,
    EndregionDirective = 141,
    CompilationUnit = 142,
    Declaration = 143,
    Type = 144,
    PredefinedType = 145,
    TypeParameterList = 146,
    GenericName = 147,
    TypeArgumentList = 148,
    Modifiers = 149,
    ExternAliasDirective = 150,
    UsingDirective = 151,
    NameEquals = 152,
    NamespaceDeclaration = 153,
    PropertyDeclaration = 154,
    PropertyBody = 155,
    AccessorDeclarations = 156,
    AccessorDeclaration = 157,
    ClassDeclaration = 158,
    ClassBody = 159,
    ClassBase = 160,
    TypeParameterConstraintsClause = 161,
    TypeParameterConstraints = 162,
    ConstructorConstraint = 163,
    IndexerDeclaration = 164,
    IndexerDeclarator = 165,
    IndexerBody = 166,
    EventDeclaration = 167,
    AddAccessorDeclaration = 168,
    RemoveAccessorDeclaration = 169,
    OperatorDeclaration = 170,
    ConversionOperatorDeclaration = 171,
    OverloadableOperator = 172,
    InterfaceDeclaration = 173,
    InterfaceBase = 174,
    InterfaceMethodDeclaration = 175,
    InterfaceEventDeclaration = 176,
    InterfacePropertyDeclaration = 177,
    InterfaceAccessor = 178,
    InterfaceIndexerDeclaration = 179,
    StructDeclaration = 180,
    StructInterfaces = 181,
    EnumDeclaration = 182,
    EnumMemberDeclaration = 183,
    IntegralType = 184,
    DelegateDeclaration = 185,
    ParameterList = 186,
    FormalParameterList = 187,
    Parameter = 188,
    DefaultArgument = 189,
    ParameterModifier = 190,
    ParameterArray = 191,
    ArrayType = 192,
    RankSpecifier = 193,
    Attributes = 194,
    AttributeSection = 195,
    AttributeList = 196,
    Attribute = 197,
    AttributeArgumentList = 198,
    GlobalAttributes = 199,
    FieldDeclaration = 200,
    VariableDeclaration = 201,
    VariableDeclarator = 202,
    Initializer = 203,
    ArrayInitalizer = 204,
    ConstantDeclaration = 205,
    ConstantDeclarator = 206,
    Expression = 207,
    ParenthesizedExpression = 208,
    TernaryExpression = 209,
    BinaryExpression = 210,
    UnaryExpression = 211,
    PostfixExpression = 212,
    CallExpression = 213,
    ObjectCreationExpression = 214,
    ArgumentList = 215,
    Literal = 216,
    BooleanLiteral = 217,
    CharacterLiteral = 218,
    IntegerLiteral = 219,
    StringLiteral = 220,
    VerbatimStringLiteral = 221,
    QualifiedName = 222,
    AliasQualifiedName = 223,
    ConstructorDeclaration = 224,
    DestructorDeclaration = 225,
    MethodDeclaration = 226,
    MethodBody = 227,
    Statement = 228,
    VariableAssignmentStatement = 229,
    StatementBlock = 230,
    StatementList = 231,
    LabeledStatement = 232,
    EmbeddedStatement = 233,
    EmptyStatement = 234,
    ExpressionStatement = 235,
    TryStatement = 236,
    CatchClause = 237,
    ExceptionSpecifier = 238,
    ExceptionFilter = 239,
    FinallyClause = 240,
    CheckedStatement = 241,
    UncheckedStatement = 242,
    LockStatement = 243,
    UsingStatement = 244,
    ResourceAcquisition = 245,
    YieldStatement = 246,
    IfStatement = 247,
    SwitchStatement = 248,
    SwitchSection = 249,
    SwitchLabel = 250,
    WhileStatement = 251,
    DoStatement = 252,
    BreakStatement = 253,
    ContinueStatement = 254,
    ReturnStatement = 255,
    ThrowStatement = 256,
    GotoStatement = 257,
    DeclarationStatement = 258,
    LocalVariableDeclaration = 259,
    LocalConstantDeclaration = 260,
    IfDirective = 261,
    ElseDirective = 262,
    RegionDirective = 263,
    CompilationUnitRepeat1 = 264,
    TypeParameterListRepeat1 = 265,
    TypeArgumentListRepeat1 = 266,
    ModifiersRepeat1 = 267,
    ClassDeclarationRepeat1 = 268,
    ClassBodyRepeat1 = 269,
    InterfaceDeclarationRepeat1 = 270,
    InterfacePropertyDeclarationRepeat1 = 271,
    EnumDeclarationRepeat1 = 272,
    FormalParameterListRepeat1 = 273,
    RankSpecifierRepeat1 = 274,
    AttributeListRepeat1 = 275,
    AttributeArgumentListRepeat1 = 276,
    VariableDeclarationRepeat1 = 277,
    ArrayInitalizerRepeat1 = 278,
    ConstantDeclarationRepeat1 = 279,
    ArgumentListRepeat1 = 280,
    StringLiteralRepeat1 = 281,
    TryStatementRepeat1 = 282,
    SwitchStatementRepeat1 = 283,
    SwitchSectionRepeat1 = 284,
    LabelName = 285,
    Error = 286,
    
}

impl Into<&'static str> for CSharp {
    fn into(self) -> &'static str {
        match self {
            CSharp::End => "end",
            CSharp::IdentifierName => "identifier_name",
            CSharp::BOM => "ï»¿",
            CSharp::Bool => "bool",
            CSharp::Byte => "byte",
            CSharp::Char => "char",
            CSharp::Decimal => "decimal",
            CSharp::Double => "double",
            CSharp::Float => "float",
            CSharp::Int => "int",
            CSharp::Long => "long",
            CSharp::Object => "object",
            CSharp::Sbyte => "sbyte",
            CSharp::Short => "short",
            CSharp::String => "string",
            CSharp::Uint => "uint",
            CSharp::Ulong => "ulong",
            CSharp::Ushort => "ushort",
            CSharp::LT => "<",
            CSharp::COMMA => ",",
            CSharp::GT => ">",
            CSharp::Abstract => "abstract",
            CSharp::Async => "async",
            CSharp::Extern => "extern",
            CSharp::Internal => "internal",
            CSharp::New => "new",
            CSharp::Override => "override",
            CSharp::Private => "private",
            CSharp::Protected => "protected",
            CSharp::Public => "public",
            CSharp::Readonly => "readonly",
            CSharp::Sealed => "sealed",
            CSharp::Static => "static",
            CSharp::Unsafe => "unsafe",
            CSharp::Virtual => "virtual",
            CSharp::Volatile => "volatile",
            CSharp::Alias => "alias",
            CSharp::SEMI => ";",
            CSharp::Using => "using",
            CSharp::EQ => "=",
            CSharp::Namespace => "namespace",
            CSharp::LBRACE => "{",
            CSharp::RBRACE => "}",
            CSharp::EQGT => "=>",
            CSharp::Get => "get",
            CSharp::Set => "set",
            CSharp::Partial => "partial",
            CSharp::Class => "class",
            CSharp::COLON => ":",
            CSharp::COMMA2 => ", ",
            CSharp::Dynamic => "dynamic",
            CSharp::Where => "where",
            CSharp::Struct => "struct",
            CSharp::LPAREN => "(",
            CSharp::RPAREN => ")",
            CSharp::This => "this",
            CSharp::LBRACK => "[",
            CSharp::RBRACK => "]",
            CSharp::DOT => ".",
            CSharp::Event => "event",
            CSharp::Add => "add",
            CSharp::Remove => "remove",
            CSharp::Operator => "operator",
            CSharp::Implicit => "implicit",
            CSharp::Explicit => "explicit",
            CSharp::BANG => "!",
            CSharp::TILDE => "~",
            CSharp::PLUSPLUS => "++",
            CSharp::DASHDASH => "--",
            CSharp::True => "true",
            CSharp::False => "false",
            CSharp::PLUS => "+",
            CSharp::DASH => "-",
            CSharp::STAR => "*",
            CSharp::SLASH => "/",
            CSharp::PERCENT => "%",
            CSharp::CARET => "^",
            CSharp::PIPE => "|",
            CSharp::AMP => "&",
            CSharp::LTLT => "<<",
            CSharp::GTGT => ">>",
            CSharp::EQEQ => "==",
            CSharp::BANGEQ => "!=",
            CSharp::GTEQ => ">=",
            CSharp::LTEQ => "<=",
            CSharp::Interface => "interface",
            CSharp::Enum => "enum",
            CSharp::Delegate => "delegate",
            CSharp::VoidKeyword => "void_keyword",
            CSharp::Ref => "ref",
            CSharp::Out => "out",
            CSharp::Params => "params",
            CSharp::Assembly => "assembly",
            CSharp::Module => "module",
            CSharp::Const => "const",
            CSharp::QMARK => "?",
            CSharp::AMPAMP => "&&",
            CSharp::PIPEPIPE => "||",
            CSharp::Typeof => "typeof",
            CSharp::Sizeof => "sizeof",
            CSharp::SQUOTE => "'",
            CSharp::CharacterLiteralToken1 => "character_literal_token1",
            CSharp::EscapeSequence => "escape_sequence",
            CSharp::IntegerLiteralToken1 => "integer_literal_token1",
            CSharp::IntegerLiteralToken2 => "integer_literal_token2",
            CSharp::IntegerTypeSuffix => "_integer_type_suffix",
            CSharp::NullLiteral => "null_literal",
            CSharp::RealLiteral => "real_literal",
            CSharp::DQUOTE => "\"",
            CSharp::StringLiteralToken1 => "string_literal_token1",
            CSharp::ATDQUOTE => "@\"",
            CSharp::VerbatimStringLiteralToken1 => "verbatim_string_literal_token1",
            CSharp::Global => "global",
            CSharp::COLONCOLON => "::",
            CSharp::Comment => "comment",
            CSharp::Try => "try",
            CSharp::Catch => "catch",
            CSharp::When => "when",
            CSharp::Finally => "finally",
            CSharp::Checked => "checked",
            CSharp::Unchecked => "unchecked",
            CSharp::Lock => "lock",
            CSharp::Yield => "yield",
            CSharp::Return => "return",
            CSharp::Break => "break",
            CSharp::If => "if",
            CSharp::Else => "else",
            CSharp::Switch => "switch",
            CSharp::Case => "case",
            CSharp::Default => "default",
            CSharp::While => "while",
            CSharp::Do => "do",
            CSharp::Continue => "continue",
            CSharp::Throw => "throw",
            CSharp::Goto => "goto",
            CSharp::Var => "var",
            CSharp::HASHif => "#if",
            CSharp::HASHendif => "#endif",
            CSharp::HASHelse => "#else",
            CSharp::HASHregion => "#region",
            CSharp::RegionName => "region_name",
            CSharp::EndregionDirective => "endregion_directive",
            CSharp::CompilationUnit => "compilation_unit",
            CSharp::Declaration => "_declaration",
            CSharp::Type => "_type",
            CSharp::PredefinedType => "predefined_type",
            CSharp::TypeParameterList => "type_parameter_list",
            CSharp::GenericName => "generic_name",
            CSharp::TypeArgumentList => "type_argument_list",
            CSharp::Modifiers => "modifiers",
            CSharp::ExternAliasDirective => "extern_alias_directive",
            CSharp::UsingDirective => "using_directive",
            CSharp::NameEquals => "name_equals",
            CSharp::NamespaceDeclaration => "namespace_declaration",
            CSharp::PropertyDeclaration => "property_declaration",
            CSharp::PropertyBody => "_property_body",
            CSharp::AccessorDeclarations => "_accessor_declarations",
            CSharp::AccessorDeclaration => "accessor_declaration",
            CSharp::ClassDeclaration => "class_declaration",
            CSharp::ClassBody => "class_body",
            CSharp::ClassBase => "class_base",
            CSharp::TypeParameterConstraintsClause => "type_parameter_constraints_clause",
            CSharp::TypeParameterConstraints => "type_parameter_constraints",
            CSharp::ConstructorConstraint => "constructor_constraint",
            CSharp::IndexerDeclaration => "indexer_declaration",
            CSharp::IndexerDeclarator => "_indexer_declarator",
            CSharp::IndexerBody => "_indexer_body",
            CSharp::EventDeclaration => "event_declaration",
            CSharp::AddAccessorDeclaration => "add_accessor_declaration",
            CSharp::RemoveAccessorDeclaration => "remove_accessor_declaration",
            CSharp::OperatorDeclaration => "operator_declaration",
            CSharp::ConversionOperatorDeclaration => "conversion_operator_declaration",
            CSharp::OverloadableOperator => "overloadable_operator",
            CSharp::InterfaceDeclaration => "interface_declaration",
            CSharp::InterfaceBase => "interface_base",
            CSharp::InterfaceMethodDeclaration => "interface_method_declaration",
            CSharp::InterfaceEventDeclaration => "interface_event_declaration",
            CSharp::InterfacePropertyDeclaration => "interface_property_declaration",
            CSharp::InterfaceAccessor => "interface_accessor",
            CSharp::InterfaceIndexerDeclaration => "interface_indexer_declaration",
            CSharp::StructDeclaration => "struct_declaration",
            CSharp::StructInterfaces => "struct_interfaces",
            CSharp::EnumDeclaration => "enum_declaration",
            CSharp::EnumMemberDeclaration => "enum_member_declaration",
            CSharp::IntegralType => "_integral_type",
            CSharp::DelegateDeclaration => "delegate_declaration",
            CSharp::ParameterList => "parameter_list",
            CSharp::FormalParameterList => "_formal_parameter_list",
            CSharp::Parameter => "parameter",
            CSharp::DefaultArgument => "default_argument",
            CSharp::ParameterModifier => "parameter_modifier",
            CSharp::ParameterArray => "parameter_array",
            CSharp::ArrayType => "array_type",
            CSharp::RankSpecifier => "rank_specifier",
            CSharp::Attributes => "_attributes",
            CSharp::AttributeSection => "_attribute_section",
            CSharp::AttributeList => "attribute_list",
            CSharp::Attribute => "attribute",
            CSharp::AttributeArgumentList => "attribute_argument_list",
            CSharp::GlobalAttributes => "_global_attributes",
            CSharp::FieldDeclaration => "field_declaration",
            CSharp::VariableDeclaration => "variable_declaration",
            CSharp::VariableDeclarator => "variable_declarator",
            CSharp::Initializer => "_initializer",
            CSharp::ArrayInitalizer => "array_initalizer",
            CSharp::ConstantDeclaration => "constant_declaration",
            CSharp::ConstantDeclarator => "constant_declarator",
            CSharp::Expression => "_expression",
            CSharp::ParenthesizedExpression => "parenthesized_expression",
            CSharp::TernaryExpression => "ternary_expression",
            CSharp::BinaryExpression => "binary_expression",
            CSharp::UnaryExpression => "unary_expression",
            CSharp::PostfixExpression => "postfix_expression",
            CSharp::CallExpression => "call_expression",
            CSharp::ObjectCreationExpression => "object_creation_expression",
            CSharp::ArgumentList => "argument_list",
            CSharp::Literal => "_literal",
            CSharp::BooleanLiteral => "boolean_literal",
            CSharp::CharacterLiteral => "character_literal",
            CSharp::IntegerLiteral => "integer_literal",
            CSharp::StringLiteral => "string_literal",
            CSharp::VerbatimStringLiteral => "verbatim_string_literal",
            CSharp::QualifiedName => "qualified_name",
            CSharp::AliasQualifiedName => "alias_qualified_name",
            CSharp::ConstructorDeclaration => "constructor_declaration",
            CSharp::DestructorDeclaration => "destructor_declaration",
            CSharp::MethodDeclaration => "method_declaration",
            CSharp::MethodBody => "_method_body",
            CSharp::Statement => "_statement",
            CSharp::VariableAssignmentStatement => "variable_assignment_statement",
            CSharp::StatementBlock => "statement_block",
            CSharp::StatementList => "_statement_list",
            CSharp::LabeledStatement => "_labeled_statement",
            CSharp::EmbeddedStatement => "_embedded_statement",
            CSharp::EmptyStatement => "empty_statement",
            CSharp::ExpressionStatement => "expression_statement",
            CSharp::TryStatement => "try_statement",
            CSharp::CatchClause => "catch_clause",
            CSharp::ExceptionSpecifier => "_exception_specifier",
            CSharp::ExceptionFilter => "_exception_filter",
            CSharp::FinallyClause => "finally_clause",
            CSharp::CheckedStatement => "checked_statement",
            CSharp::UncheckedStatement => "unchecked_statement",
            CSharp::LockStatement => "lock_statement",
            CSharp::UsingStatement => "using_statement",
            CSharp::ResourceAcquisition => "_resource_acquisition",
            CSharp::YieldStatement => "yield_statement",
            CSharp::IfStatement => "if_statement",
            CSharp::SwitchStatement => "switch_statement",
            CSharp::SwitchSection => "switch_section",
            CSharp::SwitchLabel => "switch_label",
            CSharp::WhileStatement => "while_statement",
            CSharp::DoStatement => "do_statement",
            CSharp::BreakStatement => "break_statement",
            CSharp::ContinueStatement => "continue_statement",
            CSharp::ReturnStatement => "return_statement",
            CSharp::ThrowStatement => "throw_statement",
            CSharp::GotoStatement => "goto_statement",
            CSharp::DeclarationStatement => "_declaration_statement",
            CSharp::LocalVariableDeclaration => "local_variable_declaration",
            CSharp::LocalConstantDeclaration => "local_constant_declaration",
            CSharp::IfDirective => "if_directive",
            CSharp::ElseDirective => "else_directive",
            CSharp::RegionDirective => "region_directive",
            CSharp::CompilationUnitRepeat1 => "compilation_unit_repeat1",
            CSharp::TypeParameterListRepeat1 => "type_parameter_list_repeat1",
            CSharp::TypeArgumentListRepeat1 => "type_argument_list_repeat1",
            CSharp::ModifiersRepeat1 => "modifiers_repeat1",
            CSharp::ClassDeclarationRepeat1 => "class_declaration_repeat1",
            CSharp::ClassBodyRepeat1 => "class_body_repeat1",
            CSharp::InterfaceDeclarationRepeat1 => "interface_declaration_repeat1",
            CSharp::InterfacePropertyDeclarationRepeat1 => "interface_property_declaration_repeat1",
            CSharp::EnumDeclarationRepeat1 => "enum_declaration_repeat1",
            CSharp::FormalParameterListRepeat1 => "_formal_parameter_list_repeat1",
            CSharp::RankSpecifierRepeat1 => "rank_specifier_repeat1",
            CSharp::AttributeListRepeat1 => "attribute_list_repeat1",
            CSharp::AttributeArgumentListRepeat1 => "attribute_argument_list_repeat1",
            CSharp::VariableDeclarationRepeat1 => "variable_declaration_repeat1",
            CSharp::ArrayInitalizerRepeat1 => "array_initalizer_repeat1",
            CSharp::ConstantDeclarationRepeat1 => "constant_declaration_repeat1",
            CSharp::ArgumentListRepeat1 => "argument_list_repeat1",
            CSharp::StringLiteralRepeat1 => "string_literal_repeat1",
            CSharp::TryStatementRepeat1 => "try_statement_repeat1",
            CSharp::SwitchStatementRepeat1 => "switch_statement_repeat1",
            CSharp::SwitchSectionRepeat1 => "switch_section_repeat1",
            CSharp::LabelName => "label_name",
            CSharp::Error => "ERROR",
            }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, CSharp> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 73),
        (0, 152),
        (0, 12),
        (0, 134),
        (0, 1),
        (0, 18),
        (0, 177),
        (0, 0),
        (0, 1),
        (4, 26),
        (1, 29),
        (0, 62),
        (0, 13),
        (0, 41),
        (0, 65),
        (2, 84),
        (0, 13),
        (0, 0),
        (0, 79),
        (0, 27),
        (0, 0),
        (0, 99),
        (0, 1),
        (0, 14),
        (4, 127),
        (8, 44),
        (0, 4),
        (0, 86),
        (0, 205),
        (0, 68),
        (0, 62),
        (2, 277),
        (0, 18),
        (0, 89),
        (0, 227),
        (0, 33),
        (0, 172),
        (0, 177),
        (0, 31),
        (0, 19),
        (0, 9),
        (2, 112),
        (2, 199),
        (24, 113),
        (0, 19),
        (19, 200),
        (0, 0),
        (8, 203),
        (0, 230),
        (0, 32),
        (0, 60),
        (2, 93),
        (4, 163),
        (0, 24),
        (23, 9),
        (1, 145),
        (81, 12),
        (0, 0),
    ]),
    entries: ::phf::Slice::Static(&[
        ("while", CSharp::While),
        ("}", CSharp::RBRACE),
        ("catch_clause", CSharp::CatchClause),
        ("constant_declaration_repeat1", CSharp::ConstantDeclarationRepeat1),
        ("true", CSharp::True),
        ("unchecked", CSharp::Unchecked),
        ("array_initalizer", CSharp::ArrayInitalizer),
        ("interface", CSharp::Interface),
        ("_literal", CSharp::Literal),
        ("virtual", CSharp::Virtual),
        ("_indexer_body", CSharp::IndexerBody),
        ("type_argument_list_repeat1", CSharp::TypeArgumentListRepeat1),
        ("using_directive", CSharp::UsingDirective),
        ("try_statement", CSharp::TryStatement),
        ("verbatim_string_literal_token1", CSharp::VerbatimStringLiteralToken1),
        ("_declaration", CSharp::Declaration),
        ("type_parameter_constraints", CSharp::TypeParameterConstraints),
        ("internal", CSharp::Internal),
        ("local_constant_declaration", CSharp::LocalConstantDeclaration),
        ("while_statement", CSharp::WhileStatement),
        ("interface_base", CSharp::InterfaceBase),
        ("interface_indexer_declaration", CSharp::InterfaceIndexerDeclaration),
        ("char", CSharp::Char),
        ("||", CSharp::PIPEPIPE),
        ("_integral_type", CSharp::IntegralType),
        ("return_statement", CSharp::ReturnStatement),
        ("uint", CSharp::Uint),
        ("variable_assignment_statement", CSharp::VariableAssignmentStatement),
        ("type_parameter_list", CSharp::TypeParameterList),
        ("accessor_declaration", CSharp::AccessorDeclaration),
        ("params", CSharp::Params),
        ("class", CSharp::Class),
        ("modifiers", CSharp::Modifiers),
        ("when", CSharp::When),
        ("operator", CSharp::Operator),
        ("switch_statement", CSharp::SwitchStatement),
        ("_resource_acquisition", CSharp::ResourceAcquisition),
        ("qualified_name", CSharp::QualifiedName),
        ("byte", CSharp::Byte),
        ("bool", CSharp::Bool),
        ("delegate", CSharp::Delegate),
        ("property_declaration", CSharp::PropertyDeclaration),
        ("long", CSharp::Long),
        ("_global_attributes", CSharp::GlobalAttributes),
        ("?", CSharp::QMARK),
        ("global", CSharp::Global),
        ("default", CSharp::Default),
        ("#else", CSharp::HASHelse),
        ("end", CSharp::End),
        ("class_declaration_repeat1", CSharp::ClassDeclarationRepeat1),
        ("argument_list", CSharp::ArgumentList),
        ("namespace_declaration", CSharp::NamespaceDeclaration),
        ("real_literal", CSharp::RealLiteral),
        ("interface_property_declaration", CSharp::InterfacePropertyDeclaration),
        ("get", CSharp::Get),
        ("==", CSharp::EQEQ),
        ("attribute_list", CSharp::AttributeList),
        ("lock", CSharp::Lock),
        ("enum_declaration", CSharp::EnumDeclaration),
        ("parameter_list", CSharp::ParameterList),
        ("switch_label", CSharp::SwitchLabel),
        ("~", CSharp::TILDE),
        ("&", CSharp::AMP),
        ("array_initalizer_repeat1", CSharp::ArrayInitalizerRepeat1),
        ("finally", CSharp::Finally),
        ("ternary_expression", CSharp::TernaryExpression),
        ("region_name", CSharp::RegionName),
        ("module", CSharp::Module),
        (":", CSharp::COLON),
        ("struct_declaration", CSharp::StructDeclaration),
        ("identifier_name", CSharp::IdentifierName),
        ("<<", CSharp::LTLT),
        ("if_directive", CSharp::IfDirective),
        ("array_type", CSharp::ArrayType),
        ("_declaration_statement", CSharp::DeclarationStatement),
        ("ref", CSharp::Ref),
        (">", CSharp::GT),
        (")", CSharp::RPAREN),
        ("typeof", CSharp::Typeof),
        ("_attributes", CSharp::Attributes),
        ("unary_expression", CSharp::UnaryExpression),
        ("continue", CSharp::Continue),
        ("name_equals", CSharp::NameEquals),
        ("lock_statement", CSharp::LockStatement),
        ("null_literal", CSharp::NullLiteral),
        (",", CSharp::COMMA),
        ("out", CSharp::Out),
        (">=", CSharp::GTEQ),
        ("extern_alias_directive", CSharp::ExternAliasDirective),
        ("ERROR", CSharp::Error),
        ("destructor_declaration", CSharp::DestructorDeclaration),
        ("_exception_specifier", CSharp::ExceptionSpecifier),
        ("finally_clause", CSharp::FinallyClause),
        ("attribute", CSharp::Attribute),
        ("struct", CSharp::Struct),
        ("string", CSharp::String),
        ("constant_declaration", CSharp::ConstantDeclaration),
        ("goto_statement", CSharp::GotoStatement),
        ("_type", CSharp::Type),
        ("::", CSharp::COLONCOLON),
        ("enum_member_declaration", CSharp::EnumMemberDeclaration),
        ("operator_declaration", CSharp::OperatorDeclaration),
        ("this", CSharp::This),
        ("attribute_list_repeat1", CSharp::AttributeListRepeat1),
        ("<=", CSharp::LTEQ),
        ("comment", CSharp::Comment),
        ("character_literal", CSharp::CharacterLiteral),
        ("try", CSharp::Try),
        ("+", CSharp::PLUS),
        ("integer_literal_token1", CSharp::IntegerLiteralToken1),
        ("enum", CSharp::Enum),
        ("indexer_declaration", CSharp::IndexerDeclaration),
        ("else", CSharp::Else),
        ("yield", CSharp::Yield),
        (";", CSharp::SEMI),
        ("#if", CSharp::HASHif),
        ("interface_accessor", CSharp::InterfaceAccessor),
        ("<", CSharp::LT),
        ("binary_expression", CSharp::BinaryExpression),
        ("implicit", CSharp::Implicit),
        ("dynamic", CSharp::Dynamic),
        ("compilation_unit", CSharp::CompilationUnit),
        ("ï»¿", CSharp::BOM),
        ("_indexer_declarator", CSharp::IndexerDeclarator),
        ("var", CSharp::Var),
        ("using", CSharp::Using),
        ("type_argument_list", CSharp::TypeArgumentList),
        ("constructor_declaration", CSharp::ConstructorDeclaration),
        ("attribute_argument_list", CSharp::AttributeArgumentList),
        ("character_literal_token1", CSharp::CharacterLiteralToken1),
        ("integer_literal", CSharp::IntegerLiteral),
        ("*", CSharp::STAR),
        ("int", CSharp::Int),
        ("short", CSharp::Short),
        ("_exception_filter", CSharp::ExceptionFilter),
        ("volatile", CSharp::Volatile),
        ("_labeled_statement", CSharp::LabeledStatement),
        ("_accessor_declarations", CSharp::AccessorDeclarations),
        ("object_creation_expression", CSharp::ObjectCreationExpression),
        ("sizeof", CSharp::Sizeof),
        (">>", CSharp::GTGT),
        ("#region", CSharp::HASHregion),
        ("default_argument", CSharp::DefaultArgument),
        ("=", CSharp::EQ),
        ("sbyte", CSharp::Sbyte),
        ("class_body_repeat1", CSharp::ClassBodyRepeat1),
        ("remove", CSharp::Remove),
        ("postfix_expression", CSharp::PostfixExpression),
        ("interface_declaration", CSharp::InterfaceDeclaration),
        ("event", CSharp::Event),
        ("method_declaration", CSharp::MethodDeclaration),
        ("throw_statement", CSharp::ThrowStatement),
        ("object", CSharp::Object),
        ("try_statement_repeat1", CSharp::TryStatementRepeat1),
        ("\\\"", CSharp::DQUOTE),
        ("escape_sequence", CSharp::EscapeSequence),
        ("region_directive", CSharp::RegionDirective),
        ("ushort", CSharp::Ushort),
        ("rank_specifier_repeat1", CSharp::RankSpecifierRepeat1),
        ("const", CSharp::Const),
        ("!", CSharp::BANG),
        ("#endif", CSharp::HASHendif),
        ("endregion_directive", CSharp::EndregionDirective),
        ("_attribute_section", CSharp::AttributeSection),
        ("break", CSharp::Break),
        ("extern", CSharp::Extern),
        ("public", CSharp::Public),
        ("throw", CSharp::Throw),
        ("variable_declaration_repeat1", CSharp::VariableDeclarationRepeat1),
        ("&&", CSharp::AMPAMP),
        ("alias_qualified_name", CSharp::AliasQualifiedName),
        ("do", CSharp::Do),
        ("predefined_type", CSharp::PredefinedType),
        ("type_parameter_list_repeat1", CSharp::TypeParameterListRepeat1),
        ("generic_name", CSharp::GenericName),
        ("false", CSharp::False),
        ("@\\\"", CSharp::ATDQUOTE),
        ("local_variable_declaration", CSharp::LocalVariableDeclaration),
        ("=>", CSharp::EQGT),
        ("delegate_declaration", CSharp::DelegateDeclaration),
        ("decimal", CSharp::Decimal),
        ("type_parameter_constraints_clause", CSharp::TypeParameterConstraintsClause),
        ("!=", CSharp::BANGEQ),
        ("parameter", CSharp::Parameter),
        ("switch_section", CSharp::SwitchSection),
        ("_embedded_statement", CSharp::EmbeddedStatement),
        ("verbatim_string_literal", CSharp::VerbatimStringLiteral),
        ("_statement", CSharp::Statement),
        ("constructor_constraint", CSharp::ConstructorConstraint),
        ("double", CSharp::Double),
        ("return", CSharp::Return),
        ("-", CSharp::DASH),
        ("break_statement", CSharp::BreakStatement),
        ("readonly", CSharp::Readonly),
        (".", CSharp::DOT),
        ("interface_property_declaration_repeat1", CSharp::InterfacePropertyDeclarationRepeat1),
        ("unsafe", CSharp::Unsafe),
        ("^", CSharp::CARET),
        ("void_keyword", CSharp::VoidKeyword),
        ("goto", CSharp::Goto),
        ("protected", CSharp::Protected),
        ("add_accessor_declaration", CSharp::AddAccessorDeclaration),
        ("parameter_modifier", CSharp::ParameterModifier),
        ("expression_statement", CSharp::ExpressionStatement),
        ("continue_statement", CSharp::ContinueStatement),
        ("explicit", CSharp::Explicit),
        ("attribute_argument_list_repeat1", CSharp::AttributeArgumentListRepeat1),
        ("_initializer", CSharp::Initializer),
        ("class_body", CSharp::ClassBody),
        ("[", CSharp::LBRACK),
        ("struct_interfaces", CSharp::StructInterfaces),
        ("empty_statement", CSharp::EmptyStatement),
        ("string_literal_repeat1", CSharp::StringLiteralRepeat1),
        ("_expression", CSharp::Expression),
        ("add", CSharp::Add),
        ("class_base", CSharp::ClassBase),
        ("interface_event_declaration", CSharp::InterfaceEventDeclaration),
        ("abstract", CSharp::Abstract),
        ("rank_specifier", CSharp::RankSpecifier),
        ("integer_literal_token2", CSharp::IntegerLiteralToken2),
        ("remove_accessor_declaration", CSharp::RemoveAccessorDeclaration),
        ("_formal_parameter_list_repeat1", CSharp::FormalParameterListRepeat1),
        ("if", CSharp::If),
        ("checked_statement", CSharp::CheckedStatement),
        ("where", CSharp::Where),
        ("set", CSharp::Set),
        ("new", CSharp::New),
        ("checked", CSharp::Checked),
        ("event_declaration", CSharp::EventDeclaration),
        ("private", CSharp::Private),
        ("_statement_list", CSharp::StatementList),
        ("parameter_array", CSharp::ParameterArray),
        ("boolean_literal", CSharp::BooleanLiteral),
        ("++", CSharp::PLUSPLUS),
        ("field_declaration", CSharp::FieldDeclaration),
        ("yield_statement", CSharp::YieldStatement),
        ("parenthesized_expression", CSharp::ParenthesizedExpression),
        ("sealed", CSharp::Sealed),
        ("--", CSharp::DASHDASH),
        ("|", CSharp::PIPE),
        ("modifiers_repeat1", CSharp::ModifiersRepeat1),
        ("overloadable_operator", CSharp::OverloadableOperator),
        ("]", CSharp::RBRACK),
        ("interface_method_declaration", CSharp::InterfaceMethodDeclaration),
        ("call_expression", CSharp::CallExpression),
        ("\'", CSharp::SQUOTE),
        ("else_directive", CSharp::ElseDirective),
        ("if_statement", CSharp::IfStatement),
        ("alias", CSharp::Alias),
        ("class_declaration", CSharp::ClassDeclaration),
        ("case", CSharp::Case),
        ("conversion_operator_declaration", CSharp::ConversionOperatorDeclaration),
        ("async", CSharp::Async),
        ("override", CSharp::Override),
        ("_integer_type_suffix", CSharp::IntegerTypeSuffix),
        ("constant_declarator", CSharp::ConstantDeclarator),
        ("switch_section_repeat1", CSharp::SwitchSectionRepeat1),
        ("static", CSharp::Static),
        ("partial", CSharp::Partial),
        ("variable_declaration", CSharp::VariableDeclaration),
        ("interface_declaration_repeat1", CSharp::InterfaceDeclarationRepeat1),
        ("using_statement", CSharp::UsingStatement),
        ("enum_declaration_repeat1", CSharp::EnumDeclarationRepeat1),
        ("_property_body", CSharp::PropertyBody),
        ("float", CSharp::Float),
        ("do_statement", CSharp::DoStatement),
        ("%", CSharp::PERCENT),
        ("string_literal_token1", CSharp::StringLiteralToken1),
        ("_formal_parameter_list", CSharp::FormalParameterList),
        ("_method_body", CSharp::MethodBody),
        ("unchecked_statement", CSharp::UncheckedStatement),
        ("assembly", CSharp::Assembly),
        ("label_name", CSharp::LabelName),
        ("switch", CSharp::Switch),
        ("compilation_unit_repeat1", CSharp::CompilationUnitRepeat1),
        ("ulong", CSharp::Ulong),
        ("switch_statement_repeat1", CSharp::SwitchStatementRepeat1),
        ("{", CSharp::LBRACE),
        ("variable_declarator", CSharp::VariableDeclarator),
        ("namespace", CSharp::Namespace),
        ("string_literal", CSharp::StringLiteral),
        ("argument_list_repeat1", CSharp::ArgumentListRepeat1),
        ("statement_block", CSharp::StatementBlock),
        ("(", CSharp::LPAREN),
        ("catch", CSharp::Catch),
        ("/", CSharp::SLASH),
    ]),
};

impl From<&str> for CSharp {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for CSharp {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x) }
    }
}

// CSharp == u16
impl PartialEq<u16> for CSharp {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == CSharp::from(*x)
    }
}

// u16 == CSharp
impl PartialEq<CSharp> for u16 {
    #[inline(always)]
    fn eq(&self, x: &CSharp) -> bool {
        *x == *self
    }
}