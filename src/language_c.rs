// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum C {
    End = 0,
    Identifier = 1,
    Macro = 2,
    LF = 3,
    HASHinclude = 4,
    HASHdefine = 5,
    LPAREN = 6,
    PreprocParamsToken1 = 7,
    DOTDOTDOT = 8,
    COMMA = 9,
    RPAREN = 10,
    HASHif = 11,
    HASHendif = 12,
    HASHifdef = 13,
    HASHifndef = 14,
    HASHelse = 15,
    HASHelif = 16,
    PreprocDirective = 17,
    PreprocArg = 18,
    LPAREN2 = 19,
    Defined = 20,
    BANG = 21,
    TILDE = 22,
    DASH = 23,
    PLUS = 24,
    STAR = 25,
    SLASH = 26,
    PERCENT = 27,
    PIPEPIPE = 28,
    AMPAMP = 29,
    PIPE = 30,
    CARET = 31,
    AMP = 32,
    EQEQ = 33,
    BANGEQ = 34,
    GT = 35,
    GTEQ = 36,
    LTEQ = 37,
    LT = 38,
    LTLT = 39,
    GTGT = 40,
    Cdecl = 41,
    Clrcall = 42,
    Stdcall = 43,
    Fastcall = 44,
    Thiscall = 45,
    Vectorcall = 46,
    WINAPI = 47,
    CALLBACK = 48,
    SEMI = 49,
    Typedef = 50,
    Extern = 51,
    Attribute = 52,
    LBRACE = 53,
    RBRACE = 54,
    LBRACK = 55,
    RBRACK = 56,
    EQ = 57,
    Static = 58,
    Auto = 59,
    Register = 60,
    Inline = 61,
    Const = 62,
    CONST = 63,
    Volatile = 64,
    Restrict = 65,
    Atomic = 66,
    Signed = 67,
    Unsigned = 68,
    Long = 69,
    Short = 70,
    PrimitiveType = 71,
    Enum = 72,
    Struct = 73,
    Union = 74,
    COLON = 75,
    If = 76,
    Else = 77,
    Switch = 78,
    Case = 79,
    Default = 80,
    While = 81,
    Do = 82,
    For = 83,
    Return = 84,
    Break = 85,
    Continue = 86,
    Goto = 87,
    QMARK = 88,
    STAREQ = 89,
    SLASHEQ = 90,
    PERCENTEQ = 91,
    PLUSEQ = 92,
    DASHEQ = 93,
    LTLTEQ = 94,
    GTGTEQ = 95,
    AMPEQ = 96,
    CARETEQ = 97,
    PIPEEQ = 98,
    DASHDASH = 99,
    PLUSPLUS = 100,
    Sizeof = 101,
    DOT = 102,
    DASHGT = 103,
    NumberLiteral = 104,
    LSQUOTE = 105,
    SQUOTE = 106,
    CharLiteralToken1 = 107,
    LDQUOTE = 108,
    DQUOTE = 109,
    StringLiteralToken1 = 110,
    EscapeSequence = 111,
    SystemLibString = 112,
    True = 113,
    False = 114,
    Null = 115,
    Comment = 116,
    TranslationUnit = 117,
    OnlyMacro = 118,
    MacroCall = 119,
    OnlyMacroCall = 120,
    PreprocInclude = 121,
    PreprocDef = 122,
    PreprocFunctionDef = 123,
    PreprocParams = 124,
    PreprocCall = 125,
    PreprocIf = 126,
    PreprocIfdef = 127,
    PreprocElse = 128,
    PreprocElif = 129,
    PreprocIf2 = 130,
    PreprocIfdef2 = 131,
    PreprocElse2 = 132,
    PreprocElif2 = 133,
    LineContinuation = 134,
    PreprocCondition = 135,
    PreprocExpression = 136,
    PreprocParenthesizedExpression = 137,
    PreprocDefined = 138,
    PreprocUnaryExpression = 139,
    PreprocBinaryExpression = 140,
    CallConvention = 141,
    FunctionDefinition = 142,
    Declaration = 143,
    TypeDefinition = 144,
    DeclarationSpecifiers = 145,
    DeclarationSpecifiersNoType = 146,
    LinkageSpecification = 147,
    AttributeSpecifier = 148,
    DeclarationList = 149,
    Declarator = 150,
    FieldDeclarator = 151,
    TypeDeclarator = 152,
    AbstractDeclarator = 153,
    ParenthesizedDeclarator = 154,
    ParenthesizedDeclarator2 = 155,
    ParenthesizedDeclarator3 = 156,
    AbstractParenthesizedDeclarator = 157,
    PointerDeclarator = 158,
    PointerDeclarator2 = 159,
    PointerDeclarator3 = 160,
    AbstractPointerDeclarator = 161,
    FunctionDeclarator = 162,
    FunctionDeclarator2 = 163,
    FunctionDeclarator3 = 164,
    AbstractFunctionDeclarator = 165,
    ArrayDeclarator = 166,
    ArrayDeclarator2 = 167,
    ArrayDeclarator3 = 168,
    AbstractArrayDeclarator = 169,
    InitDeclarator = 170,
    CompoundStatement = 171,
    StorageClassSpecifier = 172,
    TypeQualifier = 173,
    TypeSpecifier = 174,
    SizedTypeSpecifier = 175,
    EnumSpecifier = 176,
    EnumeratorList = 177,
    StructSpecifier = 178,
    UnionSpecifier = 179,
    FieldDeclarationList = 180,
    FieldDeclarationListItem = 181,
    FieldDeclaration = 182,
    BitfieldClause = 183,
    Enumerator = 184,
    ParameterList = 185,
    ParameterDeclaration = 186,
    LabeledStatement = 187,
    ExpressionStatement = 188,
    IfStatement = 189,
    SwitchStatement = 190,
    CompoundStatement2 = 191,
    CaseStatement = 192,
    WhileStatement = 193,
    DoStatement = 194,
    ForStatement = 195,
    ReturnStatement = 196,
    BreakStatement = 197,
    ContinueStatement = 198,
    GotoStatement = 199,
    Expression = 200,
    CommaExpression = 201,
    ConditionalExpression = 202,
    AssignmentExpression = 203,
    PointerExpression = 204,
    UnaryExpression = 205,
    BinaryExpression = 206,
    UpdateExpression = 207,
    CastExpression = 208,
    TypeDescriptor = 209,
    SizeofExpression = 210,
    SubscriptExpression = 211,
    CallExpression = 212,
    ArgumentList = 213,
    FieldExpression = 214,
    CompoundLiteralExpression = 215,
    ParenthesizedExpression = 216,
    InitializerList = 217,
    InitializerPair = 218,
    SubscriptDesignator = 219,
    FieldDesignator = 220,
    CharLiteral = 221,
    ConcatenatedString = 222,
    StringLiteral = 223,
    EmptyDeclaration = 224,
    TranslationUnitRepeat1 = 225,
    PreprocParamsRepeat1 = 226,
    PreprocIfInFieldDeclarationListRepeat1 = 227,
    PreprocExpressionRepeat1 = 228,
    DeclarationRepeat1 = 229,
    TypeDefinitionRepeat1 = 230,
    TypeDefinitionRepeat2 = 231,
    DeclarationSpecifiersRepeat1 = 232,
    DeclarationSpecifiersRepeat2 = 233,
    PointerDeclaratorRepeat1 = 234,
    FunctionDeclaratorRepeat1 = 235,
    SizedTypeSpecifierRepeat1 = 236,
    EnumeratorListRepeat1 = 237,
    FieldDeclarationRepeat1 = 238,
    ParameterListRepeat1 = 239,
    SwitchBodyRepeat1 = 240,
    CaseStatementRepeat1 = 241,
    ArgumentListRepeat1 = 242,
    InitializerListRepeat1 = 243,
    InitializerPairRepeat1 = 244,
    ConcatenatedStringRepeat1 = 245,
    StringLiteralRepeat1 = 246,
    FieldIdentifier = 247,
    StatementIdentifier = 248,
    TypeIdentifier = 249,
    Error = 250,
}

impl Into<&'static str> for C {
    fn into(self) -> &'static str {
        match self {
            C::End => "end",
            C::Identifier => "identifier",
            C::Macro => "macro",
            C::LF => "\n",
            C::HASHinclude => "#include",
            C::HASHdefine => "#define",
            C::LPAREN => "(",
            C::PreprocParamsToken1 => "preproc_params_token1",
            C::DOTDOTDOT => "...",
            C::COMMA => ",",
            C::RPAREN => ")",
            C::HASHif => "#if",
            C::HASHendif => "#endif",
            C::HASHifdef => "#ifdef",
            C::HASHifndef => "#ifndef",
            C::HASHelse => "#else",
            C::HASHelif => "#elif",
            C::PreprocDirective => "preproc_directive",
            C::PreprocArg => "preproc_arg",
            C::LPAREN2 => "(",
            C::Defined => "defined",
            C::BANG => "!",
            C::TILDE => "~",
            C::DASH => "-",
            C::PLUS => "+",
            C::STAR => "*",
            C::SLASH => "/",
            C::PERCENT => "%",
            C::PIPEPIPE => "||",
            C::AMPAMP => "&&",
            C::PIPE => "|",
            C::CARET => "^",
            C::AMP => "&",
            C::EQEQ => "==",
            C::BANGEQ => "!=",
            C::GT => ">",
            C::GTEQ => ">=",
            C::LTEQ => "<=",
            C::LT => "<",
            C::LTLT => "<<",
            C::GTGT => ">>",
            C::Cdecl => "__cdecl",
            C::Clrcall => "__clrcall",
            C::Stdcall => "__stdcall",
            C::Fastcall => "__fastcall",
            C::Thiscall => "__thiscall",
            C::Vectorcall => "__vectorcall",
            C::WINAPI => "WINAPI",
            C::CALLBACK => "CALLBACK",
            C::SEMI => ";",
            C::Typedef => "typedef",
            C::Extern => "extern",
            C::Attribute => "__attribute__",
            C::LBRACE => "{",
            C::RBRACE => "}",
            C::LBRACK => "[",
            C::RBRACK => "]",
            C::EQ => "=",
            C::Static => "static",
            C::Auto => "auto",
            C::Register => "register",
            C::Inline => "inline",
            C::Const => "const",
            C::CONST => "CONST",
            C::Volatile => "volatile",
            C::Restrict => "restrict",
            C::Atomic => "_Atomic",
            C::Signed => "signed",
            C::Unsigned => "unsigned",
            C::Long => "long",
            C::Short => "short",
            C::PrimitiveType => "primitive_type",
            C::Enum => "enum",
            C::Struct => "struct",
            C::Union => "union",
            C::COLON => ":",
            C::If => "if",
            C::Else => "else",
            C::Switch => "switch",
            C::Case => "case",
            C::Default => "default",
            C::While => "while",
            C::Do => "do",
            C::For => "for",
            C::Return => "return",
            C::Break => "break",
            C::Continue => "continue",
            C::Goto => "goto",
            C::QMARK => "?",
            C::STAREQ => "*=",
            C::SLASHEQ => "/=",
            C::PERCENTEQ => "%=",
            C::PLUSEQ => "+=",
            C::DASHEQ => "-=",
            C::LTLTEQ => "<<=",
            C::GTGTEQ => ">>=",
            C::AMPEQ => "&=",
            C::CARETEQ => "^=",
            C::PIPEEQ => "|=",
            C::DASHDASH => "--",
            C::PLUSPLUS => "++",
            C::Sizeof => "sizeof",
            C::DOT => ".",
            C::DASHGT => "->",
            C::NumberLiteral => "number_literal",
            C::LSQUOTE => "L'",
            C::SQUOTE => "'",
            C::CharLiteralToken1 => "char_literal_token1",
            C::LDQUOTE => "L\"",
            C::DQUOTE => "\"",
            C::StringLiteralToken1 => "string_literal_token1",
            C::EscapeSequence => "escape_sequence",
            C::SystemLibString => "system_lib_string",
            C::True => "true",
            C::False => "false",
            C::Null => "null",
            C::Comment => "comment",
            C::TranslationUnit => "translation_unit",
            C::OnlyMacro => "only_macro",
            C::MacroCall => "macro_call",
            C::OnlyMacroCall => "only_macro_call",
            C::PreprocInclude => "preproc_include",
            C::PreprocDef => "preproc_def",
            C::PreprocFunctionDef => "preproc_function_def",
            C::PreprocParams => "preproc_params",
            C::PreprocCall => "preproc_call",
            C::PreprocIf => "preproc_if",
            C::PreprocIfdef => "preproc_ifdef",
            C::PreprocElse => "preproc_else",
            C::PreprocElif => "preproc_elif",
            C::PreprocIf2 => "preproc_if",
            C::PreprocIfdef2 => "preproc_ifdef",
            C::PreprocElse2 => "preproc_else",
            C::PreprocElif2 => "preproc_elif",
            C::LineContinuation => "line_continuation",
            C::PreprocCondition => "preproc_condition",
            C::PreprocExpression => "preproc_expression",
            C::PreprocParenthesizedExpression => "preproc_parenthesized_expression",
            C::PreprocDefined => "preproc_defined",
            C::PreprocUnaryExpression => "preproc_unary_expression",
            C::PreprocBinaryExpression => "preproc_binary_expression",
            C::CallConvention => "call_convention",
            C::FunctionDefinition => "function_definition",
            C::Declaration => "declaration",
            C::TypeDefinition => "type_definition",
            C::DeclarationSpecifiers => "_declaration_specifiers",
            C::DeclarationSpecifiersNoType => "_declaration_specifiers_no_type",
            C::LinkageSpecification => "linkage_specification",
            C::AttributeSpecifier => "attribute_specifier",
            C::DeclarationList => "declaration_list",
            C::Declarator => "_declarator",
            C::FieldDeclarator => "_field_declarator",
            C::TypeDeclarator => "_type_declarator",
            C::AbstractDeclarator => "_abstract_declarator",
            C::ParenthesizedDeclarator => "parenthesized_declarator",
            C::ParenthesizedDeclarator2 => "parenthesized_declarator",
            C::ParenthesizedDeclarator3 => "parenthesized_declarator",
            C::AbstractParenthesizedDeclarator => "abstract_parenthesized_declarator",
            C::PointerDeclarator => "pointer_declarator",
            C::PointerDeclarator2 => "pointer_declarator",
            C::PointerDeclarator3 => "pointer_declarator",
            C::AbstractPointerDeclarator => "abstract_pointer_declarator",
            C::FunctionDeclarator => "function_declarator",
            C::FunctionDeclarator2 => "function_declarator",
            C::FunctionDeclarator3 => "function_declarator",
            C::AbstractFunctionDeclarator => "abstract_function_declarator",
            C::ArrayDeclarator => "array_declarator",
            C::ArrayDeclarator2 => "array_declarator",
            C::ArrayDeclarator3 => "array_declarator",
            C::AbstractArrayDeclarator => "abstract_array_declarator",
            C::InitDeclarator => "init_declarator",
            C::CompoundStatement => "compound_statement",
            C::StorageClassSpecifier => "storage_class_specifier",
            C::TypeQualifier => "type_qualifier",
            C::TypeSpecifier => "_type_specifier",
            C::SizedTypeSpecifier => "sized_type_specifier",
            C::EnumSpecifier => "enum_specifier",
            C::EnumeratorList => "enumerator_list",
            C::StructSpecifier => "struct_specifier",
            C::UnionSpecifier => "union_specifier",
            C::FieldDeclarationList => "field_declaration_list",
            C::FieldDeclarationListItem => "_field_declaration_list_item",
            C::FieldDeclaration => "field_declaration",
            C::BitfieldClause => "bitfield_clause",
            C::Enumerator => "enumerator",
            C::ParameterList => "parameter_list",
            C::ParameterDeclaration => "parameter_declaration",
            C::LabeledStatement => "labeled_statement",
            C::ExpressionStatement => "expression_statement",
            C::IfStatement => "if_statement",
            C::SwitchStatement => "switch_statement",
            C::CompoundStatement2 => "compound_statement",
            C::CaseStatement => "case_statement",
            C::WhileStatement => "while_statement",
            C::DoStatement => "do_statement",
            C::ForStatement => "for_statement",
            C::ReturnStatement => "return_statement",
            C::BreakStatement => "break_statement",
            C::ContinueStatement => "continue_statement",
            C::GotoStatement => "goto_statement",
            C::Expression => "_expression",
            C::CommaExpression => "comma_expression",
            C::ConditionalExpression => "conditional_expression",
            C::AssignmentExpression => "assignment_expression",
            C::PointerExpression => "pointer_expression",
            C::UnaryExpression => "unary_expression",
            C::BinaryExpression => "binary_expression",
            C::UpdateExpression => "update_expression",
            C::CastExpression => "cast_expression",
            C::TypeDescriptor => "type_descriptor",
            C::SizeofExpression => "sizeof_expression",
            C::SubscriptExpression => "subscript_expression",
            C::CallExpression => "call_expression",
            C::ArgumentList => "argument_list",
            C::FieldExpression => "field_expression",
            C::CompoundLiteralExpression => "compound_literal_expression",
            C::ParenthesizedExpression => "parenthesized_expression",
            C::InitializerList => "initializer_list",
            C::InitializerPair => "initializer_pair",
            C::SubscriptDesignator => "subscript_designator",
            C::FieldDesignator => "field_designator",
            C::CharLiteral => "char_literal",
            C::ConcatenatedString => "concatenated_string",
            C::StringLiteral => "string_literal",
            C::EmptyDeclaration => "_empty_declaration",
            C::TranslationUnitRepeat1 => "translation_unit_repeat1",
            C::PreprocParamsRepeat1 => "preproc_params_repeat1",
            C::PreprocIfInFieldDeclarationListRepeat1 => {
                "preproc_if_in_field_declaration_list_repeat1"
            }
            C::PreprocExpressionRepeat1 => "preproc_expression_repeat1",
            C::DeclarationRepeat1 => "declaration_repeat1",
            C::TypeDefinitionRepeat1 => "type_definition_repeat1",
            C::TypeDefinitionRepeat2 => "type_definition_repeat2",
            C::DeclarationSpecifiersRepeat1 => "_declaration_specifiers_repeat1",
            C::DeclarationSpecifiersRepeat2 => "_declaration_specifiers_repeat2",
            C::PointerDeclaratorRepeat1 => "pointer_declarator_repeat1",
            C::FunctionDeclaratorRepeat1 => "function_declarator_repeat1",
            C::SizedTypeSpecifierRepeat1 => "sized_type_specifier_repeat1",
            C::EnumeratorListRepeat1 => "enumerator_list_repeat1",
            C::FieldDeclarationRepeat1 => "field_declaration_repeat1",
            C::ParameterListRepeat1 => "parameter_list_repeat1",
            C::SwitchBodyRepeat1 => "switch_body_repeat1",
            C::CaseStatementRepeat1 => "case_statement_repeat1",
            C::ArgumentListRepeat1 => "argument_list_repeat1",
            C::InitializerListRepeat1 => "initializer_list_repeat1",
            C::InitializerPairRepeat1 => "initializer_pair_repeat1",
            C::ConcatenatedStringRepeat1 => "concatenated_string_repeat1",
            C::StringLiteralRepeat1 => "string_literal_repeat1",
            C::FieldIdentifier => "field_identifier",
            C::StatementIdentifier => "statement_identifier",
            C::TypeIdentifier => "type_identifier",
            C::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, C> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (6, 110),
        (0, 56),
        (0, 51),
        (0, 24),
        (1, 9),
        (0, 0),
        (0, 53),
        (0, 2),
        (0, 235),
        (0, 12),
        (3, 23),
        (2, 83),
        (0, 0),
        (3, 149),
        (0, 51),
        (0, 42),
        (0, 194),
        (1, 34),
        (2, 21),
        (0, 1),
        (0, 2),
        (0, 0),
        (1, 131),
        (0, 15),
        (0, 163),
        (1, 3),
        (0, 175),
        (0, 95),
        (0, 9),
        (0, 25),
        (0, 117),
        (0, 58),
        (0, 40),
        (0, 72),
        (4, 53),
        (2, 76),
        (0, 5),
        (7, 67),
        (0, 98),
        (0, 83),
        (6, 215),
        (24, 45),
        (0, 47),
        (0, 159),
        (1, 90),
        (5, 73),
        (8, 134),
        (39, 102),
    ]),
    entries: ::phf::Slice::Static(&[
        ("false", C::False),
        ("\'", C::SQUOTE),
        ("linkage_specification", C::LinkageSpecification),
        ("preproc_binary_expression", C::PreprocBinaryExpression),
        ("compound_literal_expression", C::CompoundLiteralExpression),
        ("#endif", C::HASHendif),
        (":", C::COLON),
        ("preproc_directive", C::PreprocDirective),
        ("string_literal", C::StringLiteral),
        ("long", C::Long),
        ("_empty_declaration", C::EmptyDeclaration),
        ("_expression", C::Expression),
        ("binary_expression", C::BinaryExpression),
        ("preproc_expression_repeat1", C::PreprocExpressionRepeat1),
        ("field_expression", C::FieldExpression),
        ("compound_statement", C::CompoundStatement),
        ("default", C::Default),
        ("break", C::Break),
        (
            "abstract_function_declarator",
            C::AbstractFunctionDeclarator,
        ),
        ("<", C::LT),
        ("__attribute__", C::Attribute),
        ("init_declarator", C::InitDeclarator),
        ("__cdecl", C::Cdecl),
        ("preproc_params", C::PreprocParams),
        ("#elif", C::HASHelif),
        ("continue_statement", C::ContinueStatement),
        ("field_declaration_list", C::FieldDeclarationList),
        (
            "abstract_parenthesized_declarator",
            C::AbstractParenthesizedDeclarator,
        ),
        ("+=", C::PLUSEQ),
        ("char_literal", C::CharLiteral),
        ("struct", C::Struct),
        ("!", C::BANG),
        ("volatile", C::Volatile),
        ("escape_sequence", C::EscapeSequence),
        ("sized_type_specifier_repeat1", C::SizedTypeSpecifierRepeat1),
        ("_type_declarator", C::TypeDeclarator),
        ("struct_specifier", C::StructSpecifier),
        ("CALLBACK", C::CALLBACK),
        ("array_declarator", C::ArrayDeclarator),
        ("union", C::Union),
        ("^", C::CARET),
        ("%", C::PERCENT),
        ("__fastcall", C::Fastcall),
        ("<<=", C::LTLTEQ),
        ("_field_declaration_list_item", C::FieldDeclarationListItem),
        ("?", C::QMARK),
        ("#define", C::HASHdefine),
        ("preproc_condition", C::PreprocCondition),
        ("function_declarator", C::FunctionDeclarator),
        ("type_qualifier", C::TypeQualifier),
        ("pointer_expression", C::PointerExpression),
        ("=", C::EQ),
        ("preproc_elif", C::PreprocElif),
        ("type_definition_repeat1", C::TypeDefinitionRepeat1),
        ("macro", C::Macro),
        ("field_designator", C::FieldDesignator),
        ("for_statement", C::ForStatement),
        ("comment", C::Comment),
        ("while", C::While),
        ("case_statement_repeat1", C::CaseStatementRepeat1),
        (";", C::SEMI),
        ("conditional_expression", C::ConditionalExpression),
        ("type_definition_repeat2", C::TypeDefinitionRepeat2),
        (
            "_declaration_specifiers_repeat2",
            C::DeclarationSpecifiersRepeat2,
        ),
        ("sizeof_expression", C::SizeofExpression),
        ("field_declaration", C::FieldDeclaration),
        ("field_declaration_repeat1", C::FieldDeclarationRepeat1),
        ("statement_identifier", C::StatementIdentifier),
        ("sized_type_specifier", C::SizedTypeSpecifier),
        ("attribute_specifier", C::AttributeSpecifier),
        ("storage_class_specifier", C::StorageClassSpecifier),
        ("abstract_array_declarator", C::AbstractArrayDeclarator),
        ("char_literal_token1", C::CharLiteralToken1),
        ("defined", C::Defined),
        ("#else", C::HASHelse),
        ("_field_declarator", C::FieldDeclarator),
        ("parameter_list", C::ParameterList),
        ("initializer_list_repeat1", C::InitializerListRepeat1),
        ("||", C::PIPEPIPE),
        ("(", C::LPAREN),
        ("L\'", C::LSQUOTE),
        ("preproc_defined", C::PreprocDefined),
        ("~", C::TILDE),
        (
            "_declaration_specifiers_no_type",
            C::DeclarationSpecifiersNoType,
        ),
        ("unary_expression", C::UnaryExpression),
        ("-", C::DASH),
        ("#ifndef", C::HASHifndef),
        ("union_specifier", C::UnionSpecifier),
        ("break_statement", C::BreakStatement),
        ("function_definition", C::FunctionDefinition),
        ("WINAPI", C::WINAPI),
        (">>", C::GTGT),
        ("declaration_list", C::DeclarationList),
        (
            "preproc_parenthesized_expression",
            C::PreprocParenthesizedExpression,
        ),
        ("_abstract_declarator", C::AbstractDeclarator),
        ("type_definition", C::TypeDefinition),
        ("only_macro_call", C::OnlyMacroCall),
        ("#ifdef", C::HASHifdef),
        (
            "preproc_if_in_field_declaration_list_repeat1",
            C::PreprocIfInFieldDeclarationListRepeat1,
        ),
        ("auto", C::Auto),
        ("==", C::EQEQ),
        ("subscript_designator", C::SubscriptDesignator),
        ("preproc_ifdef", C::PreprocIfdef),
        ("type_descriptor", C::TypeDescriptor),
        ("}", C::RBRACE),
        ("preproc_call", C::PreprocCall),
        ("signed", C::Signed),
        ("preproc_arg", C::PreprocArg),
        ("case_statement", C::CaseStatement),
        ("preproc_else", C::PreprocElse),
        ("++", C::PLUSPLUS),
        ("<<", C::LTLT),
        ("assignment_expression", C::AssignmentExpression),
        (">=", C::GTEQ),
        ("while_statement", C::WhileStatement),
        ("identifier", C::Identifier),
        (".", C::DOT),
        ("...", C::DOTDOTDOT),
        ("parenthesized_expression", C::ParenthesizedExpression),
        ("parameter_declaration", C::ParameterDeclaration),
        ("abstract_pointer_declarator", C::AbstractPointerDeclarator),
        ("only_macro", C::OnlyMacro),
        ("<=", C::LTEQ),
        ("unsigned", C::Unsigned),
        ("parenthesized_declarator", C::ParenthesizedDeclarator),
        ("pointer_declarator_repeat1", C::PointerDeclaratorRepeat1),
        ("null", C::Null),
        ("inline", C::Inline),
        ("end", C::End),
        ("number_literal", C::NumberLiteral),
        ("preproc_include", C::PreprocInclude),
        ("enum", C::Enum),
        ("enumerator", C::Enumerator),
        ("switch_body_repeat1", C::SwitchBodyRepeat1),
        ("return", C::Return),
        (")", C::RPAREN),
        ("for", C::For),
        ("translation_unit_repeat1", C::TranslationUnitRepeat1),
        ("call_convention", C::CallConvention),
        ("{", C::LBRACE),
        ("system_lib_string", C::SystemLibString),
        ("__clrcall", C::Clrcall),
        ("cast_expression", C::CastExpression),
        ("labeled_statement", C::LabeledStatement),
        ("+", C::PLUS),
        ("*=", C::STAREQ),
        ("--", C::DASHDASH),
        ("true", C::True),
        ("field_identifier", C::FieldIdentifier),
        ("__thiscall", C::Thiscall),
        ("translation_unit", C::TranslationUnit),
        ("declaration", C::Declaration),
        ("initializer_pair", C::InitializerPair),
        ("sizeof", C::Sizeof),
        ("\\n", C::LF),
        ("register", C::Register),
        ("goto", C::Goto),
        ("preproc_params_token1", C::PreprocParamsToken1),
        ("typedef", C::Typedef),
        ("preproc_expression", C::PreprocExpression),
        ("update_expression", C::UpdateExpression),
        ("string_literal_token1", C::StringLiteralToken1),
        ("string_literal_repeat1", C::StringLiteralRepeat1),
        ("[", C::LBRACK),
        ("switch_statement", C::SwitchStatement),
        ("&", C::AMP),
        ("restrict", C::Restrict),
        (">", C::GT),
        ("L\\\"", C::LDQUOTE),
        ("concatenated_string", C::ConcatenatedString),
        (",", C::COMMA),
        ("_type_specifier", C::TypeSpecifier),
        ("do_statement", C::DoStatement),
        ("]", C::RBRACK),
        ("enumerator_list_repeat1", C::EnumeratorListRepeat1),
        ("|", C::PIPE),
        ("case", C::Case),
        ("preproc_def", C::PreprocDef),
        ("#if", C::HASHif),
        ("subscript_expression", C::SubscriptExpression),
        ("else", C::Else),
        ("enumerator_list", C::EnumeratorList),
        ("CONST", C::CONST),
        ("initializer_list", C::InitializerList),
        ("!=", C::BANGEQ),
        ("argument_list", C::ArgumentList),
        ("&&", C::AMPAMP),
        ("const", C::Const),
        ("type_identifier", C::TypeIdentifier),
        ("goto_statement", C::GotoStatement),
        ("switch", C::Switch),
        ("argument_list_repeat1", C::ArgumentListRepeat1),
        ("if", C::If),
        ("expression_statement", C::ExpressionStatement),
        ("do", C::Do),
        ("^=", C::CARETEQ),
        ("static", C::Static),
        ("__vectorcall", C::Vectorcall),
        ("bitfield_clause", C::BitfieldClause),
        ("enum_specifier", C::EnumSpecifier),
        ("concatenated_string_repeat1", C::ConcatenatedStringRepeat1),
        ("_declarator", C::Declarator),
        ("/", C::SLASH),
        ("pointer_declarator", C::PointerDeclarator),
        ("#include", C::HASHinclude),
        ("ERROR", C::Error),
        ("preproc_unary_expression", C::PreprocUnaryExpression),
        ("primitive_type", C::PrimitiveType),
        ("macro_call", C::MacroCall),
        ("-=", C::DASHEQ),
        (">>=", C::GTGTEQ),
        ("preproc_if", C::PreprocIf),
        ("%=", C::PERCENTEQ),
        ("_declaration_specifiers", C::DeclarationSpecifiers),
        ("function_declarator_repeat1", C::FunctionDeclaratorRepeat1),
        ("line_continuation", C::LineContinuation),
        ("/=", C::SLASHEQ),
        ("|=", C::PIPEEQ),
        ("*", C::STAR),
        ("__stdcall", C::Stdcall),
        ("call_expression", C::CallExpression),
        ("preproc_function_def", C::PreprocFunctionDef),
        ("initializer_pair_repeat1", C::InitializerPairRepeat1),
        ("parameter_list_repeat1", C::ParameterListRepeat1),
        ("->", C::DASHGT),
        ("if_statement", C::IfStatement),
        ("\\\"", C::DQUOTE),
        ("continue", C::Continue),
        ("comma_expression", C::CommaExpression),
        ("return_statement", C::ReturnStatement),
        ("&=", C::AMPEQ),
        (
            "_declaration_specifiers_repeat1",
            C::DeclarationSpecifiersRepeat1,
        ),
        ("short", C::Short),
        ("extern", C::Extern),
        ("preproc_params_repeat1", C::PreprocParamsRepeat1),
        ("declaration_repeat1", C::DeclarationRepeat1),
        ("_Atomic", C::Atomic),
    ]),
};

impl From<&str> for C {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for C {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x as u8) }
    }
}

// C == u16
impl PartialEq<u16> for C {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == C::from(*x)
    }
}

// u16 == C
impl PartialEq<C> for u16 {
    #[inline(always)]
    fn eq(&self, x: &C) -> bool {
        *x == *self
    }
}
