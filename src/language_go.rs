// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum Go {
    End = 0,
    Identifier = 1,
    LF = 2,
    SEMI = 3,
    Package = 4,
    Import = 5,
    DOT = 6,
    BlankIdentifier = 7,
    LPAREN = 8,
    RPAREN = 9,
    Const = 10,
    COMMA = 11,
    EQ = 12,
    Var = 13,
    Func = 14,
    DOTDOTDOT = 15,
    Type = 16,
    STAR = 17,
    LBRACK = 18,
    RBRACK = 19,
    Struct = 20,
    LBRACE = 21,
    RBRACE = 22,
    Interface = 23,
    Map = 24,
    Chan = 25,
    LTDASH = 26,
    COLONEQ = 27,
    PLUSPLUS = 28,
    DASHDASH = 29,
    STAREQ = 30,
    SLASHEQ = 31,
    PERCENTEQ = 32,
    LTLTEQ = 33,
    GTGTEQ = 34,
    AMPEQ = 35,
    AMPCARETEQ = 36,
    PLUSEQ = 37,
    DASHEQ = 38,
    PIPEEQ = 39,
    CARETEQ = 40,
    COLON = 41,
    Fallthrough = 42,
    Break = 43,
    Continue = 44,
    Goto = 45,
    Return = 46,
    Go = 47,
    Defer = 48,
    If = 49,
    Else = 50,
    For = 51,
    Range = 52,
    Switch = 53,
    Case = 54,
    Default = 55,
    Select = 56,
    Identifier2 = 57,
    Identifier3 = 58,
    PLUS = 59,
    DASH = 60,
    BANG = 61,
    CARET = 62,
    AMP = 63,
    SLASH = 64,
    PERCENT = 65,
    LTLT = 66,
    GTGT = 67,
    AMPCARET = 68,
    PIPE = 69,
    EQEQ = 70,
    BANGEQ = 71,
    LT = 72,
    LTEQ = 73,
    GT = 74,
    GTEQ = 75,
    AMPAMP = 76,
    PIPEPIPE = 77,
    RawStringLiteral = 78,
    DQUOTE = 79,
    InterpretedStringLiteralToken1 = 80,
    EscapeSequence = 81,
    IntLiteral = 82,
    FloatLiteral = 83,
    ImaginaryLiteral = 84,
    RuneLiteral = 85,
    Nil = 86,
    True = 87,
    False = 88,
    Comment = 89,
    SourceFile = 90,
    PackageClause = 91,
    ImportDeclaration = 92,
    ImportSpec = 93,
    Dot = 94,
    ImportSpecList = 95,
    Declaration = 96,
    ConstDeclaration = 97,
    ConstSpec = 98,
    VarDeclaration = 99,
    VarSpec = 100,
    FunctionDeclaration = 101,
    MethodDeclaration = 102,
    ParameterList = 103,
    ParameterDeclaration = 104,
    VariadicParameterDeclaration = 105,
    TypeAlias = 106,
    TypeDeclaration = 107,
    TypeSpec = 108,
    ExpressionList = 109,
    ParenthesizedType = 110,
    SimpleType = 111,
    PointerType = 112,
    ArrayType = 113,
    ImplicitLengthArrayType = 114,
    SliceType = 115,
    StructType = 116,
    FieldDeclarationList = 117,
    FieldDeclaration = 118,
    InterfaceType = 119,
    MethodSpecList = 120,
    MethodSpec = 121,
    MapType = 122,
    ChannelType = 123,
    FunctionType = 124,
    Block = 125,
    StatementList = 126,
    Statement = 127,
    EmptyStatement = 128,
    SimpleStatement = 129,
    SendStatement = 130,
    ReceiveStatement = 131,
    IncStatement = 132,
    DecStatement = 133,
    AssignmentStatement = 134,
    ShortVarDeclaration = 135,
    LabeledStatement = 136,
    LabeledStatement2 = 137,
    FallthroughStatement = 138,
    BreakStatement = 139,
    ContinueStatement = 140,
    GotoStatement = 141,
    ReturnStatement = 142,
    GoStatement = 143,
    DeferStatement = 144,
    IfStatement = 145,
    IfInitializer = 146,
    ElseClause = 147,
    ForStatement = 148,
    ForClause = 149,
    RangeClause = 150,
    ExpressionSwitchStatement = 151,
    ExpressionCaseClause = 152,
    ExpressionCase = 153,
    DefaultCase = 154,
    TypeSwitchStatement = 155,
    TypeSwitchGuard = 156,
    TypeCaseClause = 157,
    TypeCase = 158,
    SelectStatement = 159,
    CommunicationClause = 160,
    CommunicationCase = 161,
    Expression = 162,
    ParenthesizedExpression = 163,
    CallExpression = 164,
    VariadicArgument = 165,
    ArgumentList = 166,
    ArgumentList2 = 167,
    SelectorExpression = 168,
    IndexExpression = 169,
    SliceExpression = 170,
    TypeAssertionExpression = 171,
    TypeConversionExpression = 172,
    CompositeLiteral = 173,
    LiteralValue = 174,
    KeyedElement = 175,
    Element = 176,
    FuncLiteral = 177,
    UnaryExpression = 178,
    BinaryExpression = 179,
    QualifiedType = 180,
    StringLiteral = 181,
    InterpretedStringLiteral = 182,
    SourceFileRepeat1 = 183,
    ImportSpecListRepeat1 = 184,
    ConstDeclarationRepeat1 = 185,
    ConstSpecRepeat1 = 186,
    VarDeclarationRepeat1 = 187,
    ParameterListRepeat1 = 188,
    TypeDeclarationRepeat1 = 189,
    FieldNameListRepeat1 = 190,
    ExpressionListRepeat1 = 191,
    FieldDeclarationListRepeat1 = 192,
    MethodSpecListRepeat1 = 193,
    StatementListRepeat1 = 194,
    ExpressionSwitchStatementRepeat1 = 195,
    TypeSwitchStatementRepeat1 = 196,
    TypeCaseRepeat1 = 197,
    SelectStatementRepeat1 = 198,
    ArgumentListRepeat1 = 199,
    LiteralValueRepeat1 = 200,
    InterpretedStringLiteralRepeat1 = 201,
    PackageIdentifier = 202,
    FieldIdentifier = 203,
    LabelName = 204,
    TypeIdentifier = 205,
    Error = 206,
}

impl Into<&'static str> for Go {
    fn into(self) -> &'static str {
        match self {
            Go::End => "end",
            Go::Identifier => "identifier",
            Go::LF => "\n",
            Go::SEMI => ";",
            Go::Package => "package",
            Go::Import => "import",
            Go::DOT => ".",
            Go::BlankIdentifier => "blank_identifier",
            Go::LPAREN => "(",
            Go::RPAREN => ")",
            Go::Const => "const",
            Go::COMMA => ",",
            Go::EQ => "=",
            Go::Var => "var",
            Go::Func => "func",
            Go::DOTDOTDOT => "...",
            Go::Type => "type",
            Go::STAR => "*",
            Go::LBRACK => "[",
            Go::RBRACK => "]",
            Go::Struct => "struct",
            Go::LBRACE => "{",
            Go::RBRACE => "}",
            Go::Interface => "interface",
            Go::Map => "map",
            Go::Chan => "chan",
            Go::LTDASH => "<-",
            Go::COLONEQ => ":=",
            Go::PLUSPLUS => "++",
            Go::DASHDASH => "--",
            Go::STAREQ => "*=",
            Go::SLASHEQ => "/=",
            Go::PERCENTEQ => "%=",
            Go::LTLTEQ => "<<=",
            Go::GTGTEQ => ">>=",
            Go::AMPEQ => "&=",
            Go::AMPCARETEQ => "&^=",
            Go::PLUSEQ => "+=",
            Go::DASHEQ => "-=",
            Go::PIPEEQ => "|=",
            Go::CARETEQ => "^=",
            Go::COLON => ":",
            Go::Fallthrough => "fallthrough",
            Go::Break => "break",
            Go::Continue => "continue",
            Go::Goto => "goto",
            Go::Return => "return",
            Go::Go => "go",
            Go::Defer => "defer",
            Go::If => "if",
            Go::Else => "else",
            Go::For => "for",
            Go::Range => "range",
            Go::Switch => "switch",
            Go::Case => "case",
            Go::Default => "default",
            Go::Select => "select",
            Go::Identifier2 => "identifier",
            Go::Identifier3 => "identifier",
            Go::PLUS => "+",
            Go::DASH => "-",
            Go::BANG => "!",
            Go::CARET => "^",
            Go::AMP => "&",
            Go::SLASH => "/",
            Go::PERCENT => "%",
            Go::LTLT => "<<",
            Go::GTGT => ">>",
            Go::AMPCARET => "&^",
            Go::PIPE => "|",
            Go::EQEQ => "==",
            Go::BANGEQ => "!=",
            Go::LT => "<",
            Go::LTEQ => "<=",
            Go::GT => ">",
            Go::GTEQ => ">=",
            Go::AMPAMP => "&&",
            Go::PIPEPIPE => "||",
            Go::RawStringLiteral => "raw_string_literal",
            Go::DQUOTE => "\"",
            Go::InterpretedStringLiteralToken1 => "interpreted_string_literal_token1",
            Go::EscapeSequence => "escape_sequence",
            Go::IntLiteral => "int_literal",
            Go::FloatLiteral => "float_literal",
            Go::ImaginaryLiteral => "imaginary_literal",
            Go::RuneLiteral => "rune_literal",
            Go::Nil => "nil",
            Go::True => "true",
            Go::False => "false",
            Go::Comment => "comment",
            Go::SourceFile => "source_file",
            Go::PackageClause => "package_clause",
            Go::ImportDeclaration => "import_declaration",
            Go::ImportSpec => "import_spec",
            Go::Dot => "dot",
            Go::ImportSpecList => "import_spec_list",
            Go::Declaration => "_declaration",
            Go::ConstDeclaration => "const_declaration",
            Go::ConstSpec => "const_spec",
            Go::VarDeclaration => "var_declaration",
            Go::VarSpec => "var_spec",
            Go::FunctionDeclaration => "function_declaration",
            Go::MethodDeclaration => "method_declaration",
            Go::ParameterList => "parameter_list",
            Go::ParameterDeclaration => "parameter_declaration",
            Go::VariadicParameterDeclaration => "variadic_parameter_declaration",
            Go::TypeAlias => "type_alias",
            Go::TypeDeclaration => "type_declaration",
            Go::TypeSpec => "type_spec",
            Go::ExpressionList => "expression_list",
            Go::ParenthesizedType => "parenthesized_type",
            Go::SimpleType => "_simple_type",
            Go::PointerType => "pointer_type",
            Go::ArrayType => "array_type",
            Go::ImplicitLengthArrayType => "implicit_length_array_type",
            Go::SliceType => "slice_type",
            Go::StructType => "struct_type",
            Go::FieldDeclarationList => "field_declaration_list",
            Go::FieldDeclaration => "field_declaration",
            Go::InterfaceType => "interface_type",
            Go::MethodSpecList => "method_spec_list",
            Go::MethodSpec => "method_spec",
            Go::MapType => "map_type",
            Go::ChannelType => "channel_type",
            Go::FunctionType => "function_type",
            Go::Block => "block",
            Go::StatementList => "_statement_list",
            Go::Statement => "_statement",
            Go::EmptyStatement => "empty_statement",
            Go::SimpleStatement => "_simple_statement",
            Go::SendStatement => "send_statement",
            Go::ReceiveStatement => "receive_statement",
            Go::IncStatement => "inc_statement",
            Go::DecStatement => "dec_statement",
            Go::AssignmentStatement => "assignment_statement",
            Go::ShortVarDeclaration => "short_var_declaration",
            Go::LabeledStatement => "labeled_statement",
            Go::LabeledStatement2 => "labeled_statement",
            Go::FallthroughStatement => "fallthrough_statement",
            Go::BreakStatement => "break_statement",
            Go::ContinueStatement => "continue_statement",
            Go::GotoStatement => "goto_statement",
            Go::ReturnStatement => "return_statement",
            Go::GoStatement => "go_statement",
            Go::DeferStatement => "defer_statement",
            Go::IfStatement => "if_statement",
            Go::IfInitializer => "if_initializer",
            Go::ElseClause => "else_clause",
            Go::ForStatement => "for_statement",
            Go::ForClause => "for_clause",
            Go::RangeClause => "range_clause",
            Go::ExpressionSwitchStatement => "expression_switch_statement",
            Go::ExpressionCaseClause => "expression_case_clause",
            Go::ExpressionCase => "expression_case",
            Go::DefaultCase => "default_case",
            Go::TypeSwitchStatement => "type_switch_statement",
            Go::TypeSwitchGuard => "type_switch_guard",
            Go::TypeCaseClause => "type_case_clause",
            Go::TypeCase => "type_case",
            Go::SelectStatement => "select_statement",
            Go::CommunicationClause => "communication_clause",
            Go::CommunicationCase => "communication_case",
            Go::Expression => "_expression",
            Go::ParenthesizedExpression => "parenthesized_expression",
            Go::CallExpression => "call_expression",
            Go::VariadicArgument => "variadic_argument",
            Go::ArgumentList => "argument_list",
            Go::ArgumentList2 => "argument_list",
            Go::SelectorExpression => "selector_expression",
            Go::IndexExpression => "index_expression",
            Go::SliceExpression => "slice_expression",
            Go::TypeAssertionExpression => "type_assertion_expression",
            Go::TypeConversionExpression => "type_conversion_expression",
            Go::CompositeLiteral => "composite_literal",
            Go::LiteralValue => "literal_value",
            Go::KeyedElement => "keyed_element",
            Go::Element => "element",
            Go::FuncLiteral => "func_literal",
            Go::UnaryExpression => "unary_expression",
            Go::BinaryExpression => "binary_expression",
            Go::QualifiedType => "qualified_type",
            Go::StringLiteral => "_string_literal",
            Go::InterpretedStringLiteral => "interpreted_string_literal",
            Go::SourceFileRepeat1 => "source_file_repeat1",
            Go::ImportSpecListRepeat1 => "import_spec_list_repeat1",
            Go::ConstDeclarationRepeat1 => "const_declaration_repeat1",
            Go::ConstSpecRepeat1 => "const_spec_repeat1",
            Go::VarDeclarationRepeat1 => "var_declaration_repeat1",
            Go::ParameterListRepeat1 => "parameter_list_repeat1",
            Go::TypeDeclarationRepeat1 => "type_declaration_repeat1",
            Go::FieldNameListRepeat1 => "field_name_list_repeat1",
            Go::ExpressionListRepeat1 => "expression_list_repeat1",
            Go::FieldDeclarationListRepeat1 => "field_declaration_list_repeat1",
            Go::MethodSpecListRepeat1 => "method_spec_list_repeat1",
            Go::StatementListRepeat1 => "_statement_list_repeat1",
            Go::ExpressionSwitchStatementRepeat1 => "expression_switch_statement_repeat1",
            Go::TypeSwitchStatementRepeat1 => "type_switch_statement_repeat1",
            Go::TypeCaseRepeat1 => "type_case_repeat1",
            Go::SelectStatementRepeat1 => "select_statement_repeat1",
            Go::ArgumentListRepeat1 => "argument_list_repeat1",
            Go::LiteralValueRepeat1 => "literal_value_repeat1",
            Go::InterpretedStringLiteralRepeat1 => "interpreted_string_literal_repeat1",
            Go::PackageIdentifier => "package_identifier",
            Go::FieldIdentifier => "field_identifier",
            Go::LabelName => "label_name",
            Go::TypeIdentifier => "type_identifier",
            Go::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Go> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 5),
        (0, 7),
        (6, 40),
        (1, 82),
        (1, 73),
        (0, 15),
        (0, 166),
        (0, 1),
        (0, 12),
        (0, 0),
        (3, 116),
        (5, 10),
        (3, 20),
        (0, 0),
        (0, 1),
        (0, 2),
        (1, 4),
        (32, 167),
        (1, 42),
        (0, 63),
        (0, 47),
        (0, 1),
        (0, 5),
        (0, 19),
        (0, 0),
        (0, 50),
        (0, 4),
        (4, 100),
        (0, 2),
        (0, 58),
        (0, 25),
        (0, 9),
        (0, 1),
        (12, 147),
        (4, 88),
        (3, 89),
        (13, 110),
        (1, 146),
        (30, 106),
        (34, 29),
        (0, 3),
    ]),
    entries: ::phf::Slice::Static(&[
        ("struct_type", Go::StructType),
        ("[", Go::LBRACK),
        ("expression_list", Go::ExpressionList),
        ("type_declaration_repeat1", Go::TypeDeclarationRepeat1),
        ("_string_literal", Go::StringLiteral),
        ("default", Go::Default),
        ("for", Go::For),
        ("&^", Go::AMPCARET),
        ("imaginary_literal", Go::ImaginaryLiteral),
        ("goto", Go::Goto),
        ("defer", Go::Defer),
        ("index_expression", Go::IndexExpression),
        ("implicit_length_array_type", Go::ImplicitLengthArrayType),
        ("element", Go::Element),
        ("composite_literal", Go::CompositeLiteral),
        ("channel_type", Go::ChannelType),
        ("*", Go::STAR),
        ("--", Go::DASHDASH),
        ("&", Go::AMP),
        ("break", Go::Break),
        ("!=", Go::BANGEQ),
        ("expression_switch_statement", Go::ExpressionSwitchStatement),
        ("parameter_list_repeat1", Go::ParameterListRepeat1),
        ("<=", Go::LTEQ),
        ("^=", Go::CARETEQ),
        ("parameter_list", Go::ParameterList),
        ("const_declaration", Go::ConstDeclaration),
        ("range_clause", Go::RangeClause),
        ("send_statement", Go::SendStatement),
        ("break_statement", Go::BreakStatement),
        ("array_type", Go::ArrayType),
        ("fallthrough", Go::Fallthrough),
        ("var_declaration_repeat1", Go::VarDeclarationRepeat1),
        ("parenthesized_type", Go::ParenthesizedType),
        ("float_literal", Go::FloatLiteral),
        ("labeled_statement", Go::LabeledStatement),
        ("fallthrough_statement", Go::FallthroughStatement),
        ("import_spec_list_repeat1", Go::ImportSpecListRepeat1),
        ("package", Go::Package),
        ("interface_type", Go::InterfaceType),
        ("parenthesized_expression", Go::ParenthesizedExpression),
        ("method_spec_list", Go::MethodSpecList),
        ("import_spec_list", Go::ImportSpecList),
        ("var_spec", Go::VarSpec),
        ("case", Go::Case),
        ("}", Go::RBRACE),
        ("slice_expression", Go::SliceExpression),
        ("comment", Go::Comment),
        ("*=", Go::STAREQ),
        ("binary_expression", Go::BinaryExpression),
        ("block", Go::Block),
        ("type_alias", Go::TypeAlias),
        ("interpreted_string_literal", Go::InterpretedStringLiteral),
        ("const", Go::Const),
        ("+=", Go::PLUSEQ),
        ("assignment_statement", Go::AssignmentStatement),
        ("_simple_statement", Go::SimpleStatement),
        (".", Go::DOT),
        ("function_declaration", Go::FunctionDeclaration),
        ("&&", Go::AMPAMP),
        ("escape_sequence", Go::EscapeSequence),
        ("/", Go::SLASH),
        ("|", Go::PIPE),
        (
            "type_switch_statement_repeat1",
            Go::TypeSwitchStatementRepeat1,
        ),
        ("<<=", Go::LTLTEQ),
        ("const_declaration_repeat1", Go::ConstDeclarationRepeat1),
        ("true", Go::True),
        ("(", Go::LPAREN),
        ("_statement_list", Go::StatementList),
        ("for_statement", Go::ForStatement),
        ("keyed_element", Go::KeyedElement),
        ("label_name", Go::LabelName),
        ("expression_case", Go::ExpressionCase),
        ("{", Go::LBRACE),
        ("communication_clause", Go::CommunicationClause),
        ("_statement_list_repeat1", Go::StatementListRepeat1),
        ("expression_list_repeat1", Go::ExpressionListRepeat1),
        ("ERROR", Go::Error),
        ("type_case", Go::TypeCase),
        ("short_var_declaration", Go::ShortVarDeclaration),
        ("literal_value", Go::LiteralValue),
        ("-=", Go::DASHEQ),
        ("parameter_declaration", Go::ParameterDeclaration),
        (";", Go::SEMI),
        ("_declaration", Go::Declaration),
        (
            "interpreted_string_literal_token1",
            Go::InterpretedStringLiteralToken1,
        ),
        ("func", Go::Func),
        ("if", Go::If),
        ("continue_statement", Go::ContinueStatement),
        ("+", Go::PLUS),
        ("var_declaration", Go::VarDeclaration),
        (
            "field_declaration_list_repeat1",
            Go::FieldDeclarationListRepeat1,
        ),
        ("]", Go::RBRACK),
        ("_expression", Go::Expression),
        ("import_spec", Go::ImportSpec),
        ("map_type", Go::MapType),
        ("\\\"", Go::DQUOTE),
        ("&=", Go::AMPEQ),
        (
            "expression_switch_statement_repeat1",
            Go::ExpressionSwitchStatementRepeat1,
        ),
        (">>=", Go::GTGTEQ),
        ("raw_string_literal", Go::RawStringLiteral),
        ("...", Go::DOTDOTDOT),
        ("<<", Go::LTLT),
        ("unary_expression", Go::UnaryExpression),
        ("!", Go::BANG),
        ("else_clause", Go::ElseClause),
        ("identifier", Go::Identifier),
        ("source_file", Go::SourceFile),
        ("slice_type", Go::SliceType),
        ("type", Go::Type),
        ("field_name_list_repeat1", Go::FieldNameListRepeat1),
        ("end", Go::End),
        ("method_spec_list_repeat1", Go::MethodSpecListRepeat1),
        ("method_spec", Go::MethodSpec),
        ("for_clause", Go::ForClause),
        ("return", Go::Return),
        ("import", Go::Import),
        ("go", Go::Go),
        ("inc_statement", Go::IncStatement),
        (",", Go::COMMA),
        ("source_file_repeat1", Go::SourceFileRepeat1),
        (":", Go::COLON),
        ("||", Go::PIPEPIPE),
        (">=", Go::GTEQ),
        ("package_identifier", Go::PackageIdentifier),
        ("go_statement", Go::GoStatement),
        (">>", Go::GTGT),
        ("_simple_type", Go::SimpleType),
        ("field_declaration_list", Go::FieldDeclarationList),
        ("==", Go::EQEQ),
        ("empty_statement", Go::EmptyStatement),
        ("range", Go::Range),
        ("qualified_type", Go::QualifiedType),
        ("chan", Go::Chan),
        ("false", Go::False),
        ("const_spec_repeat1", Go::ConstSpecRepeat1),
        ("^", Go::CARET),
        ("literal_value_repeat1", Go::LiteralValueRepeat1),
        ("select_statement_repeat1", Go::SelectStatementRepeat1),
        ("++", Go::PLUSPLUS),
        ("select_statement", Go::SelectStatement),
        (
            "interpreted_string_literal_repeat1",
            Go::InterpretedStringLiteralRepeat1,
        ),
        ("receive_statement", Go::ReceiveStatement),
        (
            "variadic_parameter_declaration",
            Go::VariadicParameterDeclaration,
        ),
        ("var", Go::Var),
        (">", Go::GT),
        ("default_case", Go::DefaultCase),
        ("import_declaration", Go::ImportDeclaration),
        ("func_literal", Go::FuncLiteral),
        ("<", Go::LT),
        ("if_statement", Go::IfStatement),
        ("expression_case_clause", Go::ExpressionCaseClause),
        ("type_assertion_expression", Go::TypeAssertionExpression),
        ("int_literal", Go::IntLiteral),
        ("type_case_repeat1", Go::TypeCaseRepeat1),
        ("struct", Go::Struct),
        ("selector_expression", Go::SelectorExpression),
        ("\\n", Go::LF),
        ("|=", Go::PIPEEQ),
        ("pointer_type", Go::PointerType),
        ("rune_literal", Go::RuneLiteral),
        ("if_initializer", Go::IfInitializer),
        ("argument_list_repeat1", Go::ArgumentListRepeat1),
        ("else", Go::Else),
        ("type_identifier", Go::TypeIdentifier),
        ("field_identifier", Go::FieldIdentifier),
        ("<-", Go::LTDASH),
        ("select", Go::Select),
        ("goto_statement", Go::GotoStatement),
        ("communication_case", Go::CommunicationCase),
        ("const_spec", Go::ConstSpec),
        ("map", Go::Map),
        ("%=", Go::PERCENTEQ),
        ("type_switch_statement", Go::TypeSwitchStatement),
        ("continue", Go::Continue),
        ("argument_list", Go::ArgumentList),
        ("nil", Go::Nil),
        ("dec_statement", Go::DecStatement),
        ("/=", Go::SLASHEQ),
        ("defer_statement", Go::DeferStatement),
        ("type_case_clause", Go::TypeCaseClause),
        ("%", Go::PERCENT),
        ("=", Go::EQ),
        ("switch", Go::Switch),
        ("type_declaration", Go::TypeDeclaration),
        ("field_declaration", Go::FieldDeclaration),
        ("_statement", Go::Statement),
        ("-", Go::DASH),
        ("type_spec", Go::TypeSpec),
        ("return_statement", Go::ReturnStatement),
        (")", Go::RPAREN),
        ("blank_identifier", Go::BlankIdentifier),
        ("type_conversion_expression", Go::TypeConversionExpression),
        (":=", Go::COLONEQ),
        ("&^=", Go::AMPCARETEQ),
        ("function_type", Go::FunctionType),
        ("variadic_argument", Go::VariadicArgument),
        ("method_declaration", Go::MethodDeclaration),
        ("interface", Go::Interface),
        ("type_switch_guard", Go::TypeSwitchGuard),
        ("call_expression", Go::CallExpression),
        ("package_clause", Go::PackageClause),
        ("dot", Go::Dot),
    ]),
};

impl From<&str> for Go {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Go {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x as u8) }
    }
}

// Go == u16
impl PartialEq<u16> for Go {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Go::from(*x)
    }
}

// u16 == Go
impl PartialEq<Go> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Go) -> bool {
        *x == *self
    }
}
