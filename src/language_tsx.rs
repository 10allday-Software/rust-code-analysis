// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum Tsx {
    End = 0,
    Identifier = 1,
    HashBangLine = 2,
    Export = 3,
    STAR = 4,
    Default = 5,
    EQ = 6,
    As = 7,
    Namespace = 8,
    LBRACE = 9,
    COMMA = 10,
    RBRACE = 11,
    Type = 12,
    Typeof = 13,
    Import = 14,
    From = 15,
    Var = 16,
    Let = 17,
    Const = 18,
    If = 19,
    Else = 20,
    Switch = 21,
    For = 22,
    LPAREN = 23,
    RPAREN = 24,
    In = 25,
    Await = 26,
    Of = 27,
    While = 28,
    Do = 29,
    Try = 30,
    With = 31,
    Break = 32,
    Continue = 33,
    Debugger = 34,
    Return = 35,
    Throw = 36,
    SEMI = 37,
    COLON = 38,
    Case = 39,
    Catch = 40,
    Finally = 41,
    Yield = 42,
    LBRACK = 43,
    RBRACK = 44,
    LT = 45,
    GT = 46,
    SLASH = 47,
    JsxText = 48,
    Identifier2 = 49,
    DOT = 50,
    Class = 51,
    Async = 52,
    Function = 53,
    EQGT = 54,
    New = 55,
    PLUSEQ = 56,
    DASHEQ = 57,
    STAREQ = 58,
    SLASHEQ = 59,
    PERCENTEQ = 60,
    CARETEQ = 61,
    AMPEQ = 62,
    PIPEEQ = 63,
    GTGTEQ = 64,
    GTGTGTEQ = 65,
    LTLTEQ = 66,
    STARSTAREQ = 67,
    DOTDOTDOT = 68,
    QMARK = 69,
    AMPAMP = 70,
    PIPEPIPE = 71,
    GTGT = 72,
    GTGTGT = 73,
    LTLT = 74,
    AMP = 75,
    CARET = 76,
    PIPE = 77,
    PLUS = 78,
    DASH = 79,
    PERCENT = 80,
    STARSTAR = 81,
    LTEQ = 82,
    EQEQ = 83,
    EQEQEQ = 84,
    BANGEQ = 85,
    BANGEQEQ = 86,
    GTEQ = 87,
    Instanceof = 88,
    BANG = 89,
    TILDE = 90,
    Void = 91,
    Delete = 92,
    PLUSPLUS = 93,
    DASHDASH = 94,
    DQUOTE = 95,
    StringToken1 = 96,
    SQUOTE = 97,
    StringToken2 = 98,
    EscapeSequence = 99,
    Comment = 100,
    BQUOTE = 101,
    DOLLARLBRACE = 102,
    SLASH2 = 103,
    RegexPattern = 104,
    RegexFlags = 105,
    Number = 106,
    Target = 107,
    This = 108,
    Super = 109,
    True = 110,
    False = 111,
    Null = 112,
    Undefined = 113,
    AT = 114,
    Static = 115,
    Abstract = 116,
    Get = 117,
    Set = 118,
    Declare = 119,
    Public = 120,
    Private = 121,
    Protected = 122,
    Module = 123,
    Any = 124,
    Number2 = 125,
    Boolean = 126,
    String = 127,
    Symbol = 128,
    Require = 129,
    Implements = 130,
    Global = 131,
    Interface = 132,
    Extends = 133,
    Enum = 134,
    Readonly = 135,
    Is = 136,
    Keyof = 137,
    LBRACEPIPE = 138,
    PIPERBRACE = 139,
    AutomaticSemicolon = 140,
    TemplateChars = 141,
    Program = 142,
    ExportStatement = 143,
    ExportClause = 144,
    ImportExportSpecifier = 145,
    Declaration = 146,
    ImportStatement = 147,
    ImportClause = 148,
    FromClause = 149,
    NamespaceImport = 150,
    NamedImports = 151,
    ExpressionStatement = 152,
    VariableDeclaration = 153,
    LexicalDeclaration = 154,
    VariableDeclarator = 155,
    StatementBlock = 156,
    IfStatement = 157,
    SwitchStatement = 158,
    ForStatement = 159,
    ForInStatement = 160,
    ForOfStatement = 161,
    WhileStatement = 162,
    DoStatement = 163,
    TryStatement = 164,
    WithStatement = 165,
    BreakStatement = 166,
    ContinueStatement = 167,
    DebuggerStatement = 168,
    ReturnStatement = 169,
    ThrowStatement = 170,
    EmptyStatement = 171,
    LabeledStatement = 172,
    SwitchBody = 173,
    SwitchCase = 174,
    SwitchDefault = 175,
    CatchClause = 176,
    FinallyClause = 177,
    ParenthesizedExpression = 178,
    Expression = 179,
    YieldExpression = 180,
    Object = 181,
    AssignmentPattern = 182,
    Array = 183,
    JsxElement = 184,
    JsxFragment = 185,
    JsxExpression = 186,
    JsxOpeningElement = 187,
    NestedIdentifier = 188,
    JsxNamespaceName = 189,
    JsxClosingElement = 190,
    JsxSelfClosingElement = 191,
    JsxAttribute = 192,
    AnonymousClass = 193,
    Class2 = 194,
    ClassHeritage = 195,
    Function2 = 196,
    ArrowFunction = 197,
    GeneratorFunction = 198,
    CallExpression = 199,
    NewExpression = 200,
    AwaitExpression = 201,
    MemberExpression = 202,
    SubscriptExpression = 203,
    AssignmentExpression = 204,
    AugmentedAssignmentExpression = 205,
    Initializer = 206,
    SpreadElement = 207,
    TernaryExpression = 208,
    BinaryExpression = 209,
    UnaryExpression = 210,
    UpdateExpression = 211,
    SequenceExpression = 212,
    String2 = 213,
    TemplateString = 214,
    TemplateSubstitution = 215,
    Regex = 216,
    MetaProperty = 217,
    This2 = 218,
    Arguments = 219,
    Decorator = 220,
    IdentifierReference = 221,
    MemberExpression2 = 222,
    CallExpression2 = 223,
    ClassBody = 224,
    PublicFieldDefinition = 225,
    FormalParameters = 226,
    RestParameter = 227,
    MethodDefinition = 228,
    Pair = 229,
    PropertyName = 230,
    ComputedPropertyName = 231,
    NonNullExpression = 232,
    MethodSignature = 233,
    AbstractMethodSignature = 234,
    FunctionSignature = 235,
    AsExpression = 236,
    ImportRequireClause = 237,
    ImplementsClause = 238,
    AmbientDeclaration = 239,
    AbstractClass = 240,
    Module2 = 241,
    InternalModule = 242,
    Module3 = 243,
    ImportAlias = 244,
    NestedTypeIdentifier = 245,
    InterfaceDeclaration = 246,
    TypeReference = 247,
    ExtendsClause = 248,
    EnumDeclaration = 249,
    EnumBody = 250,
    EnumMember = 251,
    EnumAssignment = 252,
    TypeAliasDeclaration = 253,
    AccessibilityModifier = 254,
    RequiredParameter = 255,
    OptionalParameter = 256,
    TypeAnnotation = 257,
    Type2 = 258,
    ConstructorType = 259,
    PrimaryType = 260,
    GenericType = 261,
    TypePredicate = 262,
    TypeQuery = 263,
    IndexTypeQuery = 264,
    LookupType = 265,
    MappedType = 266,
    LiteralType = 267,
    UnaryExpression2 = 268,
    ExistentialType = 269,
    ThisType = 270,
    FlowMaybeType = 271,
    ParenthesizedType = 272,
    PredefinedType = 273,
    TypeArguments = 274,
    ObjectType = 275,
    PropertySignature = 276,
    CallSignature = 277,
    TypeParameters = 278,
    TypeParameter = 279,
    DefaultType = 280,
    Constraint = 281,
    ConstructSignature = 282,
    IndexSignature = 283,
    ArrayType = 284,
    TupleType = 285,
    UnionType = 286,
    IntersectionType = 287,
    FunctionType = 288,
    ProgramRepeat1 = 289,
    ExportStatementRepeat1 = 290,
    ExportClauseRepeat1 = 291,
    NamedImportsRepeat1 = 292,
    VariableDeclarationRepeat1 = 293,
    SwitchBodyRepeat1 = 294,
    ObjectRepeat1 = 295,
    ArrayRepeat1 = 296,
    JsxElementRepeat1 = 297,
    JsxOpeningElementRepeat1 = 298,
    StringRepeat1 = 299,
    StringRepeat2 = 300,
    TemplateStringRepeat1 = 301,
    ClassBodyRepeat1 = 302,
    FormalParametersRepeat1 = 303,
    ImplementsClauseRepeat1 = 304,
    ExtendsClauseRepeat1 = 305,
    EnumBodyRepeat1 = 306,
    ObjectTypeRepeat1 = 307,
    TypeParametersRepeat1 = 308,
    TypeIdentifier = 309,
    ArrayPattern = 310,
    ShorthandPropertyIdentifier = 311,
    PropertyIdentifier = 312,
    ObjectPattern = 313,
    ImportSpecifier = 314,
    ExportSpecifier = 315,
    StatementIdentifier = 316,
    Error = 317,
}

impl Into<&'static str> for Tsx {
    fn into(self) -> &'static str {
        match self {
            Tsx::End => "end",
            Tsx::Identifier => "identifier",
            Tsx::HashBangLine => "hash_bang_line",
            Tsx::Export => "export",
            Tsx::STAR => "*",
            Tsx::Default => "default",
            Tsx::EQ => "=",
            Tsx::As => "as",
            Tsx::Namespace => "namespace",
            Tsx::LBRACE => "{",
            Tsx::COMMA => ",",
            Tsx::RBRACE => "}",
            Tsx::Type => "type",
            Tsx::Typeof => "typeof",
            Tsx::Import => "import",
            Tsx::From => "from",
            Tsx::Var => "var",
            Tsx::Let => "let",
            Tsx::Const => "const",
            Tsx::If => "if",
            Tsx::Else => "else",
            Tsx::Switch => "switch",
            Tsx::For => "for",
            Tsx::LPAREN => "(",
            Tsx::RPAREN => ")",
            Tsx::In => "in",
            Tsx::Await => "await",
            Tsx::Of => "of",
            Tsx::While => "while",
            Tsx::Do => "do",
            Tsx::Try => "try",
            Tsx::With => "with",
            Tsx::Break => "break",
            Tsx::Continue => "continue",
            Tsx::Debugger => "debugger",
            Tsx::Return => "return",
            Tsx::Throw => "throw",
            Tsx::SEMI => ";",
            Tsx::COLON => ":",
            Tsx::Case => "case",
            Tsx::Catch => "catch",
            Tsx::Finally => "finally",
            Tsx::Yield => "yield",
            Tsx::LBRACK => "[",
            Tsx::RBRACK => "]",
            Tsx::LT => "<",
            Tsx::GT => ">",
            Tsx::SLASH => "/",
            Tsx::JsxText => "jsx_text",
            Tsx::Identifier2 => "identifier",
            Tsx::DOT => ".",
            Tsx::Class => "class",
            Tsx::Async => "async",
            Tsx::Function => "function",
            Tsx::EQGT => "=>",
            Tsx::New => "new",
            Tsx::PLUSEQ => "+=",
            Tsx::DASHEQ => "-=",
            Tsx::STAREQ => "*=",
            Tsx::SLASHEQ => "/=",
            Tsx::PERCENTEQ => "%=",
            Tsx::CARETEQ => "^=",
            Tsx::AMPEQ => "&=",
            Tsx::PIPEEQ => "|=",
            Tsx::GTGTEQ => ">>=",
            Tsx::GTGTGTEQ => ">>>=",
            Tsx::LTLTEQ => "<<=",
            Tsx::STARSTAREQ => "**=",
            Tsx::DOTDOTDOT => "...",
            Tsx::QMARK => "?",
            Tsx::AMPAMP => "&&",
            Tsx::PIPEPIPE => "||",
            Tsx::GTGT => ">>",
            Tsx::GTGTGT => ">>>",
            Tsx::LTLT => "<<",
            Tsx::AMP => "&",
            Tsx::CARET => "^",
            Tsx::PIPE => "|",
            Tsx::PLUS => "+",
            Tsx::DASH => "-",
            Tsx::PERCENT => "%",
            Tsx::STARSTAR => "**",
            Tsx::LTEQ => "<=",
            Tsx::EQEQ => "==",
            Tsx::EQEQEQ => "===",
            Tsx::BANGEQ => "!=",
            Tsx::BANGEQEQ => "!==",
            Tsx::GTEQ => ">=",
            Tsx::Instanceof => "instanceof",
            Tsx::BANG => "!",
            Tsx::TILDE => "~",
            Tsx::Void => "void",
            Tsx::Delete => "delete",
            Tsx::PLUSPLUS => "++",
            Tsx::DASHDASH => "--",
            Tsx::DQUOTE => "\"",
            Tsx::StringToken1 => "string_token1",
            Tsx::SQUOTE => "'",
            Tsx::StringToken2 => "string_token2",
            Tsx::EscapeSequence => "escape_sequence",
            Tsx::Comment => "comment",
            Tsx::BQUOTE => "`",
            Tsx::DOLLARLBRACE => "${",
            Tsx::SLASH2 => "/",
            Tsx::RegexPattern => "regex_pattern",
            Tsx::RegexFlags => "regex_flags",
            Tsx::Number => "number",
            Tsx::Target => "target",
            Tsx::This => "this",
            Tsx::Super => "super",
            Tsx::True => "true",
            Tsx::False => "false",
            Tsx::Null => "null",
            Tsx::Undefined => "undefined",
            Tsx::AT => "@",
            Tsx::Static => "static",
            Tsx::Abstract => "abstract",
            Tsx::Get => "get",
            Tsx::Set => "set",
            Tsx::Declare => "declare",
            Tsx::Public => "public",
            Tsx::Private => "private",
            Tsx::Protected => "protected",
            Tsx::Module => "module",
            Tsx::Any => "any",
            Tsx::Number2 => "number",
            Tsx::Boolean => "boolean",
            Tsx::String => "string",
            Tsx::Symbol => "symbol",
            Tsx::Require => "require",
            Tsx::Implements => "implements",
            Tsx::Global => "global",
            Tsx::Interface => "interface",
            Tsx::Extends => "extends",
            Tsx::Enum => "enum",
            Tsx::Readonly => "readonly",
            Tsx::Is => "is",
            Tsx::Keyof => "keyof",
            Tsx::LBRACEPIPE => "{|",
            Tsx::PIPERBRACE => "|}",
            Tsx::AutomaticSemicolon => "_automatic_semicolon",
            Tsx::TemplateChars => "_template_chars",
            Tsx::Program => "program",
            Tsx::ExportStatement => "export_statement",
            Tsx::ExportClause => "export_clause",
            Tsx::ImportExportSpecifier => "_import_export_specifier",
            Tsx::Declaration => "_declaration",
            Tsx::ImportStatement => "import_statement",
            Tsx::ImportClause => "import_clause",
            Tsx::FromClause => "_from_clause",
            Tsx::NamespaceImport => "namespace_import",
            Tsx::NamedImports => "named_imports",
            Tsx::ExpressionStatement => "expression_statement",
            Tsx::VariableDeclaration => "variable_declaration",
            Tsx::LexicalDeclaration => "lexical_declaration",
            Tsx::VariableDeclarator => "variable_declarator",
            Tsx::StatementBlock => "statement_block",
            Tsx::IfStatement => "if_statement",
            Tsx::SwitchStatement => "switch_statement",
            Tsx::ForStatement => "for_statement",
            Tsx::ForInStatement => "for_in_statement",
            Tsx::ForOfStatement => "for_of_statement",
            Tsx::WhileStatement => "while_statement",
            Tsx::DoStatement => "do_statement",
            Tsx::TryStatement => "try_statement",
            Tsx::WithStatement => "with_statement",
            Tsx::BreakStatement => "break_statement",
            Tsx::ContinueStatement => "continue_statement",
            Tsx::DebuggerStatement => "debugger_statement",
            Tsx::ReturnStatement => "return_statement",
            Tsx::ThrowStatement => "throw_statement",
            Tsx::EmptyStatement => "empty_statement",
            Tsx::LabeledStatement => "labeled_statement",
            Tsx::SwitchBody => "switch_body",
            Tsx::SwitchCase => "switch_case",
            Tsx::SwitchDefault => "switch_default",
            Tsx::CatchClause => "catch_clause",
            Tsx::FinallyClause => "finally_clause",
            Tsx::ParenthesizedExpression => "parenthesized_expression",
            Tsx::Expression => "_expression",
            Tsx::YieldExpression => "yield_expression",
            Tsx::Object => "object",
            Tsx::AssignmentPattern => "assignment_pattern",
            Tsx::Array => "array",
            Tsx::JsxElement => "jsx_element",
            Tsx::JsxFragment => "jsx_fragment",
            Tsx::JsxExpression => "jsx_expression",
            Tsx::JsxOpeningElement => "jsx_opening_element",
            Tsx::NestedIdentifier => "nested_identifier",
            Tsx::JsxNamespaceName => "jsx_namespace_name",
            Tsx::JsxClosingElement => "jsx_closing_element",
            Tsx::JsxSelfClosingElement => "jsx_self_closing_element",
            Tsx::JsxAttribute => "jsx_attribute",
            Tsx::AnonymousClass => "anonymous_class",
            Tsx::Class2 => "class",
            Tsx::ClassHeritage => "class_heritage",
            Tsx::Function2 => "function",
            Tsx::ArrowFunction => "arrow_function",
            Tsx::GeneratorFunction => "generator_function",
            Tsx::CallExpression => "call_expression",
            Tsx::NewExpression => "new_expression",
            Tsx::AwaitExpression => "await_expression",
            Tsx::MemberExpression => "member_expression",
            Tsx::SubscriptExpression => "subscript_expression",
            Tsx::AssignmentExpression => "assignment_expression",
            Tsx::AugmentedAssignmentExpression => "augmented_assignment_expression",
            Tsx::Initializer => "_initializer",
            Tsx::SpreadElement => "spread_element",
            Tsx::TernaryExpression => "ternary_expression",
            Tsx::BinaryExpression => "binary_expression",
            Tsx::UnaryExpression => "unary_expression",
            Tsx::UpdateExpression => "update_expression",
            Tsx::SequenceExpression => "sequence_expression",
            Tsx::String2 => "string",
            Tsx::TemplateString => "template_string",
            Tsx::TemplateSubstitution => "template_substitution",
            Tsx::Regex => "regex",
            Tsx::MetaProperty => "meta_property",
            Tsx::This2 => "this",
            Tsx::Arguments => "arguments",
            Tsx::Decorator => "decorator",
            Tsx::IdentifierReference => "_identifier_reference",
            Tsx::MemberExpression2 => "member_expression",
            Tsx::CallExpression2 => "call_expression",
            Tsx::ClassBody => "class_body",
            Tsx::PublicFieldDefinition => "public_field_definition",
            Tsx::FormalParameters => "formal_parameters",
            Tsx::RestParameter => "rest_parameter",
            Tsx::MethodDefinition => "method_definition",
            Tsx::Pair => "pair",
            Tsx::PropertyName => "_property_name",
            Tsx::ComputedPropertyName => "computed_property_name",
            Tsx::NonNullExpression => "non_null_expression",
            Tsx::MethodSignature => "method_signature",
            Tsx::AbstractMethodSignature => "abstract_method_signature",
            Tsx::FunctionSignature => "function_signature",
            Tsx::AsExpression => "as_expression",
            Tsx::ImportRequireClause => "import_require_clause",
            Tsx::ImplementsClause => "implements_clause",
            Tsx::AmbientDeclaration => "ambient_declaration",
            Tsx::AbstractClass => "abstract_class",
            Tsx::Module2 => "module",
            Tsx::InternalModule => "internal_module",
            Tsx::Module3 => "_module",
            Tsx::ImportAlias => "import_alias",
            Tsx::NestedTypeIdentifier => "nested_type_identifier",
            Tsx::InterfaceDeclaration => "interface_declaration",
            Tsx::TypeReference => "_type_reference",
            Tsx::ExtendsClause => "extends_clause",
            Tsx::EnumDeclaration => "enum_declaration",
            Tsx::EnumBody => "enum_body",
            Tsx::EnumMember => "_enum_member",
            Tsx::EnumAssignment => "enum_assignment",
            Tsx::TypeAliasDeclaration => "type_alias_declaration",
            Tsx::AccessibilityModifier => "accessibility_modifier",
            Tsx::RequiredParameter => "required_parameter",
            Tsx::OptionalParameter => "optional_parameter",
            Tsx::TypeAnnotation => "type_annotation",
            Tsx::Type2 => "_type",
            Tsx::ConstructorType => "constructor_type",
            Tsx::PrimaryType => "_primary_type",
            Tsx::GenericType => "generic_type",
            Tsx::TypePredicate => "type_predicate",
            Tsx::TypeQuery => "type_query",
            Tsx::IndexTypeQuery => "index_type_query",
            Tsx::LookupType => "lookup_type",
            Tsx::MappedType => "mapped_type",
            Tsx::LiteralType => "literal_type",
            Tsx::UnaryExpression2 => "unary_expression",
            Tsx::ExistentialType => "existential_type",
            Tsx::ThisType => "this_type",
            Tsx::FlowMaybeType => "flow_maybe_type",
            Tsx::ParenthesizedType => "parenthesized_type",
            Tsx::PredefinedType => "predefined_type",
            Tsx::TypeArguments => "type_arguments",
            Tsx::ObjectType => "object_type",
            Tsx::PropertySignature => "property_signature",
            Tsx::CallSignature => "call_signature",
            Tsx::TypeParameters => "type_parameters",
            Tsx::TypeParameter => "type_parameter",
            Tsx::DefaultType => "default_type",
            Tsx::Constraint => "constraint",
            Tsx::ConstructSignature => "construct_signature",
            Tsx::IndexSignature => "index_signature",
            Tsx::ArrayType => "array_type",
            Tsx::TupleType => "tuple_type",
            Tsx::UnionType => "union_type",
            Tsx::IntersectionType => "intersection_type",
            Tsx::FunctionType => "function_type",
            Tsx::ProgramRepeat1 => "program_repeat1",
            Tsx::ExportStatementRepeat1 => "export_statement_repeat1",
            Tsx::ExportClauseRepeat1 => "export_clause_repeat1",
            Tsx::NamedImportsRepeat1 => "named_imports_repeat1",
            Tsx::VariableDeclarationRepeat1 => "variable_declaration_repeat1",
            Tsx::SwitchBodyRepeat1 => "switch_body_repeat1",
            Tsx::ObjectRepeat1 => "object_repeat1",
            Tsx::ArrayRepeat1 => "array_repeat1",
            Tsx::JsxElementRepeat1 => "jsx_element_repeat1",
            Tsx::JsxOpeningElementRepeat1 => "jsx_opening_element_repeat1",
            Tsx::StringRepeat1 => "string_repeat1",
            Tsx::StringRepeat2 => "string_repeat2",
            Tsx::TemplateStringRepeat1 => "template_string_repeat1",
            Tsx::ClassBodyRepeat1 => "class_body_repeat1",
            Tsx::FormalParametersRepeat1 => "formal_parameters_repeat1",
            Tsx::ImplementsClauseRepeat1 => "implements_clause_repeat1",
            Tsx::ExtendsClauseRepeat1 => "extends_clause_repeat1",
            Tsx::EnumBodyRepeat1 => "enum_body_repeat1",
            Tsx::ObjectTypeRepeat1 => "object_type_repeat1",
            Tsx::TypeParametersRepeat1 => "type_parameters_repeat1",
            Tsx::TypeIdentifier => "type_identifier",
            Tsx::ArrayPattern => "array_pattern",
            Tsx::ShorthandPropertyIdentifier => "shorthand_property_identifier",
            Tsx::PropertyIdentifier => "property_identifier",
            Tsx::ObjectPattern => "object_pattern",
            Tsx::ImportSpecifier => "import_specifier",
            Tsx::ExportSpecifier => "export_specifier",
            Tsx::StatementIdentifier => "statement_identifier",
            Tsx::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Tsx> = ::phf::Map {
    key: 3347381344252206323,
    disps: ::phf::Slice::Static(&[
        (0, 30),
        (0, 252),
        (0, 30),
        (0, 141),
        (3, 51),
        (0, 42),
        (0, 303),
        (0, 47),
        (1, 66),
        (0, 2),
        (0, 205),
        (1, 76),
        (0, 23),
        (0, 23),
        (0, 138),
        (0, 4),
        (0, 5),
        (1, 26),
        (5, 51),
        (0, 151),
        (1, 61),
        (0, 171),
        (1, 214),
        (0, 85),
        (0, 0),
        (0, 208),
        (0, 88),
        (1, 0),
        (0, 5),
        (9, 105),
        (0, 0),
        (0, 9),
        (0, 5),
        (0, 6),
        (23, 238),
        (0, 1),
        (0, 1),
        (0, 67),
        (1, 246),
        (0, 191),
        (0, 13),
        (0, 54),
        (5, 46),
        (2, 70),
        (0, 3),
        (37, 92),
        (0, 39),
        (36, 117),
        (0, 57),
        (0, 2),
        (0, 3),
        (0, 72),
        (0, 265),
        (0, 23),
        (51, 53),
        (11, 42),
        (0, 44),
        (2, 54),
        (8, 9),
        (7, 189),
        (6, 179),
    ]),
    entries: ::phf::Slice::Static(&[
        ("static", Tsx::Static),
        ("regex_flags", Tsx::RegexFlags),
        ("const", Tsx::Const),
        ("program_repeat1", Tsx::ProgramRepeat1),
        ("||", Tsx::PIPEPIPE),
        ("identifier", Tsx::Identifier),
        ("literal_type", Tsx::LiteralType),
        ("**", Tsx::STARSTAR),
        ("end", Tsx::End),
        ("export_clause", Tsx::ExportClause),
        ("abstract", Tsx::Abstract),
        ("call_signature", Tsx::CallSignature),
        ("!=", Tsx::BANGEQ),
        ("enum", Tsx::Enum),
        ("template_substitution", Tsx::TemplateSubstitution),
        ("catch", Tsx::Catch),
        ("optional_parameter", Tsx::OptionalParameter),
        ("\\\"", Tsx::DQUOTE),
        ("function_type", Tsx::FunctionType),
        ("export_clause_repeat1", Tsx::ExportClauseRepeat1),
        (
            "shorthand_property_identifier",
            Tsx::ShorthandPropertyIdentifier,
        ),
        ("while", Tsx::While),
        ("generic_type", Tsx::GenericType),
        ("union_type", Tsx::UnionType),
        ("yield", Tsx::Yield),
        ("of", Tsx::Of),
        ("while_statement", Tsx::WhileStatement),
        ("type", Tsx::Type),
        ("import_statement", Tsx::ImportStatement),
        ("class_heritage", Tsx::ClassHeritage),
        ("extends_clause_repeat1", Tsx::ExtendsClauseRepeat1),
        ("throw_statement", Tsx::ThrowStatement),
        ("array_pattern", Tsx::ArrayPattern),
        ("update_expression", Tsx::UpdateExpression),
        ("@", Tsx::AT),
        ("new", Tsx::New),
        ("for", Tsx::For),
        ("namespace", Tsx::Namespace),
        ("...", Tsx::DOTDOTDOT),
        ("implements_clause", Tsx::ImplementsClause),
        ("switch_body_repeat1", Tsx::SwitchBodyRepeat1),
        ("abstract_class", Tsx::AbstractClass),
        ("^", Tsx::CARET),
        ("with", Tsx::With),
        ("variable_declarator", Tsx::VariableDeclarator),
        ("named_imports", Tsx::NamedImports),
        ("var", Tsx::Var),
        ("await_expression", Tsx::AwaitExpression),
        ("type_identifier", Tsx::TypeIdentifier),
        ("function", Tsx::Function),
        ("global", Tsx::Global),
        ("constraint", Tsx::Constraint),
        ("_import_export_specifier", Tsx::ImportExportSpecifier),
        ("finally", Tsx::Finally),
        ("rest_parameter", Tsx::RestParameter),
        ("nested_identifier", Tsx::NestedIdentifier),
        ("%=", Tsx::PERCENTEQ),
        ("throw", Tsx::Throw),
        (":", Tsx::COLON),
        ("intersection_type", Tsx::IntersectionType),
        ("|=", Tsx::PIPEEQ),
        ("_enum_member", Tsx::EnumMember),
        ("set", Tsx::Set),
        ("object_type_repeat1", Tsx::ObjectTypeRepeat1),
        ("generator_function", Tsx::GeneratorFunction),
        ("=>", Tsx::EQGT),
        (">>>=", Tsx::GTGTGTEQ),
        (",", Tsx::COMMA),
        ("escape_sequence", Tsx::EscapeSequence),
        ("debugger", Tsx::Debugger),
        ("object_type", Tsx::ObjectType),
        ("_from_clause", Tsx::FromClause),
        ("module", Tsx::Module),
        ("default_type", Tsx::DefaultType),
        ("export", Tsx::Export),
        ("_identifier_reference", Tsx::IdentifierReference),
        ("catch_clause", Tsx::CatchClause),
        ("method_definition", Tsx::MethodDefinition),
        ("**=", Tsx::STARSTAREQ),
        ("switch_statement", Tsx::SwitchStatement),
        (">>>", Tsx::GTGTGT),
        ("template_string_repeat1", Tsx::TemplateStringRepeat1),
        ("_automatic_semicolon", Tsx::AutomaticSemicolon),
        ("with_statement", Tsx::WithStatement),
        ("existential_type", Tsx::ExistentialType),
        ("delete", Tsx::Delete),
        ("switch_default", Tsx::SwitchDefault),
        ("require", Tsx::Require),
        ("&&", Tsx::AMPAMP),
        ("program", Tsx::Program),
        ("jsx_attribute", Tsx::JsxAttribute),
        ("array", Tsx::Array),
        ("let", Tsx::Let),
        ("lookup_type", Tsx::LookupType),
        ("type_query", Tsx::TypeQuery),
        ("type_alias_declaration", Tsx::TypeAliasDeclaration),
        ("expression_statement", Tsx::ExpressionStatement),
        (
            "variable_declaration_repeat1",
            Tsx::VariableDeclarationRepeat1,
        ),
        ("/", Tsx::SLASH),
        ("if_statement", Tsx::IfStatement),
        ("null", Tsx::Null),
        (">=", Tsx::GTEQ),
        ("parenthesized_type", Tsx::ParenthesizedType),
        ("import", Tsx::Import),
        ("internal_module", Tsx::InternalModule),
        ("*", Tsx::STAR),
        ("enum_assignment", Tsx::EnumAssignment),
        ("|}", Tsx::PIPERBRACE),
        ("undefined", Tsx::Undefined),
        (";", Tsx::SEMI),
        ("implements_clause_repeat1", Tsx::ImplementsClauseRepeat1),
        ("export_statement_repeat1", Tsx::ExportStatementRepeat1),
        ("==", Tsx::EQEQ),
        ("break", Tsx::Break),
        ("jsx_opening_element", Tsx::JsxOpeningElement),
        ("type_parameter", Tsx::TypeParameter),
        ("&", Tsx::AMP),
        ("constructor_type", Tsx::ConstructorType),
        ("template_string", Tsx::TemplateString),
        ("<", Tsx::LT),
        ("extends_clause", Tsx::ExtendsClause),
        ("jsx_opening_element_repeat1", Tsx::JsxOpeningElementRepeat1),
        ("spread_element", Tsx::SpreadElement),
        ("boolean", Tsx::Boolean),
        ("public_field_definition", Tsx::PublicFieldDefinition),
        (">>", Tsx::GTGT),
        ("type_predicate", Tsx::TypePredicate),
        ("in", Tsx::In),
        ("mapped_type", Tsx::MappedType),
        ("do_statement", Tsx::DoStatement),
        ("switch_case", Tsx::SwitchCase),
        ("void", Tsx::Void),
        ("=", Tsx::EQ),
        (")", Tsx::RPAREN),
        ("implements", Tsx::Implements),
        ("property_identifier", Tsx::PropertyIdentifier),
        ("variable_declaration", Tsx::VariableDeclaration),
        ("enum_declaration", Tsx::EnumDeclaration),
        ("number", Tsx::Number),
        ("namespace_import", Tsx::NamespaceImport),
        ("comment", Tsx::Comment),
        ("arrow_function", Tsx::ArrowFunction),
        ("jsx_expression", Tsx::JsxExpression),
        ("string_token2", Tsx::StringToken2),
        ("ERROR", Tsx::Error),
        ("call_expression", Tsx::CallExpression),
        ("public", Tsx::Public),
        ("try_statement", Tsx::TryStatement),
        ("import_specifier", Tsx::ImportSpecifier),
        ("private", Tsx::Private),
        ("accessibility_modifier", Tsx::AccessibilityModifier),
        ("regex_pattern", Tsx::RegexPattern),
        ("?", Tsx::QMARK),
        ("object_repeat1", Tsx::ObjectRepeat1),
        ("construct_signature", Tsx::ConstructSignature),
        ("}", Tsx::RBRACE),
        ("meta_property", Tsx::MetaProperty),
        ("statement_identifier", Tsx::StatementIdentifier),
        ("array_type", Tsx::ArrayType),
        ("super", Tsx::Super),
        ("async", Tsx::Async),
        ("jsx_fragment", Tsx::JsxFragment),
        ("\'", Tsx::SQUOTE),
        ("readonly", Tsx::Readonly),
        ("any", Tsx::Any),
        ("class_body", Tsx::ClassBody),
        ("binary_expression", Tsx::BinaryExpression),
        ("type_annotation", Tsx::TypeAnnotation),
        ("ambient_declaration", Tsx::AmbientDeclaration),
        ("subscript_expression", Tsx::SubscriptExpression),
        (".", Tsx::DOT),
        ("import_require_clause", Tsx::ImportRequireClause),
        ("-=", Tsx::DASHEQ),
        ("_template_chars", Tsx::TemplateChars),
        ("predefined_type", Tsx::PredefinedType),
        ("do", Tsx::Do),
        ("statement_block", Tsx::StatementBlock),
        ("continue_statement", Tsx::ContinueStatement),
        ("jsx_closing_element", Tsx::JsxClosingElement),
        ("import_alias", Tsx::ImportAlias),
        ("labeled_statement", Tsx::LabeledStatement),
        ("declare", Tsx::Declare),
        ("function_signature", Tsx::FunctionSignature),
        ("import_clause", Tsx::ImportClause),
        ("yield_expression", Tsx::YieldExpression),
        ("new_expression", Tsx::NewExpression),
        ("string", Tsx::String),
        ("required_parameter", Tsx::RequiredParameter),
        ("type_parameters", Tsx::TypeParameters),
        ("nested_type_identifier", Tsx::NestedTypeIdentifier),
        ("jsx_element_repeat1", Tsx::JsxElementRepeat1),
        ("break_statement", Tsx::BreakStatement),
        ("get", Tsx::Get),
        ("anonymous_class", Tsx::AnonymousClass),
        ("pair", Tsx::Pair),
        ("typeof", Tsx::Typeof),
        ("--", Tsx::DASHDASH),
        ("object", Tsx::Object),
        (">>=", Tsx::GTGTEQ),
        ("try", Tsx::Try),
        ("unary_expression", Tsx::UnaryExpression),
        ("jsx_element", Tsx::JsxElement),
        ("_type_reference", Tsx::TypeReference),
        ("symbol", Tsx::Symbol),
        ("sequence_expression", Tsx::SequenceExpression),
        ("~", Tsx::TILDE),
        ("<=", Tsx::LTEQ),
        ("interface_declaration", Tsx::InterfaceDeclaration),
        ("abstract_method_signature", Tsx::AbstractMethodSignature),
        ("return_statement", Tsx::ReturnStatement),
        ("debugger_statement", Tsx::DebuggerStatement),
        ("jsx_self_closing_element", Tsx::JsxSelfClosingElement),
        ("default", Tsx::Default),
        ("return", Tsx::Return),
        ("continue", Tsx::Continue),
        ("object_pattern", Tsx::ObjectPattern),
        ("_initializer", Tsx::Initializer),
        ("]", Tsx::RBRACK),
        ("enum_body", Tsx::EnumBody),
        ("string_repeat2", Tsx::StringRepeat2),
        ("extends", Tsx::Extends),
        ("export_specifier", Tsx::ExportSpecifier),
        ("_primary_type", Tsx::PrimaryType),
        ("formal_parameters", Tsx::FormalParameters),
        ("+", Tsx::PLUS),
        ("arguments", Tsx::Arguments),
        ("from", Tsx::From),
        ("<<", Tsx::LTLT),
        ("-", Tsx::DASH),
        ("member_expression", Tsx::MemberExpression),
        ("is", Tsx::Is),
        ("for_statement", Tsx::ForStatement),
        (
            "augmented_assignment_expression",
            Tsx::AugmentedAssignmentExpression,
        ),
        ("{|", Tsx::LBRACEPIPE),
        ("+=", Tsx::PLUSEQ),
        ("class_body_repeat1", Tsx::ClassBodyRepeat1),
        ("enum_body_repeat1", Tsx::EnumBodyRepeat1),
        ("assignment_pattern", Tsx::AssignmentPattern),
        ("string_repeat1", Tsx::StringRepeat1),
        ("switch", Tsx::Switch),
        ("else", Tsx::Else),
        ("`", Tsx::BQUOTE),
        ("{", Tsx::LBRACE),
        ("tuple_type", Tsx::TupleType),
        ("instanceof", Tsx::Instanceof),
        ("flow_maybe_type", Tsx::FlowMaybeType),
        ("empty_statement", Tsx::EmptyStatement),
        ("(", Tsx::LPAREN),
        ("jsx_namespace_name", Tsx::JsxNamespaceName),
        ("as", Tsx::As),
        ("switch_body", Tsx::SwitchBody),
        ("parenthesized_expression", Tsx::ParenthesizedExpression),
        ("for_of_statement", Tsx::ForOfStatement),
        ("type_parameters_repeat1", Tsx::TypeParametersRepeat1),
        ("index_type_query", Tsx::IndexTypeQuery),
        ("property_signature", Tsx::PropertySignature),
        ("array_repeat1", Tsx::ArrayRepeat1),
        ("jsx_text", Tsx::JsxText),
        ("lexical_declaration", Tsx::LexicalDeclaration),
        ("method_signature", Tsx::MethodSignature),
        ("keyof", Tsx::Keyof),
        ("for_in_statement", Tsx::ForInStatement),
        ("interface", Tsx::Interface),
        ("hash_bang_line", Tsx::HashBangLine),
        ("string_token1", Tsx::StringToken1),
        ("ternary_expression", Tsx::TernaryExpression),
        ("if", Tsx::If),
        ("finally_clause", Tsx::FinallyClause),
        ("!==", Tsx::BANGEQEQ),
        ("++", Tsx::PLUSPLUS),
        ("assignment_expression", Tsx::AssignmentExpression),
        ("index_signature", Tsx::IndexSignature),
        ("[", Tsx::LBRACK),
        ("*=", Tsx::STAREQ),
        ("_property_name", Tsx::PropertyName),
        ("named_imports_repeat1", Tsx::NamedImportsRepeat1),
        ("!", Tsx::BANG),
        ("type_arguments", Tsx::TypeArguments),
        ("${", Tsx::DOLLARLBRACE),
        ("|", Tsx::PIPE),
        ("this", Tsx::This),
        ("computed_property_name", Tsx::ComputedPropertyName),
        ("_expression", Tsx::Expression),
        ("non_null_expression", Tsx::NonNullExpression),
        ("target", Tsx::Target),
        ("protected", Tsx::Protected),
        ("export_statement", Tsx::ExportStatement),
        ("decorator", Tsx::Decorator),
        ("/=", Tsx::SLASHEQ),
        (">", Tsx::GT),
        ("false", Tsx::False),
        ("this_type", Tsx::ThisType),
        ("formal_parameters_repeat1", Tsx::FormalParametersRepeat1),
        ("as_expression", Tsx::AsExpression),
        ("===", Tsx::EQEQEQ),
        ("_declaration", Tsx::Declaration),
        ("true", Tsx::True),
        ("<<=", Tsx::LTLTEQ),
        ("await", Tsx::Await),
        ("&=", Tsx::AMPEQ),
        ("^=", Tsx::CARETEQ),
        ("regex", Tsx::Regex),
        ("%", Tsx::PERCENT),
        ("class", Tsx::Class),
        ("case", Tsx::Case),
    ]),
};

impl From<&str> for Tsx {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Tsx {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x) }
    }
}

// Tsx == u16
impl PartialEq<u16> for Tsx {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Tsx::from(*x)
    }
}

// u16 == Tsx
impl PartialEq<Tsx> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Tsx) -> bool {
        *x == *self
    }
}
