// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum Python {
    End = 0,
    Identifier = 1,
    Import = 2,
    DOT = 3,
    From = 4,
    Future = 5,
    LPAREN = 6,
    RPAREN = 7,
    COMMA = 8,
    As = 9,
    STAR = 10,
    Print = 11,
    GTGT = 12,
    Assert = 13,
    COLONEQ = 14,
    Return = 15,
    Del = 16,
    Raise = 17,
    Pass = 18,
    Break = 19,
    Continue = 20,
    If = 21,
    COLON = 22,
    Elif = 23,
    Else = 24,
    Async = 25,
    For = 26,
    In = 27,
    While = 28,
    Try = 29,
    Except = 30,
    Finally = 31,
    With = 32,
    Def = 33,
    DASHGT = 34,
    EQ = 35,
    Global = 36,
    Nonlocal = 37,
    Exec = 38,
    Class = 39,
    AT = 40,
    Not = 41,
    And = 42,
    Or = 43,
    PLUS = 44,
    DASH = 45,
    SLASH = 46,
    PERCENT = 47,
    SLASHSLASH = 48,
    STARSTAR = 49,
    PIPE = 50,
    AMP = 51,
    CARET = 52,
    LTLT = 53,
    TILDE = 54,
    LT = 55,
    LTEQ = 56,
    EQEQ = 57,
    BANGEQ = 58,
    GTEQ = 59,
    GT = 60,
    LTGT = 61,
    Is = 62,
    Lambda = 63,
    PLUSEQ = 64,
    DASHEQ = 65,
    STAREQ = 66,
    SLASHEQ = 67,
    ATEQ = 68,
    SLASHSLASHEQ = 69,
    PERCENTEQ = 70,
    STARSTAREQ = 71,
    GTGTEQ = 72,
    LTLTEQ = 73,
    AMPEQ = 74,
    CARETEQ = 75,
    PIPEEQ = 76,
    Yield = 77,
    LBRACK = 78,
    RBRACK = 79,
    Ellipsis = 80,
    LBRACE = 81,
    RBRACE = 82,
    EscapeSequence = 83,
    FormatSpecifierToken1 = 84,
    TypeConversion = 85,
    Integer = 86,
    Float = 87,
    True = 88,
    False = 89,
    None = 90,
    Await = 91,
    Comment = 92,
    Semicolon = 93,
    Newline = 94,
    Indent = 95,
    Dedent = 96,
    DQUOTE = 97,
    StringContent = 98,
    DQUOTE2 = 99,
    Module = 100,
    Statement = 101,
    SimpleStatements = 102,
    ImportStatement = 103,
    ImportPrefix = 104,
    RelativeImport = 105,
    FutureImportStatement = 106,
    ImportFromStatement = 107,
    ImportList = 108,
    AliasedImport = 109,
    WildcardImport = 110,
    PrintStatement = 111,
    Chevron = 112,
    AssertStatement = 113,
    ExpressionStatement = 114,
    NamedExpression = 115,
    ReturnStatement = 116,
    DeleteStatement = 117,
    RaiseStatement = 118,
    PassStatement = 119,
    BreakStatement = 120,
    ContinueStatement = 121,
    IfStatement = 122,
    ElifClause = 123,
    ElseClause = 124,
    ForStatement = 125,
    WhileStatement = 126,
    TryStatement = 127,
    ExceptClause = 128,
    FinallyClause = 129,
    WithStatement = 130,
    WithItem = 131,
    FunctionDefinition = 132,
    Parameters = 133,
    LambdaParameters = 134,
    Parameters2 = 135,
    DefaultParameter = 136,
    TypedDefaultParameter = 137,
    ListSplat = 138,
    DictionarySplat = 139,
    GlobalStatement = 140,
    NonlocalStatement = 141,
    ExecStatement = 142,
    ClassDefinition = 143,
    ArgumentList = 144,
    DecoratedDefinition = 145,
    Decorator = 146,
    Suite = 147,
    Variables = 148,
    ExpressionList = 149,
    DottedName = 150,
    ExpressionWithinForInClause = 151,
    Expression = 152,
    PrimaryExpression = 153,
    NotOperator = 154,
    BooleanOperator = 155,
    BinaryOperator = 156,
    UnaryOperator = 157,
    ComparisonOperator = 158,
    Lambda2 = 159,
    Lambda3 = 160,
    Assignment = 161,
    AugmentedAssignment = 162,
    RightHandSide = 163,
    Yield2 = 164,
    Attribute = 165,
    Subscript = 166,
    Slice = 167,
    Call = 168,
    TypedParameter = 169,
    Type = 170,
    KeywordArgument = 171,
    List = 172,
    ComprehensionBody = 173,
    ListComprehension = 174,
    Dictionary = 175,
    DictionaryComprehension = 176,
    Pair = 177,
    Set = 178,
    SetComprehension = 179,
    ParenthesizedExpression = 180,
    Tuple = 181,
    GeneratorExpression = 182,
    ForInClause = 183,
    IfClause = 184,
    ConditionalExpression = 185,
    ConcatenatedString = 186,
    String = 187,
    Interpolation = 188,
    FormatSpecifier = 189,
    FormatExpression = 190,
    Await2 = 191,
    ModuleRepeat1 = 192,
    SimpleStatementsRepeat1 = 193,
    ImportPrefixRepeat1 = 194,
    ImportListRepeat1 = 195,
    PrintStatementRepeat1 = 196,
    IfStatementRepeat1 = 197,
    TryStatementRepeat1 = 198,
    WithStatementRepeat1 = 199,
    ParametersRepeat1 = 200,
    GlobalStatementRepeat1 = 201,
    ArgumentListRepeat1 = 202,
    DecoratedDefinitionRepeat1 = 203,
    VariablesRepeat1 = 204,
    DottedNameRepeat1 = 205,
    ComparisonOperatorRepeat1 = 206,
    SubscriptRepeat1 = 207,
    ListRepeat1 = 208,
    ComprehensionBodyRepeat1 = 209,
    DictionaryRepeat1 = 210,
    TupleRepeat1 = 211,
    ForInClauseRepeat1 = 212,
    ConcatenatedStringRepeat1 = 213,
    StringRepeat1 = 214,
    FormatSpecifierRepeat1 = 215,
    Error = 216,
}

impl Into<&'static str> for Python {
    fn into(self) -> &'static str {
        match self {
            Python::End => "end",
            Python::Identifier => "identifier",
            Python::Import => "import",
            Python::DOT => ".",
            Python::From => "from",
            Python::Future => "__future__",
            Python::LPAREN => "(",
            Python::RPAREN => ")",
            Python::COMMA => ",",
            Python::As => "as",
            Python::STAR => "*",
            Python::Print => "print",
            Python::GTGT => ">>",
            Python::Assert => "assert",
            Python::COLONEQ => ":=",
            Python::Return => "return",
            Python::Del => "del",
            Python::Raise => "raise",
            Python::Pass => "pass",
            Python::Break => "break",
            Python::Continue => "continue",
            Python::If => "if",
            Python::COLON => ":",
            Python::Elif => "elif",
            Python::Else => "else",
            Python::Async => "async",
            Python::For => "for",
            Python::In => "in",
            Python::While => "while",
            Python::Try => "try",
            Python::Except => "except",
            Python::Finally => "finally",
            Python::With => "with",
            Python::Def => "def",
            Python::DASHGT => "->",
            Python::EQ => "=",
            Python::Global => "global",
            Python::Nonlocal => "nonlocal",
            Python::Exec => "exec",
            Python::Class => "class",
            Python::AT => "@",
            Python::Not => "not",
            Python::And => "and",
            Python::Or => "or",
            Python::PLUS => "+",
            Python::DASH => "-",
            Python::SLASH => "/",
            Python::PERCENT => "%",
            Python::SLASHSLASH => "//",
            Python::STARSTAR => "**",
            Python::PIPE => "|",
            Python::AMP => "&",
            Python::CARET => "^",
            Python::LTLT => "<<",
            Python::TILDE => "~",
            Python::LT => "<",
            Python::LTEQ => "<=",
            Python::EQEQ => "==",
            Python::BANGEQ => "!=",
            Python::GTEQ => ">=",
            Python::GT => ">",
            Python::LTGT => "<>",
            Python::Is => "is",
            Python::Lambda => "lambda",
            Python::PLUSEQ => "+=",
            Python::DASHEQ => "-=",
            Python::STAREQ => "*=",
            Python::SLASHEQ => "/=",
            Python::ATEQ => "@=",
            Python::SLASHSLASHEQ => "//=",
            Python::PERCENTEQ => "%=",
            Python::STARSTAREQ => "**=",
            Python::GTGTEQ => ">>=",
            Python::LTLTEQ => "<<=",
            Python::AMPEQ => "&=",
            Python::CARETEQ => "^=",
            Python::PIPEEQ => "|=",
            Python::Yield => "yield",
            Python::LBRACK => "[",
            Python::RBRACK => "]",
            Python::Ellipsis => "ellipsis",
            Python::LBRACE => "{",
            Python::RBRACE => "}",
            Python::EscapeSequence => "escape_sequence",
            Python::FormatSpecifierToken1 => "format_specifier_token1",
            Python::TypeConversion => "type_conversion",
            Python::Integer => "integer",
            Python::Float => "float",
            Python::True => "true",
            Python::False => "false",
            Python::None => "none",
            Python::Await => "await",
            Python::Comment => "comment",
            Python::Semicolon => "_semicolon",
            Python::Newline => "_newline",
            Python::Indent => "_indent",
            Python::Dedent => "_dedent",
            Python::DQUOTE => "\"",
            Python::StringContent => "_string_content",
            Python::DQUOTE2 => "\"",
            Python::Module => "module",
            Python::Statement => "_statement",
            Python::SimpleStatements => "_simple_statements",
            Python::ImportStatement => "import_statement",
            Python::ImportPrefix => "import_prefix",
            Python::RelativeImport => "relative_import",
            Python::FutureImportStatement => "future_import_statement",
            Python::ImportFromStatement => "import_from_statement",
            Python::ImportList => "_import_list",
            Python::AliasedImport => "aliased_import",
            Python::WildcardImport => "wildcard_import",
            Python::PrintStatement => "print_statement",
            Python::Chevron => "chevron",
            Python::AssertStatement => "assert_statement",
            Python::ExpressionStatement => "expression_statement",
            Python::NamedExpression => "named_expression",
            Python::ReturnStatement => "return_statement",
            Python::DeleteStatement => "delete_statement",
            Python::RaiseStatement => "raise_statement",
            Python::PassStatement => "pass_statement",
            Python::BreakStatement => "break_statement",
            Python::ContinueStatement => "continue_statement",
            Python::IfStatement => "if_statement",
            Python::ElifClause => "elif_clause",
            Python::ElseClause => "else_clause",
            Python::ForStatement => "for_statement",
            Python::WhileStatement => "while_statement",
            Python::TryStatement => "try_statement",
            Python::ExceptClause => "except_clause",
            Python::FinallyClause => "finally_clause",
            Python::WithStatement => "with_statement",
            Python::WithItem => "with_item",
            Python::FunctionDefinition => "function_definition",
            Python::Parameters => "parameters",
            Python::LambdaParameters => "lambda_parameters",
            Python::Parameters2 => "_parameters",
            Python::DefaultParameter => "default_parameter",
            Python::TypedDefaultParameter => "typed_default_parameter",
            Python::ListSplat => "list_splat",
            Python::DictionarySplat => "dictionary_splat",
            Python::GlobalStatement => "global_statement",
            Python::NonlocalStatement => "nonlocal_statement",
            Python::ExecStatement => "exec_statement",
            Python::ClassDefinition => "class_definition",
            Python::ArgumentList => "argument_list",
            Python::DecoratedDefinition => "decorated_definition",
            Python::Decorator => "decorator",
            Python::Suite => "_suite",
            Python::Variables => "variables",
            Python::ExpressionList => "expression_list",
            Python::DottedName => "dotted_name",
            Python::ExpressionWithinForInClause => "_expression_within_for_in_clause",
            Python::Expression => "_expression",
            Python::PrimaryExpression => "_primary_expression",
            Python::NotOperator => "not_operator",
            Python::BooleanOperator => "boolean_operator",
            Python::BinaryOperator => "binary_operator",
            Python::UnaryOperator => "unary_operator",
            Python::ComparisonOperator => "comparison_operator",
            Python::Lambda2 => "lambda",
            Python::Lambda3 => "lambda",
            Python::Assignment => "assignment",
            Python::AugmentedAssignment => "augmented_assignment",
            Python::RightHandSide => "_right_hand_side",
            Python::Yield2 => "yield",
            Python::Attribute => "attribute",
            Python::Subscript => "subscript",
            Python::Slice => "slice",
            Python::Call => "call",
            Python::TypedParameter => "typed_parameter",
            Python::Type => "type",
            Python::KeywordArgument => "keyword_argument",
            Python::List => "list",
            Python::ComprehensionBody => "_comprehension_body",
            Python::ListComprehension => "list_comprehension",
            Python::Dictionary => "dictionary",
            Python::DictionaryComprehension => "dictionary_comprehension",
            Python::Pair => "pair",
            Python::Set => "set",
            Python::SetComprehension => "set_comprehension",
            Python::ParenthesizedExpression => "parenthesized_expression",
            Python::Tuple => "tuple",
            Python::GeneratorExpression => "generator_expression",
            Python::ForInClause => "for_in_clause",
            Python::IfClause => "if_clause",
            Python::ConditionalExpression => "conditional_expression",
            Python::ConcatenatedString => "concatenated_string",
            Python::String => "string",
            Python::Interpolation => "interpolation",
            Python::FormatSpecifier => "format_specifier",
            Python::FormatExpression => "format_expression",
            Python::Await2 => "await",
            Python::ModuleRepeat1 => "module_repeat1",
            Python::SimpleStatementsRepeat1 => "_simple_statements_repeat1",
            Python::ImportPrefixRepeat1 => "import_prefix_repeat1",
            Python::ImportListRepeat1 => "_import_list_repeat1",
            Python::PrintStatementRepeat1 => "print_statement_repeat1",
            Python::IfStatementRepeat1 => "if_statement_repeat1",
            Python::TryStatementRepeat1 => "try_statement_repeat1",
            Python::WithStatementRepeat1 => "with_statement_repeat1",
            Python::ParametersRepeat1 => "_parameters_repeat1",
            Python::GlobalStatementRepeat1 => "global_statement_repeat1",
            Python::ArgumentListRepeat1 => "argument_list_repeat1",
            Python::DecoratedDefinitionRepeat1 => "decorated_definition_repeat1",
            Python::VariablesRepeat1 => "variables_repeat1",
            Python::DottedNameRepeat1 => "dotted_name_repeat1",
            Python::ComparisonOperatorRepeat1 => "comparison_operator_repeat1",
            Python::SubscriptRepeat1 => "subscript_repeat1",
            Python::ListRepeat1 => "list_repeat1",
            Python::ComprehensionBodyRepeat1 => "_comprehension_body_repeat1",
            Python::DictionaryRepeat1 => "dictionary_repeat1",
            Python::TupleRepeat1 => "tuple_repeat1",
            Python::ForInClauseRepeat1 => "for_in_clause_repeat1",
            Python::ConcatenatedStringRepeat1 => "concatenated_string_repeat1",
            Python::StringRepeat1 => "string_repeat1",
            Python::FormatSpecifierRepeat1 => "format_specifier_repeat1",
            Python::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Python> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 10),
        (0, 10),
        (2, 82),
        (0, 4),
        (5, 135),
        (1, 30),
        (0, 149),
        (0, 30),
        (0, 44),
        (0, 145),
        (0, 28),
        (1, 2),
        (0, 25),
        (0, 201),
        (0, 135),
        (0, 23),
        (0, 3),
        (0, 55),
        (2, 65),
        (0, 119),
        (2, 116),
        (1, 113),
        (0, 0),
        (0, 25),
        (9, 123),
        (0, 2),
        (0, 90),
        (14, 54),
        (1, 173),
        (0, 40),
        (0, 113),
        (25, 147),
        (0, 2),
        (0, 0),
        (3, 74),
        (17, 174),
        (2, 16),
        (10, 138),
        (0, 114),
        (5, 114),
        (0, 176),
        (56, 200),
        (0, 14),
    ]),
    entries: ::phf::Slice::Static(&[
        ("except", Python::Except),
        ("yield", Python::Yield),
        ("dotted_name_repeat1", Python::DottedNameRepeat1),
        ("or", Python::Or),
        ("_indent", Python::Indent),
        ("return", Python::Return),
        ("keyword_argument", Python::KeywordArgument),
        ("expression_statement", Python::ExpressionStatement),
        ("relative_import", Python::RelativeImport),
        ("continue_statement", Python::ContinueStatement),
        ("generator_expression", Python::GeneratorExpression),
        ("print_statement_repeat1", Python::PrintStatementRepeat1),
        ("type_conversion", Python::TypeConversion),
        ("/=", Python::SLASHEQ),
        ("aliased_import", Python::AliasedImport),
        ("function_definition", Python::FunctionDefinition),
        ("import", Python::Import),
        ("pass", Python::Pass),
        ("_parameters_repeat1", Python::ParametersRepeat1),
        ("global_statement", Python::GlobalStatement),
        ("break", Python::Break),
        ("@", Python::AT),
        (">>", Python::GTGT),
        ("<>", Python::LTGT),
        ("async", Python::Async),
        ("//=", Python::SLASHSLASHEQ),
        ("lambda_parameters", Python::LambdaParameters),
        ("assignment", Python::Assignment),
        ("is", Python::Is),
        ("expression_list", Python::ExpressionList),
        ("finally_clause", Python::FinallyClause),
        ("module", Python::Module),
        ("for_in_clause_repeat1", Python::ForInClauseRepeat1),
        ("escape_sequence", Python::EscapeSequence),
        ("with_item", Python::WithItem),
        ("decorated_definition", Python::DecoratedDefinition),
        ("with", Python::With),
        ("nonlocal", Python::Nonlocal),
        ("finally", Python::Finally),
        ("default_parameter", Python::DefaultParameter),
        ("^", Python::CARET),
        (":", Python::COLON),
        ("elif_clause", Python::ElifClause),
        ("_statement", Python::Statement),
        ("/", Python::SLASH),
        (
            "concatenated_string_repeat1",
            Python::ConcatenatedStringRepeat1,
        ),
        ("global", Python::Global),
        ("%=", Python::PERCENTEQ),
        ("none", Python::None),
        ("exec", Python::Exec),
        ("decorator", Python::Decorator),
        ("set", Python::Set),
        ("__future__", Python::Future),
        ("^=", Python::CARETEQ),
        ("_simple_statements", Python::SimpleStatements),
        ("from", Python::From),
        (
            "decorated_definition_repeat1",
            Python::DecoratedDefinitionRepeat1,
        ),
        ("{", Python::LBRACE),
        ("format_specifier_token1", Python::FormatSpecifierToken1),
        ("boolean_operator", Python::BooleanOperator),
        ("if_statement", Python::IfStatement),
        ("[", Python::LBRACK),
        ("-", Python::DASH),
        ("**", Python::STARSTAR),
        ("<<=", Python::LTLTEQ),
        ("list_repeat1", Python::ListRepeat1),
        ("else_clause", Python::ElseClause),
        ("try_statement", Python::TryStatement),
        ("pass_statement", Python::PassStatement),
        ("try_statement_repeat1", Python::TryStatementRepeat1),
        ("import_statement", Python::ImportStatement),
        ("(", Python::LPAREN),
        ("\\\"", Python::DQUOTE),
        ("for_in_clause", Python::ForInClause),
        ("lambda", Python::Lambda),
        (")", Python::RPAREN),
        ("_suite", Python::Suite),
        ("_dedent", Python::Dedent),
        ("in", Python::In),
        (">=", Python::GTEQ),
        ("call", Python::Call),
        (
            "_comprehension_body_repeat1",
            Python::ComprehensionBodyRepeat1,
        ),
        ("binary_operator", Python::BinaryOperator),
        ("_import_list_repeat1", Python::ImportListRepeat1),
        ("&=", Python::AMPEQ),
        ("=", Python::EQ),
        ("_primary_expression", Python::PrimaryExpression),
        ("->", Python::DASHGT),
        ("class", Python::Class),
        ("unary_operator", Python::UnaryOperator),
        ("concatenated_string", Python::ConcatenatedString),
        ("_semicolon", Python::Semicolon),
        ("del", Python::Del),
        ("import_prefix", Python::ImportPrefix),
        ("<=", Python::LTEQ),
        ("_import_list", Python::ImportList),
        ("as", Python::As),
        ("format_specifier", Python::FormatSpecifier),
        ("-=", Python::DASHEQ),
        ("format_specifier_repeat1", Python::FormatSpecifierRepeat1),
        ("for_statement", Python::ForStatement),
        ("try", Python::Try),
        ("<<", Python::LTLT),
        ("+=", Python::PLUSEQ),
        ("&", Python::AMP),
        ("delete_statement", Python::DeleteStatement),
        ("comment", Python::Comment),
        ("typed_default_parameter", Python::TypedDefaultParameter),
        ("wildcard_import", Python::WildcardImport),
        ("assert", Python::Assert),
        ("dictionary_comprehension", Python::DictionaryComprehension),
        ("not_operator", Python::NotOperator),
        ("exec_statement", Python::ExecStatement),
        ("with_statement_repeat1", Python::WithStatementRepeat1),
        ("augmented_assignment", Python::AugmentedAssignment),
        ("]", Python::RBRACK),
        ("subscript", Python::Subscript),
        ("type", Python::Type),
        ("_string_content", Python::StringContent),
        ("module_repeat1", Python::ModuleRepeat1),
        ("and", Python::And),
        ("else", Python::Else),
        ("with_statement", Python::WithStatement),
        ("parenthesized_expression", Python::ParenthesizedExpression),
        ("print", Python::Print),
        ("if_statement_repeat1", Python::IfStatementRepeat1),
        ("//", Python::SLASHSLASH),
        ("while", Python::While),
        ("import_from_statement", Python::ImportFromStatement),
        ("==", Python::EQEQ),
        ("def", Python::Def),
        ("global_statement_repeat1", Python::GlobalStatementRepeat1),
        ("continue", Python::Continue),
        ("nonlocal_statement", Python::NonlocalStatement),
        (
            "_simple_statements_repeat1",
            Python::SimpleStatementsRepeat1,
        ),
        ("variables_repeat1", Python::VariablesRepeat1),
        ("end", Python::End),
        ("except_clause", Python::ExceptClause),
        ("conditional_expression", Python::ConditionalExpression),
        ("variables", Python::Variables),
        ("argument_list_repeat1", Python::ArgumentListRepeat1),
        ("_comprehension_body", Python::ComprehensionBody),
        ("comparison_operator", Python::ComparisonOperator),
        ("future_import_statement", Python::FutureImportStatement),
        ("ERROR", Python::Error),
        ("~", Python::TILDE),
        ("string_repeat1", Python::StringRepeat1),
        ("break_statement", Python::BreakStatement),
        ("tuple", Python::Tuple),
        (":=", Python::COLONEQ),
        ("subscript_repeat1", Python::SubscriptRepeat1),
        ("dictionary_repeat1", Python::DictionaryRepeat1),
        ("false", Python::False),
        ("not", Python::Not),
        ("_newline", Python::Newline),
        (".", Python::DOT),
        ("ellipsis", Python::Ellipsis),
        ("if_clause", Python::IfClause),
        ("import_prefix_repeat1", Python::ImportPrefixRepeat1),
        ("await", Python::Await),
        ("format_expression", Python::FormatExpression),
        ("class_definition", Python::ClassDefinition),
        ("raise", Python::Raise),
        ("print_statement", Python::PrintStatement),
        ("string", Python::String),
        ("dictionary", Python::Dictionary),
        ("interpolation", Python::Interpolation),
        (
            "_expression_within_for_in_clause",
            Python::ExpressionWithinForInClause,
        ),
        ("assert_statement", Python::AssertStatement),
        ("_right_hand_side", Python::RightHandSide),
        ("dictionary_splat", Python::DictionarySplat),
        ("**=", Python::STARSTAREQ),
        ("list", Python::List),
        ("+", Python::PLUS),
        ("true", Python::True),
        ("while_statement", Python::WhileStatement),
        ("slice", Python::Slice),
        ("_expression", Python::Expression),
        ("float", Python::Float),
        (",", Python::COMMA),
        ("for", Python::For),
        (
            "comparison_operator_repeat1",
            Python::ComparisonOperatorRepeat1,
        ),
        ("named_expression", Python::NamedExpression),
        (">>=", Python::GTGTEQ),
        ("parameters", Python::Parameters),
        ("|", Python::PIPE),
        ("tuple_repeat1", Python::TupleRepeat1),
        ("}", Python::RBRACE),
        (">", Python::GT),
        ("list_splat", Python::ListSplat),
        ("*", Python::STAR),
        ("|=", Python::PIPEEQ),
        ("raise_statement", Python::RaiseStatement),
        ("elif", Python::Elif),
        ("@=", Python::ATEQ),
        ("dotted_name", Python::DottedName),
        ("*=", Python::STAREQ),
        ("integer", Python::Integer),
        ("attribute", Python::Attribute),
        ("return_statement", Python::ReturnStatement),
        ("!=", Python::BANGEQ),
        ("pair", Python::Pair),
        ("set_comprehension", Python::SetComprehension),
        ("argument_list", Python::ArgumentList),
        ("<", Python::LT),
        ("list_comprehension", Python::ListComprehension),
        ("typed_parameter", Python::TypedParameter),
        ("chevron", Python::Chevron),
        ("identifier", Python::Identifier),
        ("%", Python::PERCENT),
        ("if", Python::If),
    ]),
};

impl From<&str> for Python {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Python {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x as u8) }
    }
}

// Python == u16
impl PartialEq<u16> for Python {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Python::from(*x)
    }
}

// u16 == Python
impl PartialEq<Python> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Python) -> bool {
        *x == *self
    }
}
