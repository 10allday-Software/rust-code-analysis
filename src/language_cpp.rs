// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq)]
pub enum Cpp {
    End = 0,
    Identifier = 1,
    Macro = 2,
    LF = 3,
    HASHinclude = 4,
    HASHdefine = 5,
    LPAREN = 6,
    PreprocParamsToken1 = 7,
    DOTDOTDOT = 8,
    COMMA = 9,
    RPAREN = 10,
    HASHif = 11,
    HASHendif = 12,
    HASHifdef = 13,
    HASHifndef = 14,
    HASHelse = 15,
    HASHelif = 16,
    PreprocDirective = 17,
    PreprocArg = 18,
    LPAREN2 = 19,
    Defined = 20,
    BANG = 21,
    TILDE = 22,
    DASH = 23,
    PLUS = 24,
    STAR = 25,
    SLASH = 26,
    PERCENT = 27,
    PIPEPIPE = 28,
    AMPAMP = 29,
    PIPE = 30,
    CARET = 31,
    AMP = 32,
    EQEQ = 33,
    BANGEQ = 34,
    GT = 35,
    GTEQ = 36,
    LTEQ = 37,
    LT = 38,
    LTLT = 39,
    GTGT = 40,
    Cdecl = 41,
    Clrcall = 42,
    Stdcall = 43,
    Fastcall = 44,
    Thiscall = 45,
    Vectorcall = 46,
    WINAPI = 47,
    CALLBACK = 48,
    SEMI = 49,
    Typedef = 50,
    Extern = 51,
    Attribute = 52,
    LBRACE = 53,
    RBRACE = 54,
    LBRACK = 55,
    RBRACK = 56,
    EQ = 57,
    Static = 58,
    Register = 59,
    Inline = 60,
    Const = 61,
    CONST = 62,
    Volatile = 63,
    Restrict = 64,
    Vector = 65,
    Atomic = 66,
    Mutable = 67,
    Explicit = 68,
    Constexpr = 69,
    Signed = 70,
    Unsigned = 71,
    Long = 72,
    Short = 73,
    PrimitiveType = 74,
    Enum = 75,
    Struct = 76,
    Union = 77,
    COLON = 78,
    If = 79,
    Else = 80,
    Switch = 81,
    Case = 82,
    Default = 83,
    While = 84,
    Do = 85,
    For = 86,
    Return = 87,
    Break = 88,
    Continue = 89,
    Goto = 90,
    QMARK = 91,
    STAREQ = 92,
    SLASHEQ = 93,
    PERCENTEQ = 94,
    PLUSEQ = 95,
    DASHEQ = 96,
    LTLTEQ = 97,
    GTGTEQ = 98,
    AMPEQ = 99,
    CARETEQ = 100,
    PIPEEQ = 101,
    DASHDASH = 102,
    PLUSPLUS = 103,
    Sizeof = 104,
    DOT = 105,
    DASHGT = 106,
    NumberLiteral = 107,
    LSQUOTE = 108,
    USQUOTE = 109,
    USQUOTE2 = 110,
    U8SQUOTE = 111,
    SQUOTE = 112,
    CharLiteralToken1 = 113,
    LDQUOTE = 114,
    UDQUOTE = 115,
    UDQUOTE2 = 116,
    U8DQUOTE = 117,
    DQUOTE = 118,
    StringLiteralToken1 = 119,
    EscapeSequence = 120,
    SystemLibString = 121,
    True = 122,
    False = 123,
    Null = 124,
    Comment = 125,
    Class = 126,
    Final = 127,
    Override = 128,
    Virtual = 129,
    Public = 130,
    Private = 131,
    Protected = 132,
    Auto = 133,
    Typename = 134,
    Template = 135,
    GT2 = 136,
    Delete = 137,
    Friend = 138,
    Noexcept = 139,
    Throw = 140,
    Namespace = 141,
    Using = 142,
    Try = 143,
    Catch = 144,
    LBRACKLBRACK = 145,
    RBRACKRBRACK = 146,
    New = 147,
    COLONCOLON = 148,
    OperatorName = 149,
    Nullptr = 150,
    RawStringLiteral = 151,
    TranslationUnit = 152,
    OnlyMacro = 153,
    MacroCall = 154,
    OnlyMacroCall = 155,
    PreprocInclude = 156,
    PreprocDef = 157,
    PreprocFunctionDef = 158,
    PreprocParams = 159,
    PreprocCall = 160,
    PreprocIf = 161,
    PreprocIfdef = 162,
    PreprocElse = 163,
    PreprocElif = 164,
    PreprocIf2 = 165,
    PreprocIfdef2 = 166,
    PreprocElse2 = 167,
    PreprocElif2 = 168,
    LineContinuation = 169,
    PreprocCondition = 170,
    PreprocExpression = 171,
    PreprocParenthesizedExpression = 172,
    PreprocDefined = 173,
    PreprocUnaryExpression = 174,
    PreprocBinaryExpression = 175,
    CallConvention = 176,
    FunctionDefinition = 177,
    Declaration = 178,
    TypeDefinition = 179,
    DeclarationSpecifiers = 180,
    DeclarationSpecifiersNoType = 181,
    LinkageSpecification = 182,
    AttributeSpecifier = 183,
    DeclarationList = 184,
    Declarator = 185,
    FieldDeclarator = 186,
    TypeDeclarator = 187,
    AbstractDeclarator = 188,
    ParenthesizedDeclarator = 189,
    ParenthesizedDeclarator2 = 190,
    ParenthesizedDeclarator3 = 191,
    AbstractParenthesizedDeclarator = 192,
    PointerDeclarator = 193,
    PointerDeclarator2 = 194,
    PointerDeclarator3 = 195,
    AbstractPointerDeclarator = 196,
    FunctionDeclarator = 197,
    FunctionDeclarator2 = 198,
    FunctionDeclarator3 = 199,
    AbstractFunctionDeclarator = 200,
    ArrayDeclarator = 201,
    ArrayDeclarator2 = 202,
    ArrayDeclarator3 = 203,
    AbstractArrayDeclarator = 204,
    InitDeclarator = 205,
    CompoundStatement = 206,
    StorageClassSpecifier = 207,
    TypeQualifier = 208,
    TypeSpecifier = 209,
    SizedTypeSpecifier = 210,
    EnumSpecifier = 211,
    EnumeratorList = 212,
    StructSpecifier = 213,
    UnionSpecifier = 214,
    FieldDeclarationList = 215,
    FieldDeclarationListItem = 216,
    FieldDeclaration = 217,
    BitfieldClause = 218,
    Enumerator = 219,
    ParameterList = 220,
    ParameterDeclaration = 221,
    LabeledStatement = 222,
    ExpressionStatement = 223,
    IfStatement = 224,
    SwitchStatement = 225,
    CompoundStatement2 = 226,
    CaseStatement = 227,
    WhileStatement = 228,
    DoStatement = 229,
    ForStatement = 230,
    ReturnStatement = 231,
    BreakStatement = 232,
    ContinueStatement = 233,
    GotoStatement = 234,
    Expression = 235,
    CommaExpression = 236,
    ConditionalExpression = 237,
    AssignmentExpression = 238,
    PointerExpression = 239,
    UnaryExpression = 240,
    BinaryExpression = 241,
    UpdateExpression = 242,
    CastExpression = 243,
    TypeDescriptor = 244,
    SizeofExpression = 245,
    SubscriptExpression = 246,
    CallExpression = 247,
    ArgumentList = 248,
    FieldExpression = 249,
    CompoundLiteralExpression = 250,
    ParenthesizedExpression = 251,
    InitializerList = 252,
    InitializerPair = 253,
    SubscriptDesignator = 254,
    FieldDesignator = 255,
    CharLiteral = 256,
    ConcatenatedString = 257,
    StringLiteral = 258,
    EmptyDeclaration = 259,
    ClassSpecifier = 260,
    VirtualSpecifier = 261,
    VirtualFunctionSpecifier = 262,
    BaseClassClause = 263,
    DependentType = 264,
    TemplateDeclaration = 265,
    TemplateInstantiation = 266,
    TemplateParameterList = 267,
    TypeParameterDeclaration = 268,
    VariadicTypeParameterDeclaration = 269,
    OptionalTypeParameterDeclaration = 270,
    OptionalParameterDeclaration = 271,
    VariadicParameterDeclaration = 272,
    VariadicDeclarator = 273,
    ReferenceDeclarator = 274,
    FieldInitializerList = 275,
    FieldInitializer = 276,
    FunctionDefinition2 = 277,
    FunctionDefinition3 = 278,
    Declaration2 = 279,
    DefaultMethodClause = 280,
    DeleteMethodClause = 281,
    FriendDeclaration = 282,
    AccessSpecifier = 283,
    ReferenceDeclarator2 = 284,
    ReferenceDeclarator3 = 285,
    AbstractReferenceDeclarator = 286,
    StructuredBindingDeclarator = 287,
    TrailingReturnType = 288,
    Noexcept2 = 289,
    ThrowSpecifier = 290,
    TemplateType = 291,
    TemplateMethod = 292,
    TemplateFunction = 293,
    TemplateArgumentList = 294,
    NamespaceDefinition = 295,
    UsingDeclaration = 296,
    AliasDeclaration = 297,
    ForRangeLoop = 298,
    ThrowStatement = 299,
    TryStatement = 300,
    CatchClause = 301,
    Attribute2 = 302,
    NewExpression = 303,
    NewDeclarator = 304,
    DeleteExpression = 305,
    LambdaExpression = 306,
    LambdaCaptureSpecifier = 307,
    LambdaDefaultCapture = 308,
    DestructorName = 309,
    ScopedFieldIdentifier = 310,
    ScopedIdentifier = 311,
    ScopedTypeIdentifier = 312,
    ScopedNamespaceIdentifier = 313,
    TranslationUnitRepeat1 = 314,
    PreprocParamsRepeat1 = 315,
    PreprocIfInFieldDeclarationListRepeat1 = 316,
    PreprocExpressionRepeat1 = 317,
    FunctionDefinitionRepeat1 = 318,
    DeclarationRepeat1 = 319,
    TypeDefinitionRepeat1 = 320,
    TypeDefinitionRepeat2 = 321,
    DeclarationSpecifiersRepeat1 = 322,
    DeclarationSpecifiersRepeat2 = 323,
    PointerDeclaratorRepeat1 = 324,
    FunctionDeclaratorRepeat1 = 325,
    FunctionDeclaratorRepeat2 = 326,
    AbstractFunctionDeclaratorRepeat1 = 327,
    SizedTypeSpecifierRepeat1 = 328,
    EnumeratorListRepeat1 = 329,
    FieldDeclarationRepeat1 = 330,
    ParameterListRepeat1 = 331,
    SwitchBodyRepeat1 = 332,
    CaseStatementRepeat1 = 333,
    ArgumentListRepeat1 = 334,
    InitializerListRepeat1 = 335,
    InitializerPairRepeat1 = 336,
    ConcatenatedStringRepeat1 = 337,
    StringLiteralRepeat1 = 338,
    BaseClassClauseRepeat1 = 339,
    TemplateParameterListRepeat1 = 340,
    FieldInitializerListRepeat1 = 341,
    StructuredBindingDeclaratorRepeat1 = 342,
    ThrowSpecifierRepeat1 = 343,
    TemplateArgumentListRepeat1 = 344,
    TryStatementRepeat1 = 345,
    AttributeRepeat1 = 346,
    NamespaceIdentifier = 347,
    FieldIdentifier = 348,
    StatementIdentifier = 349,
    TypeIdentifier = 350,
    Error = 351,
}

impl Into<&'static str> for Cpp {
    fn into(self) -> &'static str {
        match self {
            Cpp::End => "end",
            Cpp::Identifier => "identifier",
            Cpp::Macro => "macro",
            Cpp::LF => "\n",
            Cpp::HASHinclude => "#include",
            Cpp::HASHdefine => "#define",
            Cpp::LPAREN => "(",
            Cpp::PreprocParamsToken1 => "preproc_params_token1",
            Cpp::DOTDOTDOT => "...",
            Cpp::COMMA => ",",
            Cpp::RPAREN => ")",
            Cpp::HASHif => "#if",
            Cpp::HASHendif => "#endif",
            Cpp::HASHifdef => "#ifdef",
            Cpp::HASHifndef => "#ifndef",
            Cpp::HASHelse => "#else",
            Cpp::HASHelif => "#elif",
            Cpp::PreprocDirective => "preproc_directive",
            Cpp::PreprocArg => "preproc_arg",
            Cpp::LPAREN2 => "(",
            Cpp::Defined => "defined",
            Cpp::BANG => "!",
            Cpp::TILDE => "~",
            Cpp::DASH => "-",
            Cpp::PLUS => "+",
            Cpp::STAR => "*",
            Cpp::SLASH => "/",
            Cpp::PERCENT => "%",
            Cpp::PIPEPIPE => "||",
            Cpp::AMPAMP => "&&",
            Cpp::PIPE => "|",
            Cpp::CARET => "^",
            Cpp::AMP => "&",
            Cpp::EQEQ => "==",
            Cpp::BANGEQ => "!=",
            Cpp::GT => ">",
            Cpp::GTEQ => ">=",
            Cpp::LTEQ => "<=",
            Cpp::LT => "<",
            Cpp::LTLT => "<<",
            Cpp::GTGT => ">>",
            Cpp::Cdecl => "__cdecl",
            Cpp::Clrcall => "__clrcall",
            Cpp::Stdcall => "__stdcall",
            Cpp::Fastcall => "__fastcall",
            Cpp::Thiscall => "__thiscall",
            Cpp::Vectorcall => "__vectorcall",
            Cpp::WINAPI => "WINAPI",
            Cpp::CALLBACK => "CALLBACK",
            Cpp::SEMI => ";",
            Cpp::Typedef => "typedef",
            Cpp::Extern => "extern",
            Cpp::Attribute => "__attribute__",
            Cpp::LBRACE => "{",
            Cpp::RBRACE => "}",
            Cpp::LBRACK => "[",
            Cpp::RBRACK => "]",
            Cpp::EQ => "=",
            Cpp::Static => "static",
            Cpp::Register => "register",
            Cpp::Inline => "inline",
            Cpp::Const => "const",
            Cpp::CONST => "CONST",
            Cpp::Volatile => "volatile",
            Cpp::Restrict => "restrict",
            Cpp::Vector => "vector",
            Cpp::Atomic => "_Atomic",
            Cpp::Mutable => "mutable",
            Cpp::Explicit => "explicit",
            Cpp::Constexpr => "constexpr",
            Cpp::Signed => "signed",
            Cpp::Unsigned => "unsigned",
            Cpp::Long => "long",
            Cpp::Short => "short",
            Cpp::PrimitiveType => "primitive_type",
            Cpp::Enum => "enum",
            Cpp::Struct => "struct",
            Cpp::Union => "union",
            Cpp::COLON => ":",
            Cpp::If => "if",
            Cpp::Else => "else",
            Cpp::Switch => "switch",
            Cpp::Case => "case",
            Cpp::Default => "default",
            Cpp::While => "while",
            Cpp::Do => "do",
            Cpp::For => "for",
            Cpp::Return => "return",
            Cpp::Break => "break",
            Cpp::Continue => "continue",
            Cpp::Goto => "goto",
            Cpp::QMARK => "?",
            Cpp::STAREQ => "*=",
            Cpp::SLASHEQ => "/=",
            Cpp::PERCENTEQ => "%=",
            Cpp::PLUSEQ => "+=",
            Cpp::DASHEQ => "-=",
            Cpp::LTLTEQ => "<<=",
            Cpp::GTGTEQ => ">>=",
            Cpp::AMPEQ => "&=",
            Cpp::CARETEQ => "^=",
            Cpp::PIPEEQ => "|=",
            Cpp::DASHDASH => "--",
            Cpp::PLUSPLUS => "++",
            Cpp::Sizeof => "sizeof",
            Cpp::DOT => ".",
            Cpp::DASHGT => "->",
            Cpp::NumberLiteral => "number_literal",
            Cpp::LSQUOTE => "L'",
            Cpp::USQUOTE => "u'",
            Cpp::USQUOTE2 => "U'",
            Cpp::U8SQUOTE => "u8'",
            Cpp::SQUOTE => "'",
            Cpp::CharLiteralToken1 => "char_literal_token1",
            Cpp::LDQUOTE => "L\"",
            Cpp::UDQUOTE => "u\"",
            Cpp::UDQUOTE2 => "U\"",
            Cpp::U8DQUOTE => "u8\"",
            Cpp::DQUOTE => "\"",
            Cpp::StringLiteralToken1 => "string_literal_token1",
            Cpp::EscapeSequence => "escape_sequence",
            Cpp::SystemLibString => "system_lib_string",
            Cpp::True => "true",
            Cpp::False => "false",
            Cpp::Null => "null",
            Cpp::Comment => "comment",
            Cpp::Class => "class",
            Cpp::Final => "final",
            Cpp::Override => "override",
            Cpp::Virtual => "virtual",
            Cpp::Public => "public",
            Cpp::Private => "private",
            Cpp::Protected => "protected",
            Cpp::Auto => "auto",
            Cpp::Typename => "typename",
            Cpp::Template => "template",
            Cpp::GT2 => ">",
            Cpp::Delete => "delete",
            Cpp::Friend => "friend",
            Cpp::Noexcept => "noexcept",
            Cpp::Throw => "throw",
            Cpp::Namespace => "namespace",
            Cpp::Using => "using",
            Cpp::Try => "try",
            Cpp::Catch => "catch",
            Cpp::LBRACKLBRACK => "[[",
            Cpp::RBRACKRBRACK => "]]",
            Cpp::New => "new",
            Cpp::COLONCOLON => "::",
            Cpp::OperatorName => "operator_name",
            Cpp::Nullptr => "nullptr",
            Cpp::RawStringLiteral => "raw_string_literal",
            Cpp::TranslationUnit => "translation_unit",
            Cpp::OnlyMacro => "only_macro",
            Cpp::MacroCall => "macro_call",
            Cpp::OnlyMacroCall => "only_macro_call",
            Cpp::PreprocInclude => "preproc_include",
            Cpp::PreprocDef => "preproc_def",
            Cpp::PreprocFunctionDef => "preproc_function_def",
            Cpp::PreprocParams => "preproc_params",
            Cpp::PreprocCall => "preproc_call",
            Cpp::PreprocIf => "preproc_if",
            Cpp::PreprocIfdef => "preproc_ifdef",
            Cpp::PreprocElse => "preproc_else",
            Cpp::PreprocElif => "preproc_elif",
            Cpp::PreprocIf2 => "preproc_if",
            Cpp::PreprocIfdef2 => "preproc_ifdef",
            Cpp::PreprocElse2 => "preproc_else",
            Cpp::PreprocElif2 => "preproc_elif",
            Cpp::LineContinuation => "line_continuation",
            Cpp::PreprocCondition => "preproc_condition",
            Cpp::PreprocExpression => "preproc_expression",
            Cpp::PreprocParenthesizedExpression => "preproc_parenthesized_expression",
            Cpp::PreprocDefined => "preproc_defined",
            Cpp::PreprocUnaryExpression => "preproc_unary_expression",
            Cpp::PreprocBinaryExpression => "preproc_binary_expression",
            Cpp::CallConvention => "call_convention",
            Cpp::FunctionDefinition => "function_definition",
            Cpp::Declaration => "declaration",
            Cpp::TypeDefinition => "type_definition",
            Cpp::DeclarationSpecifiers => "_declaration_specifiers",
            Cpp::DeclarationSpecifiersNoType => "_declaration_specifiers_no_type",
            Cpp::LinkageSpecification => "linkage_specification",
            Cpp::AttributeSpecifier => "attribute_specifier",
            Cpp::DeclarationList => "declaration_list",
            Cpp::Declarator => "_declarator",
            Cpp::FieldDeclarator => "_field_declarator",
            Cpp::TypeDeclarator => "_type_declarator",
            Cpp::AbstractDeclarator => "_abstract_declarator",
            Cpp::ParenthesizedDeclarator => "parenthesized_declarator",
            Cpp::ParenthesizedDeclarator2 => "parenthesized_declarator",
            Cpp::ParenthesizedDeclarator3 => "parenthesized_declarator",
            Cpp::AbstractParenthesizedDeclarator => "abstract_parenthesized_declarator",
            Cpp::PointerDeclarator => "pointer_declarator",
            Cpp::PointerDeclarator2 => "pointer_declarator",
            Cpp::PointerDeclarator3 => "pointer_declarator",
            Cpp::AbstractPointerDeclarator => "abstract_pointer_declarator",
            Cpp::FunctionDeclarator => "function_declarator",
            Cpp::FunctionDeclarator2 => "function_declarator",
            Cpp::FunctionDeclarator3 => "function_declarator",
            Cpp::AbstractFunctionDeclarator => "abstract_function_declarator",
            Cpp::ArrayDeclarator => "array_declarator",
            Cpp::ArrayDeclarator2 => "array_declarator",
            Cpp::ArrayDeclarator3 => "array_declarator",
            Cpp::AbstractArrayDeclarator => "abstract_array_declarator",
            Cpp::InitDeclarator => "init_declarator",
            Cpp::CompoundStatement => "compound_statement",
            Cpp::StorageClassSpecifier => "storage_class_specifier",
            Cpp::TypeQualifier => "type_qualifier",
            Cpp::TypeSpecifier => "_type_specifier",
            Cpp::SizedTypeSpecifier => "sized_type_specifier",
            Cpp::EnumSpecifier => "enum_specifier",
            Cpp::EnumeratorList => "enumerator_list",
            Cpp::StructSpecifier => "struct_specifier",
            Cpp::UnionSpecifier => "union_specifier",
            Cpp::FieldDeclarationList => "field_declaration_list",
            Cpp::FieldDeclarationListItem => "_field_declaration_list_item",
            Cpp::FieldDeclaration => "field_declaration",
            Cpp::BitfieldClause => "bitfield_clause",
            Cpp::Enumerator => "enumerator",
            Cpp::ParameterList => "parameter_list",
            Cpp::ParameterDeclaration => "parameter_declaration",
            Cpp::LabeledStatement => "labeled_statement",
            Cpp::ExpressionStatement => "expression_statement",
            Cpp::IfStatement => "if_statement",
            Cpp::SwitchStatement => "switch_statement",
            Cpp::CompoundStatement2 => "compound_statement",
            Cpp::CaseStatement => "case_statement",
            Cpp::WhileStatement => "while_statement",
            Cpp::DoStatement => "do_statement",
            Cpp::ForStatement => "for_statement",
            Cpp::ReturnStatement => "return_statement",
            Cpp::BreakStatement => "break_statement",
            Cpp::ContinueStatement => "continue_statement",
            Cpp::GotoStatement => "goto_statement",
            Cpp::Expression => "_expression",
            Cpp::CommaExpression => "comma_expression",
            Cpp::ConditionalExpression => "conditional_expression",
            Cpp::AssignmentExpression => "assignment_expression",
            Cpp::PointerExpression => "pointer_expression",
            Cpp::UnaryExpression => "unary_expression",
            Cpp::BinaryExpression => "binary_expression",
            Cpp::UpdateExpression => "update_expression",
            Cpp::CastExpression => "cast_expression",
            Cpp::TypeDescriptor => "type_descriptor",
            Cpp::SizeofExpression => "sizeof_expression",
            Cpp::SubscriptExpression => "subscript_expression",
            Cpp::CallExpression => "call_expression",
            Cpp::ArgumentList => "argument_list",
            Cpp::FieldExpression => "field_expression",
            Cpp::CompoundLiteralExpression => "compound_literal_expression",
            Cpp::ParenthesizedExpression => "parenthesized_expression",
            Cpp::InitializerList => "initializer_list",
            Cpp::InitializerPair => "initializer_pair",
            Cpp::SubscriptDesignator => "subscript_designator",
            Cpp::FieldDesignator => "field_designator",
            Cpp::CharLiteral => "char_literal",
            Cpp::ConcatenatedString => "concatenated_string",
            Cpp::StringLiteral => "string_literal",
            Cpp::EmptyDeclaration => "_empty_declaration",
            Cpp::ClassSpecifier => "class_specifier",
            Cpp::VirtualSpecifier => "virtual_specifier",
            Cpp::VirtualFunctionSpecifier => "virtual_function_specifier",
            Cpp::BaseClassClause => "base_class_clause",
            Cpp::DependentType => "dependent_type",
            Cpp::TemplateDeclaration => "template_declaration",
            Cpp::TemplateInstantiation => "template_instantiation",
            Cpp::TemplateParameterList => "template_parameter_list",
            Cpp::TypeParameterDeclaration => "type_parameter_declaration",
            Cpp::VariadicTypeParameterDeclaration => "variadic_type_parameter_declaration",
            Cpp::OptionalTypeParameterDeclaration => "optional_type_parameter_declaration",
            Cpp::OptionalParameterDeclaration => "optional_parameter_declaration",
            Cpp::VariadicParameterDeclaration => "variadic_parameter_declaration",
            Cpp::VariadicDeclarator => "variadic_declarator",
            Cpp::ReferenceDeclarator => "reference_declarator",
            Cpp::FieldInitializerList => "field_initializer_list",
            Cpp::FieldInitializer => "field_initializer",
            Cpp::FunctionDefinition2 => "function_definition",
            Cpp::FunctionDefinition3 => "function_definition",
            Cpp::Declaration2 => "declaration",
            Cpp::DefaultMethodClause => "default_method_clause",
            Cpp::DeleteMethodClause => "delete_method_clause",
            Cpp::FriendDeclaration => "friend_declaration",
            Cpp::AccessSpecifier => "access_specifier",
            Cpp::ReferenceDeclarator2 => "reference_declarator",
            Cpp::ReferenceDeclarator3 => "reference_declarator",
            Cpp::AbstractReferenceDeclarator => "abstract_reference_declarator",
            Cpp::StructuredBindingDeclarator => "structured_binding_declarator",
            Cpp::TrailingReturnType => "trailing_return_type",
            Cpp::Noexcept2 => "noexcept",
            Cpp::ThrowSpecifier => "throw_specifier",
            Cpp::TemplateType => "template_type",
            Cpp::TemplateMethod => "template_method",
            Cpp::TemplateFunction => "template_function",
            Cpp::TemplateArgumentList => "template_argument_list",
            Cpp::NamespaceDefinition => "namespace_definition",
            Cpp::UsingDeclaration => "using_declaration",
            Cpp::AliasDeclaration => "alias_declaration",
            Cpp::ForRangeLoop => "for_range_loop",
            Cpp::ThrowStatement => "throw_statement",
            Cpp::TryStatement => "try_statement",
            Cpp::CatchClause => "catch_clause",
            Cpp::Attribute2 => "attribute",
            Cpp::NewExpression => "new_expression",
            Cpp::NewDeclarator => "new_declarator",
            Cpp::DeleteExpression => "delete_expression",
            Cpp::LambdaExpression => "lambda_expression",
            Cpp::LambdaCaptureSpecifier => "lambda_capture_specifier",
            Cpp::LambdaDefaultCapture => "lambda_default_capture",
            Cpp::DestructorName => "destructor_name",
            Cpp::ScopedFieldIdentifier => "scoped_field_identifier",
            Cpp::ScopedIdentifier => "scoped_identifier",
            Cpp::ScopedTypeIdentifier => "scoped_type_identifier",
            Cpp::ScopedNamespaceIdentifier => "scoped_namespace_identifier",
            Cpp::TranslationUnitRepeat1 => "translation_unit_repeat1",
            Cpp::PreprocParamsRepeat1 => "preproc_params_repeat1",
            Cpp::PreprocIfInFieldDeclarationListRepeat1 => {
                "preproc_if_in_field_declaration_list_repeat1"
            }
            Cpp::PreprocExpressionRepeat1 => "preproc_expression_repeat1",
            Cpp::FunctionDefinitionRepeat1 => "function_definition_repeat1",
            Cpp::DeclarationRepeat1 => "declaration_repeat1",
            Cpp::TypeDefinitionRepeat1 => "type_definition_repeat1",
            Cpp::TypeDefinitionRepeat2 => "type_definition_repeat2",
            Cpp::DeclarationSpecifiersRepeat1 => "_declaration_specifiers_repeat1",
            Cpp::DeclarationSpecifiersRepeat2 => "_declaration_specifiers_repeat2",
            Cpp::PointerDeclaratorRepeat1 => "pointer_declarator_repeat1",
            Cpp::FunctionDeclaratorRepeat1 => "function_declarator_repeat1",
            Cpp::FunctionDeclaratorRepeat2 => "function_declarator_repeat2",
            Cpp::AbstractFunctionDeclaratorRepeat1 => "abstract_function_declarator_repeat1",
            Cpp::SizedTypeSpecifierRepeat1 => "sized_type_specifier_repeat1",
            Cpp::EnumeratorListRepeat1 => "enumerator_list_repeat1",
            Cpp::FieldDeclarationRepeat1 => "field_declaration_repeat1",
            Cpp::ParameterListRepeat1 => "parameter_list_repeat1",
            Cpp::SwitchBodyRepeat1 => "switch_body_repeat1",
            Cpp::CaseStatementRepeat1 => "case_statement_repeat1",
            Cpp::ArgumentListRepeat1 => "argument_list_repeat1",
            Cpp::InitializerListRepeat1 => "initializer_list_repeat1",
            Cpp::InitializerPairRepeat1 => "initializer_pair_repeat1",
            Cpp::ConcatenatedStringRepeat1 => "concatenated_string_repeat1",
            Cpp::StringLiteralRepeat1 => "string_literal_repeat1",
            Cpp::BaseClassClauseRepeat1 => "base_class_clause_repeat1",
            Cpp::TemplateParameterListRepeat1 => "template_parameter_list_repeat1",
            Cpp::FieldInitializerListRepeat1 => "field_initializer_list_repeat1",
            Cpp::StructuredBindingDeclaratorRepeat1 => "structured_binding_declarator_repeat1",
            Cpp::ThrowSpecifierRepeat1 => "throw_specifier_repeat1",
            Cpp::TemplateArgumentListRepeat1 => "template_argument_list_repeat1",
            Cpp::TryStatementRepeat1 => "try_statement_repeat1",
            Cpp::AttributeRepeat1 => "attribute_repeat1",
            Cpp::NamespaceIdentifier => "namespace_identifier",
            Cpp::FieldIdentifier => "field_identifier",
            Cpp::StatementIdentifier => "statement_identifier",
            Cpp::TypeIdentifier => "type_identifier",
            Cpp::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Cpp> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 25),
        (0, 2),
        (0, 10),
        (0, 106),
        (0, 218),
        (0, 228),
        (0, 0),
        (0, 40),
        (0, 3),
        (0, 144),
        (0, 0),
        (0, 197),
        (1, 0),
        (1, 11),
        (0, 6),
        (0, 46),
        (0, 24),
        (0, 109),
        (1, 58),
        (0, 94),
        (0, 55),
        (0, 2),
        (0, 58),
        (0, 153),
        (0, 18),
        (0, 32),
        (1, 61),
        (2, 78),
        (3, 39),
        (0, 327),
        (5, 19),
        (0, 146),
        (0, 152),
        (0, 132),
        (0, 196),
        (0, 98),
        (0, 98),
        (1, 165),
        (0, 290),
        (0, 84),
        (3, 131),
        (17, 51),
        (1, 3),
        (0, 144),
        (2, 11),
        (7, 197),
        (0, 282),
        (0, 8),
        (0, 44),
        (0, 21),
        (0, 1),
        (0, 131),
        (0, 2),
        (11, 133),
        (2, 297),
        (0, 3),
        (1, 8),
        (3, 179),
        (6, 103),
        (2, 187),
        (0, 91),
        (0, 0),
        (4, 140),
        (0, 95),
        (0, 75),
        (1, 73),
    ]),
    entries: ::phf::Slice::Static(&[
        ("attribute_specifier", Cpp::AttributeSpecifier),
        (
            "preproc_if_in_field_declaration_list_repeat1",
            Cpp::PreprocIfInFieldDeclarationListRepeat1,
        ),
        ("namespace_definition", Cpp::NamespaceDefinition),
        ("declaration_repeat1", Cpp::DeclarationRepeat1),
        ("signed", Cpp::Signed),
        ("continue", Cpp::Continue),
        ("access_specifier", Cpp::AccessSpecifier),
        ("nullptr", Cpp::Nullptr),
        ("field_declaration_list", Cpp::FieldDeclarationList),
        ("typename", Cpp::Typename),
        ("if", Cpp::If),
        ("inline", Cpp::Inline),
        ("noexcept", Cpp::Noexcept),
        ("register", Cpp::Register),
        ("throw_specifier", Cpp::ThrowSpecifier),
        ("namespace_identifier", Cpp::NamespaceIdentifier),
        ("break", Cpp::Break),
        ("-=", Cpp::DASHEQ),
        ("declaration_list", Cpp::DeclarationList),
        ("?", Cpp::QMARK),
        ("sizeof", Cpp::Sizeof),
        ("catch_clause", Cpp::CatchClause),
        ("virtual_function_specifier", Cpp::VirtualFunctionSpecifier),
        ("raw_string_literal", Cpp::RawStringLiteral),
        ("attribute_repeat1", Cpp::AttributeRepeat1),
        ("_declaration_specifiers", Cpp::DeclarationSpecifiers),
        (
            "optional_parameter_declaration",
            Cpp::OptionalParameterDeclaration,
        ),
        ("sized_type_specifier", Cpp::SizedTypeSpecifier),
        ("long", Cpp::Long),
        ("|", Cpp::PIPE),
        ("enumerator_list", Cpp::EnumeratorList),
        (
            "concatenated_string_repeat1",
            Cpp::ConcatenatedStringRepeat1,
        ),
        ("continue_statement", Cpp::ContinueStatement),
        ("parameter_list", Cpp::ParameterList),
        ("]]", Cpp::RBRACKRBRACK),
        (
            "variadic_type_parameter_declaration",
            Cpp::VariadicTypeParameterDeclaration,
        ),
        ("L\\\"", Cpp::LDQUOTE),
        ("extern", Cpp::Extern),
        ("template_method", Cpp::TemplateMethod),
        ("subscript_designator", Cpp::SubscriptDesignator),
        ("namespace", Cpp::Namespace),
        ("<", Cpp::LT),
        ("template_argument_list", Cpp::TemplateArgumentList),
        ("template_function", Cpp::TemplateFunction),
        ("escape_sequence", Cpp::EscapeSequence),
        ("translation_unit", Cpp::TranslationUnit),
        (":", Cpp::COLON),
        (
            "_field_declaration_list_item",
            Cpp::FieldDeclarationListItem,
        ),
        ("#ifdef", Cpp::HASHifdef),
        ("char_literal", Cpp::CharLiteral),
        ("line_continuation", Cpp::LineContinuation),
        ("subscript_expression", Cpp::SubscriptExpression),
        ("#endif", Cpp::HASHendif),
        (
            "abstract_reference_declarator",
            Cpp::AbstractReferenceDeclarator,
        ),
        ("preproc_if", Cpp::PreprocIf),
        ("enum", Cpp::Enum),
        ("only_macro", Cpp::OnlyMacro),
        ("operator_name", Cpp::OperatorName),
        ("preproc_function_def", Cpp::PreprocFunctionDef),
        ("constexpr", Cpp::Constexpr),
        (
            "field_initializer_list_repeat1",
            Cpp::FieldInitializerListRepeat1,
        ),
        ("CALLBACK", Cpp::CALLBACK),
        ("&", Cpp::AMP),
        ("pointer_declarator_repeat1", Cpp::PointerDeclaratorRepeat1),
        ("catch", Cpp::Catch),
        ("vector", Cpp::Vector),
        ("#elif", Cpp::HASHelif),
        ("field_initializer_list", Cpp::FieldInitializerList),
        ("_expression", Cpp::Expression),
        ("default_method_clause", Cpp::DefaultMethodClause),
        ("struct", Cpp::Struct),
        ("argument_list", Cpp::ArgumentList),
        (
            "abstract_parenthesized_declarator",
            Cpp::AbstractParenthesizedDeclarator,
        ),
        ("<=", Cpp::LTEQ),
        ("friend_declaration", Cpp::FriendDeclaration),
        (
            "structured_binding_declarator",
            Cpp::StructuredBindingDeclarator,
        ),
        ("ERROR", Cpp::Error),
        ("array_declarator", Cpp::ArrayDeclarator),
        ("throw_statement", Cpp::ThrowStatement),
        ("template_declaration", Cpp::TemplateDeclaration),
        ("preproc_expression_repeat1", Cpp::PreprocExpressionRepeat1),
        ("preproc_call", Cpp::PreprocCall),
        ("-", Cpp::DASH),
        ("delete_method_clause", Cpp::DeleteMethodClause),
        ("bitfield_clause", Cpp::BitfieldClause),
        ("call_expression", Cpp::CallExpression),
        ("_empty_declaration", Cpp::EmptyDeclaration),
        ("<<=", Cpp::LTLTEQ),
        ("reference_declarator", Cpp::ReferenceDeclarator),
        ("*", Cpp::STAR),
        (".", Cpp::DOT),
        ("%", Cpp::PERCENT),
        ("u8\'", Cpp::U8SQUOTE),
        (
            "_declaration_specifiers_no_type",
            Cpp::DeclarationSpecifiersNoType,
        ),
        ("field_identifier", Cpp::FieldIdentifier),
        ("base_class_clause_repeat1", Cpp::BaseClassClauseRepeat1),
        ("while", Cpp::While),
        ("binary_expression", Cpp::BinaryExpression),
        ("++", Cpp::PLUSPLUS),
        ("string_literal_repeat1", Cpp::StringLiteralRepeat1),
        ("typedef", Cpp::Typedef),
        ("comma_expression", Cpp::CommaExpression),
        ("||", Cpp::PIPEPIPE),
        ("if_statement", Cpp::IfStatement),
        ("number_literal", Cpp::NumberLiteral),
        ("enumerator", Cpp::Enumerator),
        ("init_declarator", Cpp::InitDeclarator),
        ("/", Cpp::SLASH),
        ("!", Cpp::BANG),
        ("virtual", Cpp::Virtual),
        ("lambda_default_capture", Cpp::LambdaDefaultCapture),
        ("destructor_name", Cpp::DestructorName),
        ("system_lib_string", Cpp::SystemLibString),
        ("try_statement", Cpp::TryStatement),
        ("true", Cpp::True),
        ("type_qualifier", Cpp::TypeQualifier),
        ("for_statement", Cpp::ForStatement),
        ("|=", Cpp::PIPEEQ),
        ("return_statement", Cpp::ReturnStatement),
        ("sizeof_expression", Cpp::SizeofExpression),
        ("parameter_list_repeat1", Cpp::ParameterListRepeat1),
        ("+=", Cpp::PLUSEQ),
        ("template_type", Cpp::TemplateType),
        ("translation_unit_repeat1", Cpp::TranslationUnitRepeat1),
        (",", Cpp::COMMA),
        ("try", Cpp::Try),
        ("restrict", Cpp::Restrict),
        ("preproc_arg", Cpp::PreprocArg),
        ("do_statement", Cpp::DoStatement),
        ("template_instantiation", Cpp::TemplateInstantiation),
        ("parameter_declaration", Cpp::ParameterDeclaration),
        (
            "scoped_namespace_identifier",
            Cpp::ScopedNamespaceIdentifier,
        ),
        ("L\'", Cpp::LSQUOTE),
        (
            "_declaration_specifiers_repeat1",
            Cpp::DeclarationSpecifiersRepeat1,
        ),
        ("initializer_pair_repeat1", Cpp::InitializerPairRepeat1),
        ("static", Cpp::Static),
        (
            "function_declarator_repeat2",
            Cpp::FunctionDeclaratorRepeat2,
        ),
        ("call_convention", Cpp::CallConvention),
        (
            "function_definition_repeat1",
            Cpp::FunctionDefinitionRepeat1,
        ),
        ("update_expression", Cpp::UpdateExpression),
        ("switch_statement", Cpp::SwitchStatement),
        ("throw_specifier_repeat1", Cpp::ThrowSpecifierRepeat1),
        ("switch", Cpp::Switch),
        ("\\\"", Cpp::DQUOTE),
        ("char_literal_token1", Cpp::CharLiteralToken1),
        ("__fastcall", Cpp::Fastcall),
        ("string_literal", Cpp::StringLiteral),
        (
            "template_parameter_list_repeat1",
            Cpp::TemplateParameterListRepeat1,
        ),
        ("else", Cpp::Else),
        ("throw", Cpp::Throw),
        ("preproc_unary_expression", Cpp::PreprocUnaryExpression),
        (
            "function_declarator_repeat1",
            Cpp::FunctionDeclaratorRepeat1,
        ),
        ("preproc_def", Cpp::PreprocDef),
        ("=", Cpp::EQ),
        ("scoped_field_identifier", Cpp::ScopedFieldIdentifier),
        ("type_definition", Cpp::TypeDefinition),
        ("string_literal_token1", Cpp::StringLiteralToken1),
        ("<<", Cpp::LTLT),
        (
            "preproc_parenthesized_expression",
            Cpp::PreprocParenthesizedExpression,
        ),
        ("type_descriptor", Cpp::TypeDescriptor),
        ("labeled_statement", Cpp::LabeledStatement),
        ("__thiscall", Cpp::Thiscall),
        (
            "abstract_function_declarator",
            Cpp::AbstractFunctionDeclarator,
        ),
        ("break_statement", Cpp::BreakStatement),
        ("u\\\"", Cpp::UDQUOTE),
        ("default", Cpp::Default),
        ("volatile", Cpp::Volatile),
        ("template_parameter_list", Cpp::TemplateParameterList),
        ("field_declaration_repeat1", Cpp::FieldDeclarationRepeat1),
        ("class_specifier", Cpp::ClassSpecifier),
        ("using_declaration", Cpp::UsingDeclaration),
        ("only_macro_call", Cpp::OnlyMacroCall),
        ("preproc_directive", Cpp::PreprocDirective),
        ("variadic_declarator", Cpp::VariadicDeclarator),
        ("_Atomic", Cpp::Atomic),
        ("field_declaration", Cpp::FieldDeclaration),
        ("preproc_else", Cpp::PreprocElse),
        (">=", Cpp::GTEQ),
        ("preproc_include", Cpp::PreprocInclude),
        ("type_definition_repeat2", Cpp::TypeDefinitionRepeat2),
        ("protected", Cpp::Protected),
        ("(", Cpp::LPAREN),
        ("for", Cpp::For),
        ("new_declarator", Cpp::NewDeclarator),
        (")", Cpp::RPAREN),
        (";", Cpp::SEMI),
        ("/=", Cpp::SLASHEQ),
        ("false", Cpp::False),
        ("initializer_list_repeat1", Cpp::InitializerListRepeat1),
        ("type_identifier", Cpp::TypeIdentifier),
        ("parenthesized_declarator", Cpp::ParenthesizedDeclarator),
        ("#define", Cpp::HASHdefine),
        ("private", Cpp::Private),
        ("end", Cpp::End),
        ("for_range_loop", Cpp::ForRangeLoop),
        ("function_definition", Cpp::FunctionDefinition),
        ("preproc_condition", Cpp::PreprocCondition),
        ("storage_class_specifier", Cpp::StorageClassSpecifier),
        ("struct_specifier", Cpp::StructSpecifier),
        ("field_expression", Cpp::FieldExpression),
        ("macro_call", Cpp::MacroCall),
        ("virtual_specifier", Cpp::VirtualSpecifier),
        ("conditional_expression", Cpp::ConditionalExpression),
        ("{", Cpp::LBRACE),
        ("declaration", Cpp::Declaration),
        ("+", Cpp::PLUS),
        ("field_initializer", Cpp::FieldInitializer),
        ("preproc_elif", Cpp::PreprocElif),
        ("defined", Cpp::Defined),
        ("}", Cpp::RBRACE),
        ("WINAPI", Cpp::WINAPI),
        ("lambda_expression", Cpp::LambdaExpression),
        ("&=", Cpp::AMPEQ),
        (
            "template_argument_list_repeat1",
            Cpp::TemplateArgumentListRepeat1,
        ),
        ("[", Cpp::LBRACK),
        ("preproc_expression", Cpp::PreprocExpression),
        ("using", Cpp::Using),
        (
            "optional_type_parameter_declaration",
            Cpp::OptionalTypeParameterDeclaration,
        ),
        ("auto", Cpp::Auto),
        ("[[", Cpp::LBRACKLBRACK),
        ("u8\\\"", Cpp::U8DQUOTE),
        ("::", Cpp::COLONCOLON),
        ("null", Cpp::Null),
        ("switch_body_repeat1", Cpp::SwitchBodyRepeat1),
        ("union_specifier", Cpp::UnionSpecifier),
        ("function_declarator", Cpp::FunctionDeclarator),
        ("*=", Cpp::STAREQ),
        ("override", Cpp::Override),
        ("\'", Cpp::SQUOTE),
        ("delete", Cpp::Delete),
        ("!=", Cpp::BANGEQ),
        ("_field_declarator", Cpp::FieldDeclarator),
        ("^", Cpp::CARET),
        ("argument_list_repeat1", Cpp::ArgumentListRepeat1),
        ("comment", Cpp::Comment),
        ("public", Cpp::Public),
        ("__stdcall", Cpp::Stdcall),
        ("initializer_list", Cpp::InitializerList),
        ("]", Cpp::RBRACK),
        ("const", Cpp::Const),
        ("%=", Cpp::PERCENTEQ),
        ("class", Cpp::Class),
        ("try_statement_repeat1", Cpp::TryStatementRepeat1),
        ("mutable", Cpp::Mutable),
        ("do", Cpp::Do),
        ("__cdecl", Cpp::Cdecl),
        ("identifier", Cpp::Identifier),
        ("cast_expression", Cpp::CastExpression),
        ("trailing_return_type", Cpp::TrailingReturnType),
        ("abstract_array_declarator", Cpp::AbstractArrayDeclarator),
        ("pointer_declarator", Cpp::PointerDeclarator),
        ("compound_statement", Cpp::CompoundStatement),
        (">>", Cpp::GTGT),
        ("new", Cpp::New),
        ("preproc_defined", Cpp::PreprocDefined),
        ("dependent_type", Cpp::DependentType),
        ("type_parameter_declaration", Cpp::TypeParameterDeclaration),
        ("_declarator", Cpp::Declarator),
        ("scoped_type_identifier", Cpp::ScopedTypeIdentifier),
        ("short", Cpp::Short),
        (
            "structured_binding_declarator_repeat1",
            Cpp::StructuredBindingDeclaratorRepeat1,
        ),
        ("linkage_specification", Cpp::LinkageSpecification),
        (">>=", Cpp::GTGTEQ),
        ("initializer_pair", Cpp::InitializerPair),
        ("union", Cpp::Union),
        ("field_designator", Cpp::FieldDesignator),
        ("final", Cpp::Final),
        ("unary_expression", Cpp::UnaryExpression),
        ("delete_expression", Cpp::DeleteExpression),
        ("preproc_params", Cpp::PreprocParams),
        (
            "compound_literal_expression",
            Cpp::CompoundLiteralExpression,
        ),
        ("explicit", Cpp::Explicit),
        ("_type_declarator", Cpp::TypeDeclarator),
        ("alias_declaration", Cpp::AliasDeclaration),
        ("\\n", Cpp::LF),
        ("u\'", Cpp::USQUOTE),
        ("scoped_identifier", Cpp::ScopedIdentifier),
        ("CONST", Cpp::CONST),
        ("__attribute__", Cpp::Attribute),
        ("__clrcall", Cpp::Clrcall),
        ("==", Cpp::EQEQ),
        (
            "sized_type_specifier_repeat1",
            Cpp::SizedTypeSpecifierRepeat1,
        ),
        (">", Cpp::GT),
        (
            "abstract_pointer_declarator",
            Cpp::AbstractPointerDeclarator,
        ),
        ("new_expression", Cpp::NewExpression),
        ("preproc_params_repeat1", Cpp::PreprocParamsRepeat1),
        ("parenthesized_expression", Cpp::ParenthesizedExpression),
        ("_abstract_declarator", Cpp::AbstractDeclarator),
        ("&&", Cpp::AMPAMP),
        ("assignment_expression", Cpp::AssignmentExpression),
        ("unsigned", Cpp::Unsigned),
        ("#if", Cpp::HASHif),
        ("__vectorcall", Cpp::Vectorcall),
        ("template", Cpp::Template),
        ("_type_specifier", Cpp::TypeSpecifier),
        ("^=", Cpp::CARETEQ),
        ("case", Cpp::Case),
        ("friend", Cpp::Friend),
        ("type_definition_repeat1", Cpp::TypeDefinitionRepeat1),
        (
            "_declaration_specifiers_repeat2",
            Cpp::DeclarationSpecifiersRepeat2,
        ),
        ("statement_identifier", Cpp::StatementIdentifier),
        ("goto_statement", Cpp::GotoStatement),
        ("lambda_capture_specifier", Cpp::LambdaCaptureSpecifier),
        (
            "abstract_function_declarator_repeat1",
            Cpp::AbstractFunctionDeclaratorRepeat1,
        ),
        ("macro", Cpp::Macro),
        ("...", Cpp::DOTDOTDOT),
        ("preproc_ifdef", Cpp::PreprocIfdef),
        ("->", Cpp::DASHGT),
        ("base_class_clause", Cpp::BaseClassClause),
        ("primitive_type", Cpp::PrimitiveType),
        ("#ifndef", Cpp::HASHifndef),
        ("preproc_params_token1", Cpp::PreprocParamsToken1),
        ("return", Cpp::Return),
        ("--", Cpp::DASHDASH),
        ("enumerator_list_repeat1", Cpp::EnumeratorListRepeat1),
        ("~", Cpp::TILDE),
        ("#include", Cpp::HASHinclude),
        ("concatenated_string", Cpp::ConcatenatedString),
        (
            "variadic_parameter_declaration",
            Cpp::VariadicParameterDeclaration,
        ),
        ("preproc_binary_expression", Cpp::PreprocBinaryExpression),
        ("while_statement", Cpp::WhileStatement),
        ("#else", Cpp::HASHelse),
        ("pointer_expression", Cpp::PointerExpression),
        ("case_statement", Cpp::CaseStatement),
        ("case_statement_repeat1", Cpp::CaseStatementRepeat1),
        ("enum_specifier", Cpp::EnumSpecifier),
        ("expression_statement", Cpp::ExpressionStatement),
        ("goto", Cpp::Goto),
    ]),
};

impl From<&str> for Cpp {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Cpp {
    #[inline(always)]
    fn from(x: u16) -> Self {
        unsafe { std::mem::transmute(x) }
    }
}

// Cpp == u16
impl PartialEq<u16> for Cpp {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Cpp::from(*x)
    }
}

// u16 == Cpp
impl PartialEq<Cpp> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Cpp) -> bool {
        *x == *self
    }
}
